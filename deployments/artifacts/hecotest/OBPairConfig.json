{
  "address": "0x9738Cd280C42f219539d1EA4C99093d460Ef46b8",
  "abi": [],
  "transactionHash": "0xe70cdac73e9ff1b8ad9f1a301e35b2fc32a9e5a7e0d67b824ae37bf45691b161",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x9738Cd280C42f219539d1EA4C99093d460Ef46b8",
    "transactionIndex": 0,
    "gasUsed": "185660",
    "logsBloom": "0x
    "blockHash": "0xf6b9131352396d084b00e83f3e6fa6cfd8383e3afe3ac39f0069e003843e1692",
    "transactionHash": "0xe70cdac73e9ff1b8ad9f1a301e35b2fc32a9e5a7e0d67b824ae37bf45691b161",
    "logs": [],
    "blockNumber": 7054940,
    "cumulativeGasUsed": "185660",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8a0427784efd2443060fa8bf9aaed67b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeMaker(DataTypes.OBPairConfigMap storage)\":{\"details\":\"Gets the maker fee of order book pair\",\"params\":{\"self\":\"The order book pair configuration\"},\"returns\":{\"_0\":\"The maker fee + 1 if fee exist or else 0*\"}},\"feeTaker(DataTypes.OBPairConfigMap storage)\":{\"details\":\"Gets the taker fee of order book pair\",\"params\":{\"self\":\"The order book pair configuration\"},\"returns\":{\"_0\":\"The taker fee + 1 if fee exist or else 0*\"}},\"setFeeMaker(DataTypes.OBPairConfigMap storage,uint256)\":{\"details\":\"Sets the maker fee of order book pair\",\"params\":{\"fee\":\"taker fee to set*\",\"self\":\"The order book pair configuration\"}},\"setFeeTaker(DataTypes.OBPairConfigMap storage,uint256)\":{\"details\":\"Sets the maker fee of order book pair\",\"params\":{\"fee\":\"maker fee to set*\",\"self\":\"The order book pair configuration\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/orderbook/OBPairConfig.sol\":\"OBPairConfig\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/orderbook/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct TokenAmount {\\r\\n        address srcToken;\\r\\n        address destToken;\\r\\n        address srcEToken;             // srcToken \\u5bf9\\u5e94\\u7684 eToken\\r\\n        address destEToken;            // destToken \\u5bf9\\u5e94\\u7684 eToken\\r\\n        uint amountIn;                 // \\u521d\\u59cb\\u6302\\u5355\\u6570\\u91cf\\r\\n        uint amountInMint;             // \\u5982\\u679c srcToken \\u4e0d\\u662f eToken, mint \\u6210\\u4e3a etoken \\u7684\\u6570\\u91cf\\r\\n        uint fulfiled;                 // \\u5df2\\u7ecf\\u6210\\u4ea4\\u90e8\\u5206, \\u5355\\u4f4d etoken\\r\\n        uint guaranteeAmountOut;       // \\u6700\\u4f4e\\u5151\\u6362\\u540e\\u8981\\u6c42\\u5f97\\u5230\\u7684\\u6570\\u91cf\\r\\n        uint destFulfiled;             // destEToken \\u5df2\\u7ecf\\u5f97\\u5230\\u7684 destEToken\\r\\n    }\\r\\n\\r\\n    struct OrderItem {\\r\\n      uint orderId;\\r\\n      uint pairAddrIdx;        // pairIdx | addrIdx\\r\\n      uint pair;               // hash(srcToken, destToken)\\r\\n      uint timestamp;          // \\u6302\\u5355\\u65f6\\u95f4 \\r\\n      uint flag;\\r\\n      address owner;           // \\u5982\\u679c\\u662f\\u6760\\u6746\\u7684\\u8ba2\\u5355, owner \\u4e3a\\u6760\\u6746\\u5408\\u7ea6\\u5730\\u5740, to\\u4e3a\\u7528\\u6237\\u771f\\u5b9e\\u5730\\u5740\\r\\n      address to;              // \\u5151\\u6362\\u5f97\\u5230\\u7684token\\u53d1\\u9001\\u5730\\u5740 \\r\\n      TokenAmount tokenAmt;\\r\\n    }\\r\\n\\r\\n    struct OBPairConfigMap {\\r\\n      // bit 0-127 min amount\\r\\n      // bit 128-191 maker fee rate\\r\\n      // bit 192-255 taker fee rate\\r\\n      uint256 data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ce7925dec8d618868e42cb33376fa90d7ed0fb97fac6fd1f500fb05a3bc8aaf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/OBPairConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport { DataTypes } from \\\"./DataTypes.sol\\\";\\r\\n\\r\\nlibrary OBPairConfig {\\r\\n    uint constant internal MASK_FEE_MAKER  = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff; // prettier-ignore\\r\\n    uint constant internal MASK_FEE_TAKER  = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000; // prettier-ignore\\r\\n    // uint constant internal FEE_DENOMINATOR = 10000;\\r\\n\\r\\n    uint constant internal MAX_FEE_RATE = 1000; // 10%\\r\\n\\r\\n    uint constant internal SHIFT_FEE_TAKER = 128;\\r\\n\\r\\n    /**\\r\\n    * @dev Gets the maker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @return The maker fee + 1 if fee exist or else 0\\r\\n    **/\\r\\n    function feeMaker(DataTypes.OBPairConfigMap storage self) public view returns (uint256) {\\r\\n        return (self.data & MASK_FEE_MAKER);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Gets the taker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @return The taker fee + 1 if fee exist or else 0\\r\\n    **/\\r\\n    function feeTaker(DataTypes.OBPairConfigMap storage self) public view returns (uint256) {\\r\\n        return ((self.data & MASK_FEE_TAKER) >> SHIFT_FEE_TAKER);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @dev Sets the maker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @param fee taker fee to set\\r\\n    **/\\r\\n    function setFeeMaker(DataTypes.OBPairConfigMap storage self, uint fee) public {\\r\\n        require(fee < MAX_FEE_RATE, \\\"maker fee invalid\\\");\\r\\n        self.data = (self.data & ~MASK_FEE_MAKER) | (fee+1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Sets the maker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @param fee maker fee to set\\r\\n    **/\\r\\n    function setFeeTaker(DataTypes.OBPairConfigMap storage self, uint fee) public {\\r\\n        require(fee < MAX_FEE_RATE, \\\"taker fee invalid\\\");\\r\\n        self.data = (self.data & ~MASK_FEE_TAKER) | ((fee+1) << SHIFT_FEE_TAKER);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x544cb3af78f5c88c1b23ad230292082e201d16bf1597727b9ea1551396f9b5df\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x610267610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806324637ce01461005b57806332b914bf1461007d578063652bccd31461009d578063a645cb6d146100c6575b600080fd5b81801561006757600080fd5b5061007b610076366004610199565b6100d9565b005b81801561008957600080fd5b5061007b610098366004610199565b610122565b6100b06100ab366004610181565b610164565b6040516100bd9190610228565b60405180910390f35b6100b06100d4366004610181565b61017a565b6103e881106101035760405162461bcd60e51b81526004016100fa906101f1565b60405180910390fd5b81546fffffffffffffffffffffffffffffffff19166001909101179055565b6103e881106101435760405162461bcd60e51b81526004016100fa906101ba565b81546fffffffffffffffffffffffffffffffff16600190910160801b179055565b546fffffffffffffffffffffffffffffffff1690565b5460801c90565b600060208284031215610192578081fd5b5035919050565b600080604083850312156101ab578081fd5b50508035926020909101359150565b60208082526011908201527f74616b65722066656520696e76616c6964000000000000000000000000000000604082015260600190565b60208082526011908201527f6d616b65722066656520696e76616c6964000000000000000000000000000000604082015260600190565b9081526020019056fea2646970667358221220194ae464cf4edb63d9c374a51644f212f9982c9f6acc71370e68e9aa4d108b7664736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806324637ce01461005b57806332b914bf1461007d578063652bccd31461009d578063a645cb6d146100c6575b600080fd5b81801561006757600080fd5b5061007b610076366004610199565b6100d9565b005b81801561008957600080fd5b5061007b610098366004610199565b610122565b6100b06100ab366004610181565b610164565b6040516100bd9190610228565b60405180910390f35b6100b06100d4366004610181565b61017a565b6103e881106101035760405162461bcd60e51b81526004016100fa906101f1565b60405180910390fd5b81546fffffffffffffffffffffffffffffffff19166001909101179055565b6103e881106101435760405162461bcd60e51b81526004016100fa906101ba565b81546fffffffffffffffffffffffffffffffff16600190910160801b179055565b546fffffffffffffffffffffffffffffffff1690565b5460801c90565b600060208284031215610192578081fd5b5035919050565b600080604083850312156101ab578081fd5b50508035926020909101359150565b60208082526011908201527f74616b65722066656520696e76616c6964000000000000000000000000000000604082015260600190565b60208082526011908201527f6d616b65722066656520696e76616c6964000000000000000000000000000000604082015260600190565b9081526020019056fea2646970667358221220194ae464cf4edb63d9c374a51644f212f9982c9f6acc71370e68e9aa4d108b7664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "feeMaker(DataTypes.OBPairConfigMap storage)": {
        "details": "Gets the maker fee of order book pair",
        "params": {
          "self": "The order book pair configuration"
        },
        "returns": {
          "_0": "The maker fee + 1 if fee exist or else 0*"
        }
      },
      "feeTaker(DataTypes.OBPairConfigMap storage)": {
        "details": "Gets the taker fee of order book pair",
        "params": {
          "self": "The order book pair configuration"
        },
        "returns": {
          "_0": "The taker fee + 1 if fee exist or else 0*"
        }
      },
      "setFeeMaker(DataTypes.OBPairConfigMap storage,uint256)": {
        "details": "Sets the maker fee of order book pair",
        "params": {
          "fee": "taker fee to set*",
          "self": "The order book pair configuration"
        }
      },
      "setFeeTaker(DataTypes.OBPairConfigMap storage,uint256)": {
        "details": "Sets the maker fee of order book pair",
        "params": {
          "fee": "maker fee to set*",
          "self": "The order book pair configuration"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}