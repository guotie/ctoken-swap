{
  "address": "0x07F2471243491622743d9bC38A5d0eE8deD15Ed7",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "destToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "srcEToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "destEToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fulfiled",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "guaranteeAmountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.TokenAmount",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amtToTaken",
          "type": "uint256"
        }
      ],
      "name": "convertBuyAmountByETokenIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICToken",
          "name": "ctoken",
          "type": "ICToken"
        }
      ],
      "name": "getCurrentExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfed4a9a40775c69d4df47be9cd3ebfbf27731a511692ca7d6936039479fc4562",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x07F2471243491622743d9bC38A5d0eE8deD15Ed7",
    "transactionIndex": 2,
    "gasUsed": "437633",
    "logsBloom": "0x
    "blockHash": "0x75b4f54c716474417540f754b7e4eae8f47b55cf9805e9b92b3693f68ff0cdb2",
    "transactionHash": "0xfed4a9a40775c69d4df47be9cd3ebfbf27731a511692ca7d6936039479fc4562",
    "logs": [],
    "blockNumber": 6618363,
    "cumulativeGasUsed": "530446",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a2db663172882f31b4b299cb8fa408f2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcEToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destEToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfiled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.TokenAmount\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amtToTaken\",\"type\":\"uint256\"}],\"name\":\"convertBuyAmountByETokenIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"ctoken\",\"type\":\"ICToken\"}],\"name\":\"getCurrentExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convertBuyAmountByETokenIn(DataTypes.TokenAmount,uint256)\":{\"details\":\"\\u6839\\u636e\\u4ef7\\u683c\\u8ba1\\u7b97 amtToTaken \\u5bf9\\u5e94\\u7684 amtOut. \\u5982\\u679c\\u6302\\u5355\\u65f6 destToken \\u662f ctoken, \\u5219\\u76f4\\u63a5\\u8ba1\\u7b97\\u6bd4\\u4f8b; \\u5426\\u5219, \\u9700\\u8981\\u5c06\\u6302\\u5355\\u8bbe\\u7f6e\\u7684guaranteeAmountOut\\u8f6c\\u6362\\u4e3a etoken \\u6570\\u91cf, \\u518d\\u8ba1\\u7b97\",\"params\":{\"amtToTaken\":\"amount to taken, in etoken\",\"data\":\"OBPrice to calcutation\"},\"returns\":{\"_0\":\"maker \\u5f97\\u5230\\u7684\\u5e01\\u6570\\u91cf; \\u5355\\u4f4d etoken \"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/orderbook/OBPriceLogic.sol\":\"OBPriceLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/orderbook/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    uint constant internal  SRC_IS_ETOKEN = 0x00001; // prettier-ignore\\r\\n    uint constant internal DEST_IS_ETOKEN = 0x00002;\\r\\n \\r\\n    struct TokenAmount {\\r\\n        // uint isEToken;            // \\u6302\\u5355\\u5356\\u51fa\\u7684\\u5e01\\u662f\\u5426\\u662f eToken\\r\\n        address srcToken;\\r\\n        address destToken;\\r\\n        address srcEToken;             // srcToken \\u5bf9\\u5e94\\u7684 eToken\\r\\n        address destEToken;            // destToken \\u5bf9\\u5e94\\u7684 eToken\\r\\n        uint amountIn;                 // \\u521d\\u59cb\\u6302\\u5355\\u6570\\u91cf\\r\\n        uint amountInMint;             // \\u5982\\u679c srcToken \\u4e0d\\u662f eToken, mint \\u6210\\u4e3a etoken \\u7684\\u6570\\u91cf\\r\\n        uint fulfiled;                 // \\u5df2\\u7ecf\\u6210\\u4ea4\\u90e8\\u5206, \\u5355\\u4f4d etoken\\r\\n        uint guaranteeAmountOut;       // \\u6700\\u4f4e\\u5151\\u6362\\u540e\\u8981\\u6c42\\u5f97\\u5230\\u7684\\u6570\\u91cf\\r\\n        // uint guaranteeAmountOutEToken; // \\u6700\\u4f4e\\u5151\\u6362\\u540e\\u8981\\u6c42\\u5f97\\u5230\\u7684 etoken \\u6570\\u91cf\\r\\n    }\\r\\n\\r\\n    struct OrderItem {\\r\\n      uint orderId;\\r\\n      uint pairAddrIdx;        // pairIdx | addrIdx\\r\\n      uint pair;               // hash(srcToken, destToken)\\r\\n      uint timestamp;          // \\u8fc7\\u671f\\u65f6\\u95f4 | \\u6302\\u5355\\u65f6\\u95f4 \\r\\n      uint flag;\\r\\n      address owner;\\r\\n      address to;              // \\u5151\\u6362\\u5f97\\u5230\\u7684token\\u53d1\\u9001\\u5730\\u5740 \\u672a\\u4f7f\\u7528\\r\\n      TokenAmount tokenAmt;\\r\\n    }\\r\\n\\r\\n    struct OBPairConfigMap {\\r\\n      // bit 0-127 min amount\\r\\n      // bit 128-191 maker fee rate\\r\\n      // bit 192-255 taker fee rate\\r\\n      uint256 data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcedf82602b579a7163f61b8af76e901e25e7f189f93be7e3958e9434c714b744\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface ICToken {\\r\\n\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function exchangeRateCurrent() external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n    function accrualBlockNumber() external view returns (uint);\\r\\n    // function getCash() virtual external view returns (uint);\\r\\n    // function accrueInterest() virtual public returns (uint);\\r\\n    // function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x9f4f5bc3abbbdcf757dee2de1dbde83af5feafa10ccc733cba4f7ab1b211dd2f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/OBPriceLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ICToken.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./DataTypes.sol\\\";\\r\\n\\r\\n// \\u6839\\u636ecompound \\u6700\\u65b0\\u7684 exchange rate \\u6362\\u7b97 \\u6302\\u5355\\u65f6\\u7684\\u4ef7\\u683c, \\u6839\\u636e taker \\u7684\\u5403\\u5355\\u91cf\\u6362\\u7b97\\u6302\\u5355\\u8005\\r\\n// 1. tokenIn \\u548c tokenOut\\u90fd\\u662f etoken: \\u4e0d\\u9700\\u8981\\u6362\\u7b97\\r\\n// 2. tokenIn tokenOut \\u90fd\\u662f token: \\r\\nlibrary OBPriceLogic {\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // struct OBPrice {\\r\\n    //     address src;\\r\\n    //     address srcEToken;\\r\\n    //     address dst;\\r\\n    //     address dstEToken;\\r\\n    //     uint256 amtIn;\\r\\n    //     uint256 eAmtIn;\\r\\n    //     uint256 amtOut;\\r\\n    //     uint256 eAmtOut;\\r\\n    //     // uint256 feeTaker;\\r\\n    //     // uint256 feeMaker;\\r\\n    // }\\r\\n\\r\\n    // uint256 constant public DENOMINATOR = 10000;\\r\\n\\r\\n    function getCurrentExchangeRate(ICToken ctoken) public view returns (uint256) {\\r\\n        uint rate = ctoken.exchangeRateStored();\\r\\n        uint supplyRate = ctoken.supplyRatePerBlock();\\r\\n        uint lastBlock = ctoken.accrualBlockNumber();\\r\\n        uint blocks = block.number.sub(lastBlock);\\r\\n        uint inc = rate.mul(supplyRate).mul(blocks);\\r\\n        return rate.add(inc);\\r\\n    }\\r\\n\\r\\n    function refreshTokenExchangeRate(ICToken ctoken) public returns (uint256) {\\r\\n        return ctoken.exchangeRateCurrent();\\r\\n    }\\r\\n\\r\\n    /// @dev \\u6839\\u636e\\u4ef7\\u683c\\u8ba1\\u7b97 amtToTaken \\u5bf9\\u5e94\\u7684 amtOut. \\u5982\\u679c\\u6302\\u5355\\u65f6 destToken \\u662f ctoken, \\u5219\\u76f4\\u63a5\\u8ba1\\u7b97\\u6bd4\\u4f8b; \\u5426\\u5219, \\u9700\\u8981\\u5c06\\u6302\\u5355\\u8bbe\\u7f6e\\u7684guaranteeAmountOut\\u8f6c\\u6362\\u4e3a etoken \\u6570\\u91cf, \\u518d\\u8ba1\\u7b97\\r\\n    /// @param data OBPrice to calcutation\\r\\n    /// @param amtToTaken amount to taken, in etoken\\r\\n    /// @return maker \\u5f97\\u5230\\u7684\\u5e01\\u6570\\u91cf; \\u5355\\u4f4d etoken \\r\\n    function convertBuyAmountByETokenIn(\\r\\n                    DataTypes.TokenAmount memory data,\\r\\n                    uint amtToTaken\\r\\n                )\\r\\n                public\\r\\n                view\\r\\n                returns (uint) {\\r\\n        // address src = data.srcToken;\\r\\n        // address srcEToken = data.srcEToken;\\r\\n        address dst = data.destToken;\\r\\n        address dstEToken = data.destEToken;\\r\\n        // // uint256 feeTaker = DENOMINATOR - data.feeTaker;\\r\\n        // // uint256 feeMaker = DENOMINATOR - data.feeMaker;\\r\\n\\r\\n        if (dst == dstEToken) {\\r\\n            // \\u6302\\u5355\\u5c31\\u662f\\u4ee5 etoken \\u6765\\u6302\\u7684\\r\\n            return amtToTaken.mul(data.guaranteeAmountOut).div(data.amountInMint);\\r\\n        }\\r\\n        uint destRate = getCurrentExchangeRate(ICToken(dstEToken));\\r\\n        uint destEAmt = data.guaranteeAmountOut.mul(1e18).div(destRate);\\r\\n        return amtToTaken.mul(destEAmt).div(data.amountInMint);\\r\\n\\r\\n        // // \\u7531\\u4e8e\\u76ee\\u524d create order\\u5df2\\u7ecf\\u9650\\u5236\\u4e86\\u5fc5\\u987b\\u540c\\u65f6\\u4e3a token \\u6216\\u8005 etoken\\r\\n        // require(src != srcEToken && dst != dstEToken, \\\"invalid orderbook tokens\\\");\\r\\n        \\r\\n        // // price = amtOut/amtIn = eAmtOut*rateOut/(eAmtIn*rateIn)\\r\\n        // // eprice = (price*rateIn)/rateOut = (amtOut*rateIn)/(amtIn*rateOut)\\r\\n        // uint256 rateIn = getCurrentExchangeRate(ICToken(srcEToken));\\r\\n        // uint256 rateOut = getCurrentExchangeRate(ICToken(dstEToken));\\r\\n\\r\\n        // // \\u5403\\u5355\\u8005\\u9700\\u8981\\u8f6c\\u5165\\u7684\\u5e01\\u7684\\u6570\\u91cf\\r\\n        // return amtToTaken.mul(rateIn).mul(data.guaranteeAmountOut).div(data.amountIn).div(rateOut);\\r\\n        // // return (amtToSendByEToken, amtToTaken);\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xecdc26fc00ad1d72807acc6a5436c2f3b33c6cd383fe7a4c59cb1d2004a2567e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant internal WAD = 10 ** 18;\\r\\n    uint256 constant internal RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6b2ed04e70305d6538fe8eddf72456d08938ca9d78cabc596963a8fcef88bb5a\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6106f7610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80630bbc1cea14610050578063271ca3c91461008657806378cbe05114610099575b600080fd5b81801561005c57600080fd5b5061007061006b3660046104bb565b6100ac565b60405161007d9190610679565b60405180910390f35b6100706100943660046104bb565b610127565b6100706100a73660046104d7565b6102c2565b6000816001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156100e957600080fd5b505af11580156100fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610121919061057a565b92915050565b600080826001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561016357600080fd5b505afa158015610177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019b919061057a565b90506000836001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156101d857600080fd5b505afa1580156101ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610210919061057a565b90506000846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561024d57600080fd5b505afa158015610261573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610285919061057a565b90506000610293438361035a565b905060006102ab826102a587876103a3565b906103a3565b90506102b785826103e6565b979650505050505050565b60208201516060830151600091906001600160a01b038083169082161415610312576103098560a001516103038760e00151876103a390919063ffffffff16565b9061040b565b92505050610121565b600061031d82610127565b9050600061034482610303670de0b6b3a76400008a60e001516103a390919063ffffffff16565b60a08801519091506102b79061030388846103a3565b600061039c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061044d565b9392505050565b6000826103b257506000610121565b828202828482816103bf57fe5b041461039c5760405162461bcd60e51b81526004016103dd9061061c565b60405180910390fd5b60008282018381101561039c5760405162461bcd60e51b81526004016103dd906105e5565b600061039c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610479565b600081848411156104715760405162461bcd60e51b81526004016103dd9190610592565b505050900390565b6000818361049a5760405162461bcd60e51b81526004016103dd9190610592565b5060008385816104a657fe5b0495945050505050565b8035610121816106a9565b6000602082840312156104cc578081fd5b813561039c816106a9565b6000808284036101208112156104eb578182fd5b610100808212156104fa578283fd5b61050381610682565b915061050f86866104b0565b825261051e86602087016104b0565b602083015261053086604087016104b0565b604083015261054286606087016104b0565b60608301526080858101359083015260a0808601359083015260c0808601359083015260e08086013590830152909593013593505050565b60006020828403121561058b578081fd5b5051919050565b6000602080835283518082850152825b818110156105be578581018301518582016040015282016105a2565b818111156105cf5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60405181810167ffffffffffffffff811182821017156106a157600080fd5b604052919050565b6001600160a01b03811681146106be57600080fd5b5056fea26469706673582212203a78e4622f9fe3411fedee474cba685bd35351f5e9de2d154abab020be823f1364736f6c634300060c0033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80630bbc1cea14610050578063271ca3c91461008657806378cbe05114610099575b600080fd5b81801561005c57600080fd5b5061007061006b3660046104bb565b6100ac565b60405161007d9190610679565b60405180910390f35b6100706100943660046104bb565b610127565b6100706100a73660046104d7565b6102c2565b6000816001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156100e957600080fd5b505af11580156100fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610121919061057a565b92915050565b600080826001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561016357600080fd5b505afa158015610177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019b919061057a565b90506000836001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156101d857600080fd5b505afa1580156101ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610210919061057a565b90506000846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561024d57600080fd5b505afa158015610261573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610285919061057a565b90506000610293438361035a565b905060006102ab826102a587876103a3565b906103a3565b90506102b785826103e6565b979650505050505050565b60208201516060830151600091906001600160a01b038083169082161415610312576103098560a001516103038760e00151876103a390919063ffffffff16565b9061040b565b92505050610121565b600061031d82610127565b9050600061034482610303670de0b6b3a76400008a60e001516103a390919063ffffffff16565b60a08801519091506102b79061030388846103a3565b600061039c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061044d565b9392505050565b6000826103b257506000610121565b828202828482816103bf57fe5b041461039c5760405162461bcd60e51b81526004016103dd9061061c565b60405180910390fd5b60008282018381101561039c5760405162461bcd60e51b81526004016103dd906105e5565b600061039c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610479565b600081848411156104715760405162461bcd60e51b81526004016103dd9190610592565b505050900390565b6000818361049a5760405162461bcd60e51b81526004016103dd9190610592565b5060008385816104a657fe5b0495945050505050565b8035610121816106a9565b6000602082840312156104cc578081fd5b813561039c816106a9565b6000808284036101208112156104eb578182fd5b610100808212156104fa578283fd5b61050381610682565b915061050f86866104b0565b825261051e86602087016104b0565b602083015261053086604087016104b0565b604083015261054286606087016104b0565b60608301526080858101359083015260a0808601359083015260c0808601359083015260e08086013590830152909593013593505050565b60006020828403121561058b578081fd5b5051919050565b6000602080835283518082850152825b818110156105be578581018301518582016040015282016105a2565b818111156105cf5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60405181810167ffffffffffffffff811182821017156106a157600080fd5b604052919050565b6001600160a01b03811681146106be57600080fd5b5056fea26469706673582212203a78e4622f9fe3411fedee474cba685bd35351f5e9de2d154abab020be823f1364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "convertBuyAmountByETokenIn(DataTypes.TokenAmount,uint256)": {
        "details": "根据价格计算 amtToTaken 对应的 amtOut. 如果挂单时 destToken 是 ctoken, 则直接计算比例; 否则, 需要将挂单设置的guaranteeAmountOut转换为 etoken 数量, 再计算",
        "params": {
          "amtToTaken": "amount to taken, in etoken",
          "data": "OBPrice to calcutation"
        },
        "returns": {
          "_0": "maker 得到的币数量; 单位 etoken "
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}