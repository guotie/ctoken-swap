{
  "address": "0x3D2079627bED06ce7374e64e9Bdda11b940BED4E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wht",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cwht",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ctokenFactory",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "WHT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETHUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addQuoteToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "adminTransfer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairFeeLastBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cWHT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "compAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ctokenFactory",
      "outputs": [
        {
          "internalType": "contract LErc20DelegatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "currentBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeAlloc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "getAmountsInUnderlying",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "getAmountsOutUnderlying",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lastRewardBlock",
          "type": "uint256"
        }
      ],
      "name": "getBlockRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lpDepositAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lpPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quoteTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "ctokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ctokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETHUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHUnderlyingWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "resetQuoteTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "reward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapMininng",
          "type": "address"
        }
      ],
      "name": "setSwapMining",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokensUnderlying",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensUnderlying",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETHUnderlying",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "cpath",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensUnderlying",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "swapMining",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETHUnderlying",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "cpath",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokensUnderlying",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x991f96f36c5971042e40ede7c6c30d79ac0258c187cbca1e0a4d8f7fdde7b773",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x3D2079627bED06ce7374e64e9Bdda11b940BED4E",
    "transactionIndex": 0,
    "gasUsed": "54472",
    "logsBloom": "0x
    "blockHash": "0x7067a965cbe753133d7a9fcdbc237a789d4d5e62e1c103fb7c669b45a7a07d8c",
    "transactionHash": "0x991f96f36c5971042e40ede7c6c30d79ac0258c187cbca1e0a4d8f7fdde7b773",
    "logs": [],
    "blockNumber": 6620445,
    "cumulativeGasUsed": "54472",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe10C55559e3c0AD8307447A0D4e966c6BabceF4c",
    "0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836",
    "0x406AbB3387f9b52E741bC1F1D9b8406BfB9D5B4f",
    "0x71B01154717678BD2380b6B96273F3f8CB06C7A9"
  ],
  "solcInputHash": "bef7a6e5fbf8a66bda7bc06a237b8730",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wht\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cwht\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ctokenFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addQuoteToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"adminTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairFeeLastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cWHT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ctokenFactory\",\"outputs\":[{\"internalType\":\"contract LErc20DelegatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getAmountsInUnderlying\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getAmountsOutUnderlying\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"getBlockRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lpDepositAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lpPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quoteTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ctokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHUnderlyingWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"resetQuoteTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapMininng\",\"type\":\"address\"}],\"name\":\"setSwapMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokensUnderlying\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensUnderlying\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHUnderlying\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"cpath\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensUnderlying\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapMining\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETHUnderlying\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"cpath\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokensUnderlying\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"getAmountsInUnderlying(uint256,address[],address)\":{\"details\":\"\\u7ed9\\u5b9a amountOut, \\u8ba1\\u7b97\\u8f93\\u5165\\u7684amountIn\",\"params\":{\"path\":\"token \\u6570\\u7ec4, \\u6ce8\\u610f: \\u5fc5\\u987b\\u662ftoken\\u7684\\u5730\\u5740!!!\"}},\"getAmountsOutUnderlying(uint256,address[],address)\":{\"details\":\"\\u7ed9\\u5b9a amountIn, \\u8ba1\\u7b97\\u80fd\\u591f\\u5151\\u6362\\u5f97\\u5230\\u7684amountOut\",\"params\":{\"path\":\"token \\u6570\\u7ec4, \\u6ce8\\u610f: \\u5fc5\\u987b\\u662ftoken\\u7684\\u5730\\u5740!!!\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/swap/heco/Router.sol\":\"DeBankRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"@openzeppelin/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"contracts/swap/heco/Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\r\\nimport \\\"../library/SafeMath.sol\\\";\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"../interface/IDeBankFactory.sol\\\";\\r\\nimport \\\"../interface/IDeBankPair.sol\\\";\\r\\nimport \\\"../interface/IDeBankRouter.sol\\\";\\r\\nimport \\\"../interface/IWHT.sol\\\";\\r\\nimport \\\"../interface/LErc20DelegatorInterface.sol\\\";\\r\\nimport \\\"../interface/ICToken.sol\\\";\\r\\n\\r\\n// import \\\"../../compound/LHT.sol\\\";\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface ILHT {\\r\\n    function mint() external payable;\\r\\n}\\r\\n\\r\\ninterface ISwapMining {\\r\\n    function swap(address account, address input, address output, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IRewardToken {\\r\\n    function reward(uint256 blockNumber) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract DeBankRouter is IDeBankRouter, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public factory;\\r\\n    address public WHT;\\r\\n    address public swapMining;\\r\\n    address public cWHT;\\r\\n    address[] public quoteTokens;\\r\\n    LErc20DelegatorInterface public ctokenFactory;\\r\\n\\r\\n    // \\u6240\\u6709\\u4ea4\\u6613\\u5bf9\\u4ea7\\u751f\\u7684\\u624b\\u7eed\\u8d39\\u6536\\u5165, \\u5404\\u4e2a\\u4ea4\\u6613\\u5bf9\\u6839\\u636e\\u5360\\u6bd4\\u5206\\u914d\\u6536\\u76ca\\r\\n    uint public allPairFee;\\r\\n    // \\u4e0a\\u4e00\\u4e2a\\u5757\\u7684\\u603b\\u624b\\u7eed\\u8d39\\r\\n    uint public allPairFeeLastBlock;\\r\\n    // \\u5f00\\u59cb\\u5206\\u914d\\u6536\\u76ca\\u7684\\u5757\\r\\n    // uint public startBlock;\\r\\n    // \\u8bb0\\u5f55\\u5f53\\u524d\\u624b\\u7eed\\u8d39\\u7684\\u5757\\u6570\\r\\n    uint public currentBlock;\\r\\n    // tokens created per block to all pair LP\\r\\n    uint256 public lpPerBlock;      // LP \\u6bcf\\u5757\\u6536\\u76ca\\r\\n    // uint256 public traderPerBlock;  // \\u4ea4\\u6613\\u8005\\u6bcf\\u5757\\u6536\\u76ca\\r\\n    address public rewardToken;     // \\u6536\\u76ca token\\r\\n    // address public lpDepositAddr;   // compound \\u6d41\\u52a8\\u6027\\u62b5\\u62bc\\r\\n    // address public compAddr;        // compound unitroller\\r\\n    uint256 public feeAlloc;        // \\u624b\\u7eed\\u8d39\\u5206\\u914d\\u65b9\\u6848: 0: \\u5206\\u914d\\u7ed9LP; 1: \\u4e0d\\u5206\\u914d\\u7ed9LP, \\u5e73\\u53f0\\u6536\\u53d6\\u540e\\u5151\\u6362\\u4e3a anchorToken\\r\\n    // todo How many blocks are halved  182\\u5929 \\u5e94\\u8be5\\u5728 rewardToken \\u4e2d\\u5904\\u7406\\r\\n    // uint256 public halvingPeriod = 5256000;\\r\\n\\r\\n    modifier ensure(uint deadline) {\\r\\n        // solhint-disable-next-line\\r\\n        require(deadline >= block.timestamp, 'DeBankRouter: EXPIRED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _factory, address _wht, address _cwht, address _ctokenFactory) public {\\r\\n        factory = _factory;\\r\\n        WHT = _wht;\\r\\n        cWHT = _cwht;\\r\\n        ctokenFactory = LErc20DelegatorInterface(_ctokenFactory);\\r\\n        // startBlock = _startBlock;\\r\\n        // heco \\u94fe\\u4e0a\\u7684 usdt\\r\\n        quoteTokens.push(IDeBankFactory(_factory).anchorToken()); // usdt\\r\\n        quoteTokens.push(_cwht); // wht\\r\\n        // quoteTokens.push();  // husd\\r\\n    }\\r\\n\\r\\n    function() external payable {\\r\\n        assert(msg.sender == WHT || msg.sender == cWHT);\\r\\n        // only accept HT via fallback from the WHT contract\\r\\n    }\\r\\n\\r\\n    function pairFor(address tokenA, address tokenB) public view returns (address pair) {\\r\\n        // pair = IDeBankFactory(factory).pairFor(tokenA, tokenB);\\r\\n        pair = IDeBankFactory(factory).getPair(tokenA, tokenB);\\r\\n    }\\r\\n\\r\\n    function setSwapMining(address _swapMininng) public onlyOwner {\\r\\n        swapMining = _swapMininng;\\r\\n    }\\r\\n\\r\\n    function resetQuoteTokens(address[] memory tokens) public onlyOwner {\\r\\n        for (uint i; i < quoteTokens.length; i ++) {\\r\\n            quoteTokens.pop();\\r\\n        }\\r\\n        // quoteTokens.length = 0;\\r\\n        for (uint i; i < tokens.length; i ++) {\\r\\n            quoteTokens.push(tokens[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addQuoteToken(address token) public onlyOwner {\\r\\n        quoteTokens.push(token);\\r\\n    }\\r\\n\\r\\n    // function phase(uint256 blockNumber) public view returns (uint256) {\\r\\n    //     if (halvingPeriod == 0) {\\r\\n    //         return 0;\\r\\n    //     }\\r\\n    //     if (blockNumber > startBlock) {\\r\\n    //         return (blockNumber.sub(startBlock).sub(1)).div(halvingPeriod);\\r\\n    //     }\\r\\n    //     return 0;\\r\\n    // }\\r\\n\\r\\n    // \\u8ba1\\u7b97\\u5757\\u5956\\u52b1\\r\\n    function reward(uint256 blockNumber) public view returns (uint256) {\\r\\n        if (rewardToken == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        return IRewardToken(rewardToken).reward(blockNumber);\\r\\n        // todo totalSupply !!!\\r\\n        // if (IERC20(rewardToken).totalSupply() > 1e28) {\\r\\n        //     return 0;\\r\\n        // }\\r\\n        // uint256 _phase = phase(blockNumber);\\r\\n        // return lpPerBlock.div(2 ** _phase);\\r\\n    }\\r\\n\\r\\n    // todo to be removed\\r\\n    // function getBlockRewards(uint256 _lastRewardBlock) public view returns (uint256) {\\r\\n    //     uint256 blockReward = 0;\\r\\n    //     uint256 n = phase(_lastRewardBlock);\\r\\n    //     uint256 m = phase(block.number);\\r\\n    //     while (n < m) {\\r\\n    //         n++;\\r\\n    //         uint256 r = n.mul(halvingPeriod).add(startBlock);\\r\\n    //         blockReward = blockReward.add((r.sub(_lastRewardBlock)).mul(reward(r)));\\r\\n    //         _lastRewardBlock = r;\\r\\n    //     }\\r\\n    //     blockReward = blockReward.add((block.number.sub(_lastRewardBlock)).mul(reward(block.number)));\\r\\n    //     return blockReward;\\r\\n    // }\\r\\n\\r\\n    function _getOrCreateCtoken(address token) private returns (address ctoken) {\\r\\n        // ctoken = LErc20DelegatorInterface(IDeBankFactory(factory).lErc20DelegatorFactory()).getCTokenAddress(token);\\r\\n        ctoken = ctokenFactory.getCTokenAddress(token);\\r\\n    }\\r\\n\\r\\n    function _getCtoken(address token) private view returns (address ctoken) {\\r\\n        // ctoken = LErc20DelegatorInterface(IDeBankFactory(factory).lErc20DelegatorFactory()).getCTokenAddressPure(token);\\r\\n        ctoken = ctokenFactory.getCTokenAddressPure(token);\\r\\n    }\\r\\n\\r\\n    function _getTokenByCtoken(address ctoken) private view returns (address token) {\\r\\n        // token = LErc20DelegatorInterface(IDeBankFactory(factory).lErc20DelegatorFactory()).getTokenAddress(ctoken);\\r\\n        token = ctokenFactory.getTokenAddress(ctoken);\\r\\n    }\\r\\n\\r\\n    // function _safeTransferCtoken(address token, address from, address to, uint amt) private {\\r\\n    //     TransferHelper.safeTransferFrom(_getCtoken(token), from, to, amt);\\r\\n    // }\\r\\n\\r\\n    // **** ADD LIQUIDITY ****\\r\\n\\r\\n    struct LiquidityLocalVars {\\r\\n        // uint amountToken;\\r\\n        // uint amountEth;\\r\\n        uint camountDesiredA;\\r\\n        uint camountDesiredB;\\r\\n        uint camountMinA;\\r\\n        uint camountMinB;\\r\\n\\r\\n        uint rateA;\\r\\n        uint rateB;\\r\\n        uint rateEth;\\r\\n        uint camountA;\\r\\n        uint camountB;\\r\\n        uint camountEth;\\r\\n\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        address ctokenA;\\r\\n        address ctokenB;\\r\\n    }\\r\\n\\r\\n    // tokenA tokenB \\u90fd\\u662f cToken\\r\\n    function _addLiquidity(\\r\\n        address ctokenA,\\r\\n        address ctokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin\\r\\n    ) internal returns (uint amountA, uint amountB) {\\r\\n        // console.log(\\\"_addLiquidity\\\", factory);\\r\\n        address tokenA = _getTokenByCtoken(ctokenA);\\r\\n        address tokenB = _getTokenByCtoken(ctokenB);\\r\\n        // create the pair if it doesn't exist yet\\r\\n        if (IDeBankFactory(factory).getPair(tokenA, tokenB) == address(0)) {\\r\\n            IDeBankFactory(factory).createPair(tokenA, tokenB, ctokenA, ctokenB);\\r\\n        }\\r\\n        // console.log(\\\"_addLiquidity getReserves\\\");\\r\\n        (uint reserveA, uint reserveB) = IDeBankFactory(factory).getReserves(tokenA, tokenB);\\r\\n        if (reserveA == 0 && reserveB == 0) {\\r\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\r\\n        } else {\\r\\n            uint amountBOptimal = IDeBankFactory(factory).quote(amountADesired, reserveA, reserveB);\\r\\n            // console.log(\\\"_addLiquidity: reserveA=%d  reserveB=%d\\\", reserveA, reserveB);\\r\\n            if (amountBOptimal <= amountBDesired) {\\r\\n                // console.log(\\\"_addLiquidity: amountBOptimal=%d  amountBDesired=%d  amountADesired=%d\\\",\\r\\n                //       amountBOptimal, amountBDesired, amountADesired);\\r\\n                require(amountBOptimal >= amountBMin, 'AddLiquidity: INSUFFICIENT_B_AMOUNT');\\r\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\r\\n            } else {\\r\\n                uint amountAOptimal = IDeBankFactory(factory).quote(amountBDesired, reserveB, reserveA);\\r\\n                // console.log(\\\"_addLiquidity: amountAOptimal=%d  amountADesired=%d  amountBDesired=%d\\\",\\r\\n                //       amountAOptimal, amountADesired, amountBDesired);\\r\\n                assert(amountAOptimal <= amountADesired);\\r\\n                require(amountAOptimal >= amountAMin, 'AddLiquidity: INSUFFICIENT_A_AMOUNT');\\r\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // tokenA tokenB \\u90fd\\u662f cToken, amount \\u5747\\u4e3a ctoken \\u7684 amount\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\r\\n        // console.log(tokenA, tokenB);\\r\\n        // console.log(\\\"amountDesired:\\\", amountADesired, amountBDesired);\\r\\n        // console.log(\\\"amountMin:\\\", amountAMin, amountBMin);\\r\\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\r\\n        address pair = pairFor(tokenA, tokenB);\\r\\n        // console.log(\\\"pair: %s\\\", pair);\\r\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\r\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\r\\n        // _safeTransferCtoken(tokenA, msg.sender, pair, amountA);\\r\\n        // _safeTransferCtoken(tokenB, msg.sender, pair, amountB);\\r\\n        liquidity = IDeBankPair(pair).mint(to);\\r\\n    }\\r\\n\\r\\n    function _cTokenExchangeRate(address ctoken) private view returns(uint) {\\r\\n        uint rate = ICToken(ctoken).exchangeRateStored();\\r\\n        uint256 supplyRate = ICToken(ctoken).supplyRatePerBlock();\\r\\n        uint256 prevBlock = ICToken(ctoken).accrualBlockNumber();\\r\\n        rate += rate.mul(supplyRate).mul(block.number - prevBlock);\\r\\n        return rate;\\r\\n    }\\r\\n\\r\\n    // 0. \\u8ba1\\u7b97\\u9700\\u8981\\u591a\\u5c11amount\\r\\n    // 1. transfer token from msg.sender to router\\r\\n    // 2. mint ctoken\\r\\n    // 3. transfer ctoken to pair\\r\\n    // amt \\u662f Ctoken \\u6d41\\u52a8\\u6027\\u9700\\u8981\\u7684 amount\\r\\n    function _mintTransferCToken(address token, address ctoken, address pair, uint amt) private {\\r\\n        // uint er = _cTokenExchangeRate(ctoken);\\r\\n        // uint amt = camt * er / 10**18;\\r\\n\\r\\n        TransferHelper.safeTransferFrom(token, msg.sender, address(this), amt);\\r\\n        uint b0 = ICToken(ctoken).balanceOf(address(this));\\r\\n        // mint \\u4e4b\\u524d\\u9700\\u8981 approve\\r\\n        ICToken(token).approve(address(ctoken), amt);\\r\\n        uint ret = ICToken(ctoken).mint(amt);\\r\\n        ICToken(ctoken).approve(address(ctoken), 0);\\r\\n        require(ret == 0, \\\"mint failed\\\");\\r\\n        uint b1 = ICToken(ctoken).balanceOf(address(this));\\r\\n        uint mintCAmt = b1 - b0;\\r\\n\\r\\n        // console.log(\\\"_mintTransferCToken:\\\", amt, mintCAmt);\\r\\n\\r\\n        TransferHelper.safeTransferFrom(ctoken, address(this), pair, mintCAmt);\\r\\n    }\\r\\n\\r\\n    function _mintTransferEth(address pair, uint amt) private {\\r\\n        uint b0 = ICToken(cWHT).balanceOf(address(this));\\r\\n        // todo\\r\\n        ILHT(cWHT).mint.value(amt)();\\r\\n        // require(ret == 0, \\\"mint failed\\\");\\r\\n        uint b1 = ICToken(cWHT).balanceOf(address(this));\\r\\n        uint mintCAmt = b1 - b0;\\r\\n        TransferHelper.safeTransferFrom(cWHT, address(this), pair, mintCAmt);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _amount2CAmount(uint amt, uint rate) private pure returns (uint) {\\r\\n        return amt.mul(10**18).div(rate);\\r\\n    }\\r\\n\\r\\n    function _camount2Amount(uint camt, uint rate) private pure returns (uint) {\\r\\n        return camt.mul(rate).div(10**18);\\r\\n    }\\r\\n\\r\\n    // tokenA tokenB \\u90fd\\u662f token\\r\\n    // 6/23 \\u5982\\u679c ctoken \\u4e0d\\u5b58\\u5728, \\u9700\\u8981\\u521b\\u5efa ctoken\\r\\n    function addLiquidityUnderlying(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\r\\n        LiquidityLocalVars memory vars;\\r\\n\\r\\n        vars.ctokenA = _getOrCreateCtoken(tokenA);\\r\\n        vars.ctokenB = _getOrCreateCtoken(tokenB);\\r\\n        vars.rateA = _cTokenExchangeRate(vars.ctokenA);\\r\\n        vars.rateB = _cTokenExchangeRate(vars.ctokenB);\\r\\n        vars.camountDesiredA = _amount2CAmount(amountADesired, vars.rateA);\\r\\n        vars.camountDesiredB = _amount2CAmount(amountBDesired, vars.rateB);\\r\\n        vars.camountMinA = _amount2CAmount(amountAMin, vars.rateA);\\r\\n        vars.camountMinB = _amount2CAmount(amountBMin, vars.rateB);\\r\\n\\r\\n        (vars.camountA, vars.camountB) = _addLiquidity(vars.ctokenA,\\r\\n                vars.ctokenB,\\r\\n                vars.camountDesiredA,\\r\\n                vars.camountDesiredB,\\r\\n                vars.camountMinA,\\r\\n                vars.camountMinB);\\r\\n        address pair = pairFor(tokenA, tokenB);\\r\\n        // mint token \\u5f97\\u5230 ctoken\\r\\n        amountA = _camount2Amount(vars.camountA, vars.rateA);\\r\\n        amountB = _camount2Amount(vars.camountB, vars.rateB);\\r\\n        // console.log(\\\"amountA: %d amountB: %d\\\", amountA, amountB);\\r\\n        _mintTransferCToken(tokenA, vars.ctokenA, pair, amountA);\\r\\n        _mintTransferCToken(tokenB, vars.ctokenB, pair, amountB);\\r\\n        // TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\r\\n        // TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\r\\n        // _safeTransferCtoken(tokenA, msg.sender, pair, amountA);\\r\\n        // _safeTransferCtoken(tokenB, msg.sender, pair, amountB);\\r\\n        // console.log('addLiquidityUnderlying: pair=%s', pair);\\r\\n        liquidity = IDeBankPair(pair).mint(to);\\r\\n    }\\r\\n\\r\\n    // token \\u662f token \\u800c\\u4e0d\\u662f ctoken\\r\\n    // \\u8fd9\\u4e2a\\u51fd\\u6570\\u5e94\\u8be5\\u4e0d\\u80fd\\u76f4\\u63a5\\u88ab\\u8c03\\u7528\\u4e86, \\u5982\\u679c\\u662f ctoken, \\u76f4\\u63a5\\u8c03\\u7528\\u4e0a\\u9762\\u7684\\u51fd\\u6570\\uff1b\\u5982\\u679c\\u662f token, \\u9700\\u8981\\u8c03\\u7528 todo\\r\\n    function addLiquidityETHUnderlying(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\\r\\n        address ctoken = _getOrCreateCtoken(token);\\r\\n        LiquidityLocalVars memory vars;\\r\\n        vars.rateA = _cTokenExchangeRate(ctoken);\\r\\n        vars.rateB = _cTokenExchangeRate(cWHT);\\r\\n        vars.camountDesiredA = _amount2CAmount(amountTokenDesired, vars.rateA);\\r\\n        vars.camountDesiredB = _amount2CAmount(msg.value, vars.rateB);\\r\\n        vars.camountMinA = _amount2CAmount(amountTokenMin, vars.rateA);\\r\\n        vars.camountMinB = _amount2CAmount(amountETHMin, vars.rateB);\\r\\n        (uint amountCToken, uint amountCETH) = _addLiquidity(\\r\\n            ctoken,\\r\\n            cWHT,\\r\\n            vars.camountDesiredA,\\r\\n            vars.camountDesiredB,\\r\\n            vars.camountMinA,\\r\\n            vars.camountMinB\\r\\n        );\\r\\n        address pair = pairFor(token, WHT);\\r\\n\\r\\n        amountToken = _camount2Amount(amountCToken, vars.rateA);\\r\\n        amountETH = _camount2Amount(amountCETH, vars.rateB);\\r\\n        _mintTransferCToken(token, ctoken, pair, amountToken);\\r\\n        // TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\r\\n        // _safeTransferCtoken(token, msg.sender, pair, amountToken);\\r\\n        // IWHT(WHT).deposit.value(amountETH)();\\r\\n        _mintTransferEth(pair, amountETH);\\r\\n        // cWHT.value(amountETH).mint();\\r\\n        // assert(IWHT(WHT).transfer(pair, amountETH));\\r\\n        liquidity = IDeBankPair(pair).mint(to);\\r\\n        // refund dust eth, if any\\r\\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\r\\n    }\\r\\n\\r\\n    // **** REMOVE LIQUIDITY ****\\r\\n    // tokenA tokenB \\u90fd\\u662f ctoken\\r\\n    function removeLiquidity(\\r\\n        address ctokenA,\\r\\n        address ctokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) public ensure(deadline) returns (uint amountA, uint amountB) {\\r\\n        address pair = pairFor(ctokenA, ctokenB);\\r\\n        IDeBankPair(pair).transferFrom(msg.sender, pair, liquidity);\\r\\n        // console.log(\\\"transfer Liquidity success\\\");\\r\\n        // send liquidity to pair\\r\\n        (uint amount0, uint amount1) = IDeBankPair(pair).burn(to);\\r\\n        address tokenA = _getTokenByCtoken(ctokenA);\\r\\n        address tokenB = _getTokenByCtoken(ctokenB);\\r\\n        (address token0,) = IDeBankFactory(factory).sortTokens(tokenA, tokenB);\\r\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\r\\n        require(amountA >= amountAMin, 'RemoveLiquidity: INSUFFICIENT_A_AMOUNT');\\r\\n        require(amountB >= amountBMin, 'RemoveLiquidity: INSUFFICIENT_B_AMOUNT');\\r\\n    }\\r\\n\\r\\n    // \\u8d4e\\u56de ctoken\\r\\n    function _redeemCToken(address ctoken, address token, uint camt) private returns (uint) {\\r\\n        uint b0 = IERC20(token).balanceOf(address(this));\\r\\n        uint err = ICToken(ctoken).redeem(camt);\\r\\n        require(err == 0, \\\"redeem failed\\\");\\r\\n        uint b1 = IERC20(token).balanceOf(address(this));\\r\\n        // console.log(b1, b0);\\r\\n        // require(b1 >= b0, \\\"redeem failed\\\");\\r\\n        return b1.sub(b0);\\r\\n    }\\r\\n\\r\\n    // \\u8d4e\\u56de ctoken\\r\\n    function _redeemCEth(uint camt) private returns (uint) {\\r\\n        uint b0 = IERC20(WHT).balanceOf(address(this));\\r\\n        uint err = ICToken(cWHT).redeem(camt);\\r\\n        require(err == 0, \\\"redeem failed\\\");\\r\\n        uint b1 = IERC20(WHT).balanceOf(address(this));\\r\\n        return b1.sub(b0);\\r\\n    }\\r\\n\\r\\n    function _redeemCTokenTransfer(address ctoken, address token, address to, uint camt) private returns (uint)  {\\r\\n        uint amt = _redeemCToken(ctoken, token, camt);\\r\\n        // console.log(\\\"redeem amt: %d\\\", camt, amt);\\r\\n        if (amt > 0) {\\r\\n            TransferHelper.safeTransfer(token, to, amt);\\r\\n        }\\r\\n        return amt;\\r\\n    }\\r\\n\\r\\n    function _redeemCETHTransfer(address to, uint camt) private returns (uint) {\\r\\n        uint amt = _redeemCEth(camt);\\r\\n        if (amt > 0) {\\r\\n            TransferHelper.safeTransferETH(to, amt);\\r\\n        }\\r\\n        return amt;\\r\\n    }\\r\\n\\r\\n    // tokenA tokenB \\u90fd\\u662f token amount\\u90fd\\u662f token \\u7684 amount\\r\\n    // \\u4ece ctoken redeem token \\u53ef\\u80fd\\u4f1a\\u5931\\u8d25(\\u989d\\u5ea6\\u4e0d\\u8db3), \\u56e0\\u6b64, \\r\\n    // \\u5728\\u8c03\\u7528\\u4e4b\\u524d, \\u524d\\u7aef\\u5fc5\\u987b\\u6821\\u9a8c\\u501f\\u8d37\\u6c60\\u4f59\\u989d\\u662f\\u5426\\u8db3\\u591f\\uff01\\uff01\\uff01\\r\\n    function removeLiquidityUnderlying(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) public ensure(deadline) returns (uint amountA, uint amountB) {\\r\\n        address pair = pairFor(tokenA, tokenB);\\r\\n        // \\u786e\\u4fdd\\u53ea\\u6709owner\\u53ef\\u4ee5\\u79fb\\u9664\\u6d41\\u52a8\\u6027\\r\\n        // require(IDeBankPair(pair).ownerAmountOf(to) >= liquidity, \\\"not owner or not enough\\\");\\r\\n\\r\\n        IDeBankPair(pair).transferFrom(msg.sender, pair, liquidity);\\r\\n        LiquidityLocalVars memory vars;\\r\\n        {\\r\\n            vars.tokenA = tokenA;\\r\\n            vars.tokenB = tokenB;\\r\\n            //  \\u5148\\u628a ctoken \\u53d1\\u9001\\u7ed9 router\\r\\n            (uint camount0, uint camount1) = IDeBankPair(pair).burn(address(this));\\r\\n            (address token0,) = IDeBankFactory(factory).sortTokens(vars.tokenA, vars.tokenB);\\r\\n            (vars.camountA, vars.camountB) = tokenA == token0 ? (camount0, camount1) : (camount1, camount0);\\r\\n        }\\r\\n        // console.log(\\\"camountA: %d camountB: %d\\\", vars.camountA, vars.camountB);\\r\\n        amountA = _redeemCTokenTransfer(_getCtoken(tokenA), tokenA, to, vars.camountA);\\r\\n        amountB = _redeemCTokenTransfer(_getCtoken(tokenB), tokenB, to, vars.camountB);\\r\\n\\r\\n        // console.log(\\\"amountA: %d amountB: %d\\\", amountA, amountB);\\r\\n        // TransferHelper.safeTransfer(tokenA, to, amountA);\\r\\n        // TransferHelper.safeTransfer(tokenB, to, amountB);\\r\\n        // address ctokenB = _getCtoken(tokenB);\\r\\n        // ICToken(ctokenA).redeem(camountA);\\r\\n        // ICToken(ctokenB).redeem(camountB);\\r\\n\\r\\n        require(amountA >= amountAMin, 'RemoveLiquidityUnderlying: INSUFFICIENT_A_AMOUNT');\\r\\n        require(amountB >= amountBMin, 'RemoveLiquidityUnderlying: INSUFFICIENT_B_AMOUNT');\\r\\n    }\\r\\n\\r\\n    // \\u5728\\u8c03\\u7528\\u4e4b\\u524d, \\u524d\\u7aef\\u5fc5\\u987b\\u6821\\u9a8c\\u501f\\u8d37\\u6c60\\u4f59\\u989d\\u662f\\u5426\\u8db3\\u591f\\uff01\\uff01\\uff01\\r\\n    function removeLiquidityETHUnderlying(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) public ensure(deadline) returns (uint amountToken, uint amountETH) {\\r\\n        LiquidityLocalVars memory vars;\\r\\n        vars.ctokenA = _getCtoken(token);\\r\\n        vars.rateA = _cTokenExchangeRate(vars.ctokenA);\\r\\n        vars.rateEth = _cTokenExchangeRate(cWHT);\\r\\n        uint camountTokenMin = _amount2CAmount(amountTokenMin, vars.rateA);\\r\\n        uint camountETHMin = _amount2CAmount(amountETHMin, vars.rateEth);\\r\\n        uint amountCToken;\\r\\n        uint amountCETH;\\r\\n        \\r\\n        (amountCToken, amountCETH) = removeLiquidity(\\r\\n            vars.ctokenA,\\r\\n            cWHT,\\r\\n            liquidity,\\r\\n            camountTokenMin,\\r\\n            camountETHMin,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n        \\r\\n        amountToken = _redeemCTokenTransfer(vars.ctokenA, token, to, amountCToken);\\r\\n        // TransferHelper.safeTransfer(token, to, amountToken);\\r\\n        // IWHT(WHT).withdraw(amountETH);\\r\\n        amountETH = _redeemCETHTransfer(to, amountCETH);\\r\\n        // to.transfer(amountETH);\\r\\n        // TransferHelper.safeTransferETH(to, amountETH);\\r\\n    }\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB) {\\r\\n        address pair = pairFor(tokenA, tokenB);\\r\\n        uint value = approveMax ? uint(- 1) : liquidity;\\r\\n        IDeBankPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\r\\n    }\\r\\n\\r\\n    function removeLiquidityETHUnderlyingWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH) {\\r\\n        address pair = pairFor(token, WHT);\\r\\n        uint value = approveMax ? uint(- 1) : liquidity;\\r\\n        IDeBankPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n        (amountToken, amountETH) = removeLiquidityETHUnderlying(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\r\\n    }\\r\\n\\r\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\r\\n    // function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    //     address token,\\r\\n    //     uint liquidity,\\r\\n    //     uint amountTokenMin,\\r\\n    //     uint amountETHMin,\\r\\n    //     address to,\\r\\n    //     uint deadline\\r\\n    // ) public ensure(deadline) returns (uint amountETH) {\\r\\n    //     (, amountETH) = removeLiquidity(\\r\\n    //         token,\\r\\n    //         WHT,\\r\\n    //         liquidity,\\r\\n    //         amountTokenMin,\\r\\n    //         amountETHMin,\\r\\n    //         address(this),\\r\\n    //         deadline\\r\\n    //     );\\r\\n    //     TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\\r\\n    //     IWHT(WHT).withdraw(amountETH);\\r\\n    //     TransferHelper.safeTransferETH(to, amountETH);\\r\\n    // }\\r\\n\\r\\n    // function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    //     address token,\\r\\n    //     uint liquidity,\\r\\n    //     uint amountTokenMin,\\r\\n    //     uint amountETHMin,\\r\\n    //     address to,\\r\\n    //     uint deadline,\\r\\n    //     bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    // ) external returns (uint amountETH) {\\r\\n    //     address pair = pairFor(token, WHT);\\r\\n    //     uint value = approveMax ? uint(- 1) : liquidity;\\r\\n    //     IDeBankPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n    //     amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    //         token, liquidity, amountTokenMin, amountETHMin, to, deadline\\r\\n    //     );\\r\\n    // }\\r\\n\\r\\n    // \\u5151\\u6362\\u624b\\u7eed\\u8d39, \\u4e0d\\u6536\\u624b\\u7eed\\u8d39\\r\\n    function _swapFee(address pair, uint feeIn, address feeTo) internal returns (uint feeOut) {\\r\\n        (uint reserve0, uint reserve1, ) = IDeBankPair(pair).getReserves();\\r\\n        feeOut = feeIn.mul(reserve1).div(reserve0.add(feeIn));\\r\\n        IDeBankPair(pair).swapNoFee(0, feeOut, feeTo, feeOut);\\r\\n    }\\r\\n\\r\\n    // \\u5c06\\u6536\\u5230\\u7684\\u624b\\u7eed\\u8d39 token \\u8f6c\\u6362\\u4e3a anchorToken\\r\\n    // input \\u4e3a token\\r\\n    // swap\\u540e\\u5f97\\u5230\\u7684\\u662f canchorToken, cUSDT\\r\\n    function _swapToCAnchorToken(address input, address pair, address anchorToken) internal returns (uint fee) {\\r\\n        address feeTo = IDeBankFactory(factory).feeTo();\\r\\n        require(feeTo != address(0), \\\"feeTo is zero\\\");\\r\\n\\r\\n        uint amountIn = IERC20(_getCtoken(input)).balanceOf(pair);    // \\u8f93\\u5165\\u8f6c\\u5165\\r\\n        uint feeIn = IDeBankPair(pair).getFee(amountIn);\\r\\n        // console.log(\\\"amountIn: %d  feeIn: %d\\\", amountIn, feeIn);\\r\\n\\r\\n        if (input == anchorToken) {\\r\\n            // \\u76f4\\u63a5\\u6536\\r\\n            fee = feeIn;\\r\\n            // feeTotal = feeTotal.add(feeIn);\\r\\n        } else {\\r\\n            // \\u5151\\u6362\\u6210 anchorToken\\r\\n            // uint fee = _swapToCAnchorToken(input, amountIn);\\r\\n            for (uint i; i < quoteTokens.length; i ++) {\\r\\n                address token = quoteTokens[i];\\r\\n                address tPair = IDeBankFactory(factory).getPair(input, token);\\r\\n\\r\\n                // console.log(\\\"_swapToCAnchorToken: input=%s token=%s pair=%s\\\", input, token, tPair);\\r\\n                if (tPair != address(0)) {\\r\\n                    if (token == anchorToken) {\\r\\n                        // \\u5151\\u6362\\u6210\\u529f\\r\\n                        IERC20(tPair).transfer(tPair, feeIn);\\r\\n                        fee = _swapFee(tPair, feeIn, feeTo);\\r\\n                    } else {\\r\\n                        // \\u9700\\u8981\\u4e24\\u6b65\\u5151\\u6362\\r\\n                        // \\u7b2c\\u4e00\\u6b65, \\u5151\\u6362\\u4e3a\\u4e2d\\u95f4\\u5e01\\u79cd \\u4f8b\\u5982ht husd btc\\r\\n                        address pair2 = IDeBankFactory(factory).getPair(token, anchorToken);\\r\\n                        require(pair2 != address(0), \\\"quote coin has no pair to anchorToken\\\");\\r\\n                        IERC20(tPair).transfer(tPair, feeIn);\\r\\n                        uint fee1 = _swapFee(tPair, feeIn, pair2);\\r\\n                        // \\u7b2c\\u4e8c\\u6b65\\r\\n                        fee = _swapFee(pair2, fee1, feeTo);\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // console.log(\\\"_swapToCAnchorToken: input: %s  fee: %d  \\\", input, fee);\\r\\n        // IERC20(anchorToken).transfer(feeTo, fee);\\r\\n        return fee;\\r\\n    }\\r\\n\\r\\n    function _updatePairFee(uint fee) private {\\r\\n        // \\u66f4\\u65b0\\u6240\\u6709\\u4ea4\\u6613\\u5bf9\\u7684\\u624b\\u7eed\\u8d39\\r\\n        if (currentBlock == block.number) {\\r\\n            allPairFee += fee;\\r\\n        } else {\\r\\n            //\\r\\n            allPairFeeLastBlock = allPairFee;\\r\\n            allPairFee = fee;\\r\\n            currentBlock = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // **** SWAP ****\\r\\n    // amounts \\u4e3a ctoken \\u7684 amount\\r\\n    // path \\u4e2d\\u7684 token \\u5747\\u4e3a token, \\u8c03\\u7528\\u524d\\u8bf7\\u8f6c\\u6362\\uff01\\uff01\\uff01\\r\\n    // requires the initial amount to have already been sent to the first pair\\r\\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal {\\r\\n        // uint feeTotal;  // by anchorToken\\r\\n        address anchorToken = IDeBankFactory(factory).anchorToken();\\r\\n        // address[] memory path = _cpath2path(cpath);\\r\\n\\r\\n        // console.log(\\\"_swap ....\\\");\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (address input, address output) = (path[i], path[i + 1]);\\r\\n            (address token0,) = IDeBankFactory(factory).sortTokens(input, output);\\r\\n            address pair = IDeBankFactory(factory).getPair(path[i], path[i + 1]);\\r\\n            // address feeTo = IDeBankFactory(factory).feeTo();\\r\\n            // uint feeRate = IDeBankPair(pair).feeRate();\\r\\n            uint amountOut = amounts[i + 1];\\r\\n            // uint amountIn = IERC20(pair).balanceOf(pair);    // \\u8f93\\u5165\\u8f6c\\u5165\\r\\n            // uint feeIn = IDeBankPair(pair).getFee(amountIn);\\r\\n\\r\\n            // feeTotal = feeTotal.add();\\r\\n            // if (feeTotal > 0) {\\r\\n            //     // \\u5206\\u914dLP\\u624b\\u7eed\\u8d39\\u5956\\u52b1\\r\\n            // }\\r\\n\\r\\n            if (swapMining != address(0)) {\\r\\n                // \\u4ea4\\u6613\\u6316\\u77ff\\r\\n                ISwapMining(swapMining).swap(msg.sender, input, output, amountOut);\\r\\n            }\\r\\n            \\r\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\r\\n            address to = i < path.length - 2 ? pairFor(output, path[i + 2]) : _to;\\r\\n            if (feeAlloc == 1) {\\r\\n                // \\u6536\\u624b\\u7eed\\u8d39, \\u5e76\\u5c06\\u624b\\u7eed\\u8d39\\u5151\\u6362\\u4e3a canchorToken(cUSDT)\\r\\n                uint fee = _swapToCAnchorToken(input, pair, anchorToken);\\r\\n                if (fee > 0) {\\r\\n                    _updatePairFee(fee);\\r\\n                }\\r\\n\\r\\n                IDeBankPair(pairFor(input, output)).swapNoFee(\\r\\n                    amount0Out, amount1Out, to, fee\\r\\n                );\\r\\n            } else {\\r\\n                IDeBankPair(pairFor(input, output)).swap(\\r\\n                    amount0Out, amount1Out, to, new bytes(0)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _path2cpath(address[] memory path) private view returns (address[] memory) {\\r\\n        address[] memory cpath = new address[](path.length);\\r\\n        for (uint i = 0; i < path.length; i ++) {\\r\\n            cpath[i] = _getCtoken(path[i]);\\r\\n        }\\r\\n        return cpath;\\r\\n    }\\r\\n\\r\\n    function _cpath2path(address[] memory cpath) private view returns (address[] memory) {\\r\\n        address[] memory path = new address[](cpath.length);\\r\\n        for (uint i = 0; i < cpath.length; i ++) {\\r\\n            path[i] = _getTokenByCtoken(cpath[i]);\\r\\n        }\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    // amount token \\u5747\\u4e3a ctoken\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata cpath,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\r\\n        // console.log('swapExactTokensForTokens ....');\\r\\n        address[] memory path = _cpath2path(cpath);\\r\\n        amounts = IDeBankFactory(factory).getAmountsOut(amountIn, path, to);\\r\\n        // console.log(amounts[0], amounts[1]);\\r\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        // _safeTransferCtoken(\\r\\n        //     path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]\\r\\n        // );\\r\\n        TransferHelper.safeTransferFrom(cpath[0], msg.sender, pairFor(path[0], path[1]), amounts[0]);\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n\\r\\n    // amount token \\u5747\\u4e3a ctoken\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata cpath,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\r\\n        // console.log('swapTokensForExactTokens ....');\\r\\n        address[] memory path = _cpath2path(cpath);\\r\\n        amounts = IDeBankFactory(factory).getAmountsIn(amountOut, path, to);\\r\\n        require(amounts[0] <= amountInMax, 'Router: EXCESSIVE_INPUT_AMOUNT');\\r\\n        // _safeTransferCtoken(\\r\\n        //     path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]\\r\\n        // );\\r\\n        TransferHelper.safeTransferFrom(cpath[0], msg.sender, pairFor(path[0], path[1]), amounts[0]);\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _swapExactTokensForTokensUnderlying(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] memory path,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool ethIn,\\r\\n        bool ethOut\\r\\n    ) private ensure(deadline) returns (uint[] memory amounts) {\\r\\n        // console.log('_swapExactTokensForTokensUnderlying ....');\\r\\n        address[] memory cpath = _path2cpath(path);\\r\\n        SwapLocalVars memory vars;\\r\\n        vars.amountIn = amountIn;\\r\\n        vars.rate0 = _cTokenExchangeRate(cpath[0]);\\r\\n        vars.rate1 = _cTokenExchangeRate(cpath[0]);\\r\\n        uint camtIn = _amount2CAmount(amountIn, vars.rate0);\\r\\n        uint[] memory camounts = IDeBankFactory(factory).getAmountsOut(camtIn, path, to);\\r\\n        // console.log(camounts[0], camounts[1]);\\r\\n        vars.amountOut = _camount2Amount(camounts[camounts.length - 1], vars.rate1);\\r\\n        require(vars.amountOut >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        // _safeTransferCtoken(\\r\\n        //     path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]\\r\\n        // );\\r\\n        if (ethIn) {\\r\\n            _mintTransferEth(pairFor(path[0], path[1]), amountIn);\\r\\n        } else {\\r\\n            _mintTransferCToken(path[0], cpath[0], pairFor(path[0], path[1]), vars.amountIn);\\r\\n        }\\r\\n\\r\\n        // TransferHelper.safeTransferFrom(path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]);\\r\\n        // \\u5148\\u5c06 ctoken \\u8f6c\\u7ed9 router\\r\\n        _swap(camounts, path, address(this));\\r\\n        uint idx = path.length - 1;\\r\\n        if (ethOut) {\\r\\n            _redeemCETHTransfer(to, camounts[idx]);\\r\\n        } else {\\r\\n            _redeemCTokenTransfer(cpath[idx], path[idx], to, camounts[idx]);\\r\\n        }\\r\\n\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        amounts[idx] = vars.amountOut;\\r\\n    }\\r\\n\\r\\n    // amount token \\u5747\\u4e3a token\\r\\n    // \\u8c03\\u7528\\u8005\\u9700\\u8981\\u9a8c\\u8bc1\\u501f\\u8d37\\u6c60\\u4e2d\\u7684 path[path.length-1] \\u7684\\u8d44\\u91d1\\u8db3\\u591f\\uff01\\uff01\\uff01\\r\\n    function swapExactTokensForTokensUnderlying(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\r\\n        // console.log('swapExactTokensForTokensUnderlying ....');\\r\\n        amounts = _swapExactTokensForTokensUnderlying(amountIn, amountOutMin, path, to, deadline, false, false);\\r\\n        // address[] memory cpath = _path2cpath(path);\\r\\n        // uint rate0 = _cTokenExchangeRate(cpath[0]);\\r\\n        // uint rate1 = _cTokenExchangeRate(cpath[0]);\\r\\n        // uint camtIn = _amount2CAmount(amountIn, rate0);\\r\\n        // uint[] memory camounts = IDeBankFactory(factory).getAmountsOut(camtIn, path);\\r\\n        // console.log(camounts[0], camounts[1]);\\r\\n        // uint amountOut = _camount2Amount(camounts[camounts.length - 1], rate1);\\r\\n        // require(amountOut >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        // // _safeTransferCtoken(\\r\\n        // //     path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]\\r\\n        // // );\\r\\n        // _mintTransferCToken(path[0], cpath[0], pairFor(path[0], path[1]), amountIn);\\r\\n        // // TransferHelper.safeTransferFrom(path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]);\\r\\n        // _swap(camounts, path, to);\\r\\n        // uint idx = path.length - 1;\\r\\n        // _redeemCTokenTransfer(cpath[idx], path[idx], to, camounts[idx]);\\r\\n\\r\\n        // amounts = new uint[](path.length);\\r\\n        // amounts[0] = amountIn;\\r\\n        // amounts[idx] = amountOut;\\r\\n    }\\r\\n\\r\\n    struct SwapLocalVars {\\r\\n        uint rate0;\\r\\n        uint rate1;\\r\\n        uint amountIn;\\r\\n        uint amountOut;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForExactTokensUnderlying(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] memory path,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool ethIn,\\r\\n        bool ethOut\\r\\n    ) private ensure(deadline) returns (uint[] memory amounts) {\\r\\n        // console.log('_swapTokensForExactTokensUnderlying ....');\\r\\n        address[] memory cpath = _path2cpath(path);\\r\\n        SwapLocalVars memory vars;\\r\\n\\r\\n        vars.rate0 = _cTokenExchangeRate(cpath[0]);\\r\\n        vars.rate1 = _cTokenExchangeRate(cpath[path.length-1]);\\r\\n        uint camtOut = _amount2CAmount(amountOut, vars.rate1);\\r\\n        uint[] memory camounts = IDeBankFactory(factory).getAmountsIn(camtOut, path, to);\\r\\n        // console.log(\\\"camounts:\\\", camounts[0], camounts[1], camtOut);\\r\\n        \\r\\n        vars.amountIn = _camount2Amount(camounts[0], vars.rate0);\\r\\n        // \\u4e0a\\u4e00\\u6b65\\u4e2d\\u820d\\u53bb\\u7684 1\\r\\n        vars.amountIn = vars.amountIn.add(1);\\r\\n        // console.log(\\\"amountIn:\\\", vars.amountIn);\\r\\n        require(vars.amountIn <= amountInMax, 'Router: EXCESSIVE_INPUT_AMOUNT');\\r\\n        // _safeTransferCtoken(\\r\\n        //     path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]\\r\\n        // );\\r\\n        if (ethIn) {\\r\\n            _mintTransferEth(pairFor(path[0], path[1]), vars.amountIn);\\r\\n        } else {\\r\\n            _mintTransferCToken(path[0], cpath[0], pairFor(path[0], path[1]), vars.amountIn);\\r\\n        }\\r\\n        // TransferHelper.safeTransferFrom(path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]);\\r\\n        // \\u5148\\u8f6c\\u7ed9 router, \\u518d\\u7531 router redeem \\u540e, \\u8f6c\\u7ed9 to\\r\\n        _swap(camounts, path, address(this));\\r\\n        uint idx = path.length - 1;\\r\\n        if (ethOut) {\\r\\n            _redeemCETHTransfer(to, camounts[idx]);\\r\\n        } else {\\r\\n            _redeemCTokenTransfer(cpath[idx], path[idx], to, camounts[idx]);\\r\\n        }\\r\\n\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = vars.amountIn;\\r\\n        amounts[idx] = amountOut;\\r\\n    }\\r\\n\\r\\n    // amount token \\u5747\\u4e3a ctoken\\r\\n    function swapTokensForExactTokensUnderlying(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\r\\n        // console.log('swapTokensForExactTokensUnderlying ....');\\r\\n        amounts = _swapTokensForExactTokensUnderlying(amountOut, amountInMax, path, to, deadline, false, false);\\r\\n        // address[] memory cpath = _path2cpath(path);\\r\\n        // uint rate0 = _cTokenExchangeRate(cpath[0]);\\r\\n        // uint rate1 = _cTokenExchangeRate(cpath[0]);\\r\\n        // uint camtOut = _amount2CAmount(amountOut, rate1);\\r\\n        // uint[] memory camounts = IDeBankFactory(factory).getAmountsIn(camtOut, path);\\r\\n        \\r\\n        // uint amountIn = _camount2Amount(camounts[0], rate0);\\r\\n        // require(amountIn <= amountInMax, 'Router: EXCESSIVE_INPUT_AMOUNT');\\r\\n        // // _safeTransferCtoken(\\r\\n        // //     path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]\\r\\n        // // );\\r\\n        // _mintTransferCToken(path[0], cpath[0], pairFor(path[0], path[1]), amountIn);\\r\\n        // // TransferHelper.safeTransferFrom(path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]);\\r\\n        // _swap(camounts, path, to);\\r\\n        // uint idx = path.length - 1;\\r\\n        // _redeemCTokenTransfer(cpath[idx], path[idx], to, camounts[idx]);\\r\\n\\r\\n        // amounts = new uint[](path.length);\\r\\n        // amounts[0] = amountIn;\\r\\n        // amounts[idx] = amountOut;\\r\\n    }\\r\\n\\r\\n    function swapExactETHForTokensUnderlying(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        // console.log('swapExactETHForTokensUnderlying ....');\\r\\n        require(path[0] == WHT, 'Router: INVALID_PATH');\\r\\n        amounts = _swapExactTokensForTokensUnderlying(msg.value, amountOutMin, path, to, deadline, true, false);\\r\\n        // amounts = IDeBankFactory(factory).getAmountsOut(msg.value, path);\\r\\n        // require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        // IWHT(WHT).deposit.value(amounts[0])();\\r\\n        // assert(IWHT(WHT).transfer(pairFor(path[0], path[1]), amounts[0]));\\r\\n        // _swap(amounts, path, to);\\r\\n    }\\r\\n\\r\\n    function swapTokensForExactETHUnderlying(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        // console.log('swapTokensForExactETH ....');\\r\\n        require(path[path.length - 1] == WHT, 'Router: INVALID_PATH');\\r\\n        amounts = _swapTokensForExactTokensUnderlying(amountOut, amountInMax, path, to, deadline, false, true);\\r\\n        // amounts = IDeBankFactory(factory).getAmountsIn(amountOut, path);\\r\\n        // require(amounts[0] <= amountInMax, 'Router: EXCESSIVE_INPUT_AMOUNT');\\r\\n        // _safeTransferCtoken(\\r\\n        //     path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]\\r\\n        // );\\r\\n        // _swap(amounts, path, address(this));\\r\\n        // IWHT(WHT).withdraw(amounts[amounts.length - 1]);\\r\\n        // TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForETHUnderlying(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        // console.log('swapExactTokensForETHUnderlying ....');\\r\\n        require(path[path.length - 1] == WHT, 'Router: INVALID_PATH');\\r\\n        amounts = _swapExactTokensForTokensUnderlying(amountIn, amountOutMin, path, to, deadline, false, true);\\r\\n        // amounts = IDeBankFactory(factory).getAmountsOut(amountIn, path);\\r\\n        // require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        // _safeTransferCtoken(\\r\\n        //     path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]\\r\\n        // );\\r\\n        // _swap(amounts, path, address(this));\\r\\n        // IWHT(WHT).withdraw(amounts[amounts.length - 1]);\\r\\n        // TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\r\\n    }\\r\\n\\r\\n    function swapETHForExactTokensUnderlying(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        // console.log('swapETHForExactTokensUnderlying ....');\\r\\n        require(path[0] == WHT, 'Router: INVALID_PATH');\\r\\n        amounts = _swapTokensForExactTokensUnderlying(amountOut, msg.value, path, to, deadline, true, false);\\r\\n        // amounts = IDeBankFactory(factory).getAmountsIn(amountOut, path);\\r\\n        // require(amounts[0] <= msg.value, 'Router: EXCESSIVE_INPUT_AMOUNT');\\r\\n        // IWHT(WHT).deposit{value : amounts[0]}();\\r\\n        // assert(IWHT(WHT).transfer(pairFor(path[0], path[1]), amounts[0]));\\r\\n        // _swap(amounts, path, to);\\r\\n        // // refund dust eth, if any\\r\\n        // if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\r\\n    }\\r\\n\\r\\n    function adminTransfer(address token, address to, uint amt) external onlyOwner {\\r\\n        if (token == address(0)) {\\r\\n          TransferHelper.safeTransferETH(to, amt);\\r\\n        } else {\\r\\n          TransferHelper.safeTransferFrom(token, address(this), to, amt);\\r\\n        }\\r\\n    }\\r\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\r\\n    // requires the initial amount to have already been sent to the first pair\\r\\n    // function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal {\\r\\n    //     for (uint i; i < path.length - 1; i++) {\\r\\n    //         (address input, address output) = (path[i], path[i + 1]);\\r\\n    //         (address token0,) = IDeBankFactory(factory).sortTokens(input, output);\\r\\n    //         IDeBankPair pair = IDeBankPair(pairFor(input, output));\\r\\n    //         uint amountInput;\\r\\n    //         uint amountOutput;\\r\\n    //         {// scope to avoid stack too deep errors\\r\\n    //             (uint reserve0, uint reserve1,) = pair.getReserves();\\r\\n    //             (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    //             amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\r\\n    //             amountOutput = IDeBankFactory(factory).getAmountOut(amountInput, reserveInput, reserveOutput);\\r\\n    //         }\\r\\n    //         if (swapMining != address(0)) {\\r\\n    //             ISwapMining(swapMining).swap(msg.sender, input, output, amountOutput);\\r\\n    //         }\\r\\n    //         (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\r\\n    //         address to = i < path.length - 2 ? pairFor(output, path[i + 2]) : _to;\\r\\n    //         pair.swap(amount0Out, amount1Out, to, new bytes(0));\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    // function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    //     uint amountIn,\\r\\n    //     uint amountOutMin,\\r\\n    //     address[] calldata path,\\r\\n    //     address to,\\r\\n    //     uint deadline\\r\\n    // ) external ensure(deadline) {\\r\\n    //     TransferHelper.safeTransferFrom(\\r\\n    //         path[0], msg.sender, pairFor(path[0], path[1]), amountIn\\r\\n    //     );\\r\\n    //     uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\r\\n    //     _swapSupportingFeeOnTransferTokens(path, to);\\r\\n    //     require(\\r\\n    //         IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\r\\n    //         'Router: INSUFFICIENT_OUTPUT_AMOUNT'\\r\\n    //     );\\r\\n    // }\\r\\n\\r\\n    // function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    //     uint amountOutMin,\\r\\n    //     address[] calldata path,\\r\\n    //     address to,\\r\\n    //     uint deadline\\r\\n    // )\\r\\n    // external\\r\\n    // payable\\r\\n    // ensure(deadline)\\r\\n    // {\\r\\n    //     require(path[0] == WHT, 'Router: INVALID_PATH');\\r\\n    //     uint amountIn = msg.value;\\r\\n    //     IWHT(WHT).deposit.value(amountIn)();\\r\\n    //     assert(IWHT(WHT).transfer(pairFor(path[0], path[1]), amountIn));\\r\\n    //     uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\r\\n    //     _swapSupportingFeeOnTransferTokens(path, to);\\r\\n    //     require(\\r\\n    //         IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\r\\n    //         'Router: INSUFFICIENT_OUTPUT_AMOUNT'\\r\\n    //     );\\r\\n    // }\\r\\n\\r\\n    // function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    //     uint amountIn,\\r\\n    //     uint amountOutMin,\\r\\n    //     address[] calldata path,\\r\\n    //     address to,\\r\\n    //     uint deadline\\r\\n    // )\\r\\n    // external\\r\\n    // ensure(deadline)\\r\\n    // {\\r\\n    //     require(path[path.length - 1] == WHT, 'Router: INVALID_PATH');\\r\\n    //     TransferHelper.safeTransferFrom(\\r\\n    //         path[0], msg.sender, pairFor(path[0], path[1]), amountIn\\r\\n    //     );\\r\\n    //     _swapSupportingFeeOnTransferTokens(path, address(this));\\r\\n    //     uint amountOut = IERC20(WHT).balanceOf(address(this));\\r\\n    //     require(amountOut >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n    //     IWHT(WHT).withdraw(amountOut);\\r\\n    //     TransferHelper.safeTransferETH(to, amountOut);\\r\\n    // }\\r\\n\\r\\n    // **** LIBRARY FUNCTIONS ****\\r\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) public view returns (uint256 amountB) {\\r\\n        return IDeBankFactory(factory).quote(amountA, reserveA, reserveB);\\r\\n    }\\r\\n\\r\\n    // function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) public view returns (uint256 amountOut){\\r\\n    //     return IDeBankFactory(factory).getAmountOut(amountIn, reserveIn, reserveOut);\\r\\n    // }\\r\\n\\r\\n    // function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) public view returns (uint256 amountIn){\\r\\n    //     return IDeBankFactory(factory).getAmountIn(amountOut, reserveIn, reserveOut);\\r\\n    // }\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] memory path, address to) public view returns (uint256[] memory amounts) {\\r\\n        return IDeBankFactory(factory).getAmountsOut(amountIn, path, to);\\r\\n    }\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] memory path, address to) public view returns (uint256[] memory amounts) {\\r\\n        return IDeBankFactory(factory).getAmountsIn(amountOut, path, to);\\r\\n    }\\r\\n\\r\\n    /// @dev \\u7ed9\\u5b9a amountIn, \\u8ba1\\u7b97\\u80fd\\u591f\\u5151\\u6362\\u5f97\\u5230\\u7684amountOut\\r\\n    /// @param path token \\u6570\\u7ec4, \\u6ce8\\u610f: \\u5fc5\\u987b\\u662ftoken\\u7684\\u5730\\u5740!!!\\r\\n    function getAmountsOutUnderlying(uint256 amountIn, address[] memory path, address to)\\r\\n                public view returns (uint256[] memory amounts, uint256 amountOut) {\\r\\n        //\\r\\n        address[] memory cpath = _path2cpath(path);\\r\\n        uint256 rateIn = ExchangeRate.getCurrentExchangeRate(ICToken(cpath[0]));\\r\\n        uint256 cAmtIn = amountIn.mul(1e18).div(rateIn);\\r\\n        amounts = IDeBankFactory(factory).getAmountsOut(cAmtIn, cpath, to);\\r\\n        uint256 rateOut = ExchangeRate.getCurrentExchangeRate(ICToken(cpath[cpath.length-1]));\\r\\n        amountOut = amounts[amounts.length-1].mul(rateOut).div(1e18);\\r\\n    }\\r\\n\\r\\n    /// @dev \\u7ed9\\u5b9a amountOut, \\u8ba1\\u7b97\\u8f93\\u5165\\u7684amountIn\\r\\n    /// @param path token \\u6570\\u7ec4, \\u6ce8\\u610f: \\u5fc5\\u987b\\u662ftoken\\u7684\\u5730\\u5740!!!\\r\\n    function getAmountsInUnderlying(uint256 amountOut, address[] memory path, address to)\\r\\n                public view returns (uint256[] memory amounts, uint256 amountIn) {\\r\\n        //\\r\\n        address[] memory cpath = _path2cpath(path);\\r\\n        uint256 rateOut = ExchangeRate.getCurrentExchangeRate(ICToken(cpath[cpath.length-1]));\\r\\n        uint256 cAmtOut = amountOut.mul(1e18).div(rateOut);\\r\\n        amounts = IDeBankFactory(factory).getAmountsIn(cAmtOut, cpath, to);\\r\\n        uint256 rateIn = ExchangeRate.getCurrentExchangeRate(ICToken(cpath[0]));\\r\\n        amountIn = amounts[0].mul(rateIn).div(1e18);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary ExchangeRate {\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function getCurrentExchangeRate(ICToken ctoken) public view returns (uint256) {\\r\\n        uint rate = ctoken.exchangeRateStored();\\r\\n        uint supplyRate = ctoken.supplyRatePerBlock();\\r\\n        uint lastBlock = ctoken.accrualBlockNumber();\\r\\n        uint blocks = block.number.sub(lastBlock);\\r\\n        uint inc = rate.mul(supplyRate).mul(blocks);\\r\\n        return rate.add(inc);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success,) = to.call.value(value)(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x509a311f2768ff755299347f2c2fd9521a8c3922a2d6071e8f9f9b722fc43e31\"},\"contracts/swap/interface/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\ninterface ICToken {\\r\\n\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function exchangeRateCurrent() external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n    function accrualBlockNumber() external view returns (uint);\\r\\n    // function getCash() virtual external view returns (uint);\\r\\n    // function accrueInterest() virtual public returns (uint);\\r\\n    // function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe8071eaa89b437a6cfdd38d66b0d5efe7bda3ea6648345fe8ad2b0d983d95598\"},\"contracts/swap/interface/IDeBankFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./LErc20DelegatorInterface.sol\\\";\\r\\n\\r\\ninterface IDeBankFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    // function feeToSetter() external view returns (address);\\r\\n\\r\\n    function lpFeeRate() external view returns (uint256);\\r\\n\\r\\n    // function lErc20DelegatorFactory() external view returns (LErc20DelegatorInterface);\\r\\n\\r\\n    function anchorToken() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB, address ctoken0, address ctoken1) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    // function setFeeToSetter(address) external;\\r\\n\\r\\n    function setFeeToRate(uint256) external;\\r\\n\\r\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\r\\n\\r\\n    function pairFor(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\\r\\n\\r\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\r\\n\\r\\n    // function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\\r\\n\\r\\n    // function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path, address to) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path, address to) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    // function amountToCTokenAmt(address ctoken, uint amountIn) external view returns (uint cAmountIn);\\r\\n    // function ctokenAmtToAmount(address ctoken, uint cAmountOut) external view returns (uint amountOut);\\r\\n\\r\\n    function setPairFeeRate(address pair, uint feeRate) external;\\r\\n\\r\\n    function getReservesFeeRate(address tokenA, address tokenB, address to) external view returns (uint reserveA, uint reserveB, uint feeRate, bool outAnchorToken);\\r\\n\\r\\n    function getAmountOutFeeRate(uint amountIn, uint reserveIn, uint reserveOut, uint feeRate) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountInFeeRate(uint amountOut, uint reserveIn, uint reserveOut, uint feeRate) external pure returns (uint amountIn);\\r\\n\\r\\n    function getAmountOutFeeRateAnchorToken(uint amountIn, uint reserveIn, uint reserveOut, uint feeRate) external pure returns (uint amountOut);\\r\\n\\r\\n    function setAnchorToken(address _token) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbc8c81af733350e99f77bb74df07c5fcb0ae67585488695ebbc1ee31576a15c8\"},\"contracts/swap/interface/IDeBankPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\ninterface IDeBankPair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    // function ownerAmountOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function feeRate() external view returns (uint);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    // function mintCToken(address to) external returns (uint liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n    function swapNoFee(uint amount0Out, uint amount1Out, address to, uint fee) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function price(address token, uint256 baseDecimal) external view returns (uint256);\\r\\n\\r\\n    function initialize(address, address, address, address) external;\\r\\n    function updateFeeRate(uint256 _feeRate) external;\\r\\n    // initialize ctoken address\\r\\n    // function initializeCTokenAddress(address, address) external;\\r\\n\\r\\n    function getFee(uint256 amt) external view returns (uint256);\\r\\n\\r\\n    // function updateFeeRate(_feeRate) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ac0d68a256380ceecbae0892e129fd6cc80a203b9873b039bbf24d21a47d697\"},\"contracts/swap/interface/IDeBankRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\ninterface IDeBankRouter {\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function WHT() external view returns (address);\\r\\n\\r\\n    function allPairFee() external view returns (uint);\\r\\n\\r\\n    function allPairFeeLastBlock() external view returns (uint);\\r\\n\\r\\n    function reward(uint256 blockNumber) external view returns (uint256);\\r\\n\\r\\n    function rewardToken() external view returns (address);\\r\\n\\r\\n    function lpDepositAddr() external view returns (address);\\r\\n    \\r\\n    function compAddr() external view returns (address);\\r\\n\\r\\n    // function startBlock() external view returns (uint);\\r\\n\\r\\n    function swapMining() external view returns (address);\\r\\n\\r\\n    function getBlockRewards(uint256 _lastRewardBlock) external view returns (uint256);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityUnderlying(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETHUnderlying(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityUnderlying(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHUnderlying(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHUnderlyingWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokensUnderlying(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokensUnderlying(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokensUnderlying(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETHUnderlying(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETHUnderlying(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokensUnderlying(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    // function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    // external\\r\\n    // payable\\r\\n    // returns (uint[] memory amounts);\\r\\n\\r\\n    // function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    // external\\r\\n    // returns (uint[] memory amounts);\\r\\n\\r\\n    // function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    // external\\r\\n    // returns (uint[] memory amounts);\\r\\n\\r\\n    // function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    // external\\r\\n    // payable\\r\\n    // returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external view returns (uint256 amountB);\\r\\n\\r\\n    // function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\\r\\n\\r\\n    // function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path, address to) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path, address to) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    // function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    //     address token,\\r\\n    //     uint liquidity,\\r\\n    //     uint amountTokenMin,\\r\\n    //     uint amountETHMin,\\r\\n    //     address to,\\r\\n    //     uint deadline\\r\\n    // ) external returns (uint amountETH);\\r\\n\\r\\n    // function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    //     address token,\\r\\n    //     uint liquidity,\\r\\n    //     uint amountTokenMin,\\r\\n    //     uint amountETHMin,\\r\\n    //     address to,\\r\\n    //     uint deadline,\\r\\n    //     bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    // ) external returns (uint amountETH);\\r\\n\\r\\n    // function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    //     uint amountIn,\\r\\n    //     uint amountOutMin,\\r\\n    //     address[] calldata path,\\r\\n    //     address to,\\r\\n    //     uint deadline\\r\\n    // ) external;\\r\\n\\r\\n    // function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    //     uint amountOutMin,\\r\\n    //     address[] calldata path,\\r\\n    //     address to,\\r\\n    //     uint deadline\\r\\n    // ) external payable;\\r\\n\\r\\n    // function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    //     uint amountIn,\\r\\n    //     uint amountOutMin,\\r\\n    //     address[] calldata path,\\r\\n    //     address to,\\r\\n    //     uint deadline\\r\\n    // ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa7f8819236107494d297d1f28aeeb83bb8a31be12c364f89d6dc5de517891c36\"},\"contracts/swap/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x6af6c0ec0fad3bcd6dec9d55b9449d41f167a76dcffd2d031d95b8584234a96f\"},\"contracts/swap/interface/IWHT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\ninterface IWHT {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint) external;\\r\\n}\",\"keccak256\":\"0x6705de506bd6793b02ea1232da806105dd8848fb109f8438752f5f0ad50937f4\"},\"contracts/swap/interface/LErc20DelegatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.5.16;\\r\\n// import \\\"./CTokenInterfaces.sol\\\";\\r\\n\\r\\ncontract LErc20DelegatorInterface {\\r\\n      function delegateToInitialize(address underlying_,\\r\\n                address comptroller_,\\r\\n                address interestRateModel_,\\r\\n                uint initialExchangeRateMantissa_,\\r\\n                string memory name_,\\r\\n                string memory symbol_,\\r\\n                uint8 decimals_,\\r\\n                address payable admin_,\\r\\n                address implementation_,\\r\\n                bytes memory becomeImplementationData) public {}\\r\\n\\r\\n      // get or create ctoken\\r\\n      function getCTokenAddress(address token) external returns (address cToken);\\r\\n      function getCTokenAddressPure(address cToken) external view returns (address);\\r\\n      function getTokenAddress(address cToken) external view returns (address);\\r\\n}\",\"keccak256\":\"0x0ec2ea88c8e362374d0bf6560f1a2fbf077418bf244d67601714c5bd0bef738c\"},\"contracts/swap/library/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant WAD = 10 ** 18;\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0c7e1a7a5da3ee30685e48bab7278850c145f9e4dd607ab4852e14c3c4de6477\"}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "libraries": {
    "ExchangeRate": "0x19D6d061080D7C7c7526DD56b27c2f07EFfaFC18"
  },
  "devdoc": {
    "methods": {
      "getAmountsInUnderlying(uint256,address[],address)": {
        "details": "给定 amountOut, 计算输入的amountIn",
        "params": {
          "path": "token 数组, 注意: 必须是token的地址!!!"
        }
      },
      "getAmountsOutUnderlying(uint256,address[],address)": {
        "details": "给定 amountIn, 计算能够兑换得到的amountOut",
        "params": {
          "path": "token 数组, 注意: 必须是token的地址!!!"
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 220,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29960,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "factory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 29962,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "WHT",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 29964,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "swapMining",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 29966,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "cWHT",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 29969,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "quoteTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 29971,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "ctokenFactory",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(LErc20DelegatorInterface)36054"
      },
      {
        "astId": 29973,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "allPairFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 29975,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "allPairFeeLastBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 29977,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "currentBlock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 29979,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "lpPerBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 29981,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "rewardToken",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 29983,
        "contract": "contracts/swap/heco/Router.sol:DeBankRouter",
        "label": "feeAlloc",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(LErc20DelegatorInterface)36054": {
        "encoding": "inplace",
        "label": "contract LErc20DelegatorInterface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}