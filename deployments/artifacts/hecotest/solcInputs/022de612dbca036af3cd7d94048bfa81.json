{
  "language": "Solidity",
  "sources": {
    "contracts/swap/orderbook/Orderbook.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"../aggressive/Ownable.sol\";\r\n// import \"../aggressive/SafeMath.sol\";\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\ninterface ISwapMining {\r\n    function swap(address account, address input, address output, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// 存储\r\ncontract OBStorage is Ownable {\r\n    uint private constant _PAIR_INDEX_MASK = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;   // 128 bit\r\n    uint private constant _ADDR_INDEX_MASK = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;   // 128 bit\r\n    uint private constant _MARGIN_MASK     = 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n    uint private constant _EXPIRED_AT_MASK = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;   // 128 bit\r\n    uint private constant _ADDR_INDEX_OFFSET = 128;\r\n    uint private constant _EXPIRED_AT_OFFSET = 128;\r\n\r\n    struct TokenAmount {\r\n        address srcToken;\r\n        address destToken;\r\n        uint amountIn;           // 初始挂单数量\r\n        uint fulfiled;         // 部分成交时 剩余待成交金额\r\n        uint guaranteeAmountOut;       // 最低兑换后要求得到的数量\r\n        // uint guaranteeAmountOutLeft;   // 兑换一部分后, 剩下的需要兑换得到的数量\r\n    }\r\n\r\n    struct OrderItem {\r\n      uint orderId;\r\n      uint pairAddrIdx;        // pairIdx | addrIdx\r\n      address owner;\r\n      address to;              // 兑换得到的token发送地址 未使用\r\n      uint pair;               // hash(srcToken, destToken)\r\n      uint timestamp;          // 过期时间 | 挂单时间 \r\n      uint flag;\r\n      TokenAmount tokenAmt;\r\n      // bool margin;             // 是否是杠杆合约的挂单\r\n    }\r\n\r\n    // 计算价格的乘数 price = token0 * priceRatio / token1, such as 1e30\r\n    uint public priceRatio = 1e30; \r\n\r\n    uint public orderId;   // order Id 自增\r\n\r\n    // 关闭订单薄功能\r\n    bool public closed;\r\n    address public router;\r\n    address public wETH;\r\n    address public ctokenFactory;\r\n    address public marginAddr;  // 代持合约\r\n    address public swapMining;  // 交易挖矿\r\n\r\n    uint public minBuyAmt;\r\n    uint public minSellAmt;\r\n    uint public feeRate = 30; // 千分之三\r\n\r\n    // token 最低挂单量\r\n    mapping(address => uint) public minAmounts;\r\n    mapping(address => mapping(address => uint)) public balanceOf;   // 代持用户的币\r\n\r\n    // orders\r\n    mapping (uint => OrderItem) public orders;\r\n    mapping (address => uint[]) public marginOrders;   // 杠杆合约代持的挂单\r\n    mapping (address => uint[]) public addressOrders;\r\n    mapping (uint => uint[]) public pairOrders;\r\n\r\n    function pairIndex(uint id) public pure returns(uint) {\r\n        return (id & _PAIR_INDEX_MASK);\r\n    }\r\n\r\n    function addrIndex(uint id) public pure returns(uint) {\r\n        return (id & _ADDR_INDEX_MASK) >> _ADDR_INDEX_OFFSET;\r\n    }\r\n\r\n    // pairIdx 不变, addrIdx 更新\r\n    function updateAddrIdx(uint idx, uint addrIdx) public pure returns(uint) {\r\n      return pairIndex(idx) | addrIndex(addrIdx);\r\n    }\r\n\r\n    // pairIdx 不变, addrIdx 更新\r\n    function updatePairIdx(uint idx, uint pairIdx) public pure returns(uint) {\r\n      return (idx & _ADDR_INDEX_MASK) | pairIdx;\r\n    }\r\n\r\n    function maskAddrPairIndex(uint pairIdx, uint addrIdx) public pure returns (uint) {\r\n        return (pairIdx) | (addrIdx << _ADDR_INDEX_OFFSET);\r\n    }\r\n\r\n    function isMargin(uint flag) public pure returns (bool) {\r\n      return (flag & _MARGIN_MASK) != 0;\r\n    }\r\n\r\n    function getExpiredAt(uint ts) public pure returns (uint) {\r\n      return (ts & _EXPIRED_AT_MASK) >> _EXPIRED_AT_OFFSET;\r\n    }\r\n\r\n    function maskTimestamp(uint ts, uint expired) public pure returns (uint) {\r\n      return (ts) | (expired << _EXPIRED_AT_OFFSET);\r\n    }\r\n    \r\n    function setSwapMining(address _swapMininng) public onlyOwner {\r\n        swapMining = _swapMininng;\r\n    }\r\n}\r\n\r\ninterface IWHT {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IMarginHolding {\r\n  // owner: 杠杆用户\r\n  // fulfiled: 买到的token数量\r\n  // amt: 卖出的token数量\r\n  function onFulfiled(address owner, uint fulfiled, uint amt) external;\r\n}\r\n\r\ninterface IOrderBook {\r\n    event CreateOrder(address indexed owner,\r\n          address indexed srcToken,\r\n          address indexed destToken,\r\n          uint orderId,\r\n          uint amountIn,\r\n          uint minAmountOut,\r\n          uint flag);\r\n\r\n    event FulFilOrder(address indexed maker,\r\n          address indexed taker,\r\n          uint orderId,\r\n          uint amt,\r\n          uint amtOut,\r\n          uint remaining);\r\n\r\n    event CancelOrder(address indexed owner, uint orderId);\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ncontract OrderBook is OBStorage, IOrderBook, ReentrancyGuard {\r\n    using SafeMath for uint;\r\n    using SafeMath for uint256;\r\n    uint private constant _ORDER_CLOSED = 0x00000000000000000000000000000001;   // 128 bit\r\n\r\n    // _router: swap 路由\r\n    // _ctokenFactory: ctoken 工厂\r\n    // _wETH: eth/bnb/ht 白手套\r\n    // _margin: 代持合约地址\r\n    constructor(address _router, address _ctokenFactory, address _wETH, address _margin) public {\r\n      router = _router;\r\n      ctokenFactory = _ctokenFactory;\r\n      wETH = _wETH;\r\n      marginAddr = _margin;\r\n    }\r\n\r\n    modifier whenOpen() {\r\n        require(closed == false, \"order book closed\");\r\n        _;\r\n    }\r\n\r\n    function closeOrderBook() external onlyOwner {\r\n      closed = true;\r\n    }\r\n\r\n    function openOrderBook() external onlyOwner {\r\n      closed = false;\r\n    }\r\n\r\n    function setMinOrderAmount(address token, uint amt) external onlyOwner {\r\n      minAmounts[token] = amt;\r\n    }\r\n\r\n    function _putOrder(OrderItem storage order) internal {\r\n      uint orderId = order.orderId;\r\n      bool margin = isMargin(order.flag);\r\n      uint addrIdx;\r\n      uint pairIdx;\r\n\r\n      if (margin) {\r\n          addrIdx = marginOrders[order.owner].length;\r\n          marginOrders[order.owner].push(orderId);\r\n      } else {\r\n          addrIdx = addressOrders[order.owner].length;\r\n          addressOrders[order.owner].push(orderId);\r\n      }\r\n\r\n      pairIdx = pairOrders[order.pair].length;\r\n      pairOrders[order.pair].push(orderId);\r\n\r\n      order.pairAddrIdx = maskAddrPairIndex(pairIdx, addrIdx);\r\n\r\n      emit CreateOrder(order.owner,\r\n          order.tokenAmt.srcToken,\r\n          order.tokenAmt.destToken,\r\n          orderId,\r\n          order.tokenAmt.amountIn,\r\n          order.tokenAmt.guaranteeAmountOut,\r\n          order.flag);\r\n    }\r\n\r\n    function _removeOrder(OrderItem memory order) private {\r\n        // uint orderId = order.orderId;\r\n        uint pairIdx = pairIndex(order.pairAddrIdx);\r\n        uint addrIdx = addrIndex(order.pairAddrIdx);\r\n        address owner = order.owner;\r\n        uint rIdx;\r\n        bool margin = isMargin(order.flag);\r\n        \r\n        if (margin) {\r\n            if ((marginOrders[owner].length > 1) && (addrIdx != marginOrders[owner].length-1)) {\r\n              rIdx = marginOrders[owner][marginOrders[owner].length - 1];\r\n              marginOrders[owner][addrIdx] = rIdx;\r\n              orders[rIdx].pairAddrIdx = updateAddrIdx(orders[rIdx].pairAddrIdx, addrIdx);\r\n            }\r\n            marginOrders[owner].pop();\r\n        } else {\r\n            if ((addressOrders[owner].length > 1) && (addrIdx != addressOrders[owner].length-1)) {\r\n              rIdx = addressOrders[owner][addressOrders[owner].length - 1];\r\n              addressOrders[owner][addrIdx] = rIdx;\r\n              orders[rIdx].pairAddrIdx = updateAddrIdx(orders[rIdx].pairAddrIdx, addrIdx);\r\n            }\r\n            addressOrders[owner].pop();\r\n        }\r\n\r\n        if ((pairOrders[order.pair].length > 1) && (pairIdx != pairOrders[order.pair].length-1)) {\r\n          rIdx = pairOrders[order.pair][pairOrders[order.pair].length - 1];\r\n          pairOrders[order.pair][pairIdx] = rIdx;\r\n          orders[rIdx].pairAddrIdx = updatePairIdx(orders[rIdx].pairAddrIdx, pairIdx);\r\n        }\r\n        pairOrders[order.pair].pop();\r\n    }\r\n\r\n    // 创建订单\r\n    // 调用前需要 approve\r\n    function createOrder(\r\n        address srcToken,\r\n        address destToken,\r\n        address from,           // 兑换得到的token发送地址 \r\n        address to,             // 兑换得到的token发送地址 \r\n        uint amountIn,\r\n        uint guaranteeAmountOut,       // \r\n        // uint timestamp,          // 挂单时间\r\n        uint expiredAt,          // 过期时间\r\n        uint flag) public payable whenOpen nonReentrant returns (uint) {\r\n      require(srcToken != destToken, \"identical token\");\r\n      require(expiredAt == 0 || expiredAt > block.timestamp, \"invalid param expiredAt\");\r\n\r\n      if (srcToken == address(0)) {\r\n        // 转入 wETH\r\n        require(msg.value >= amountIn, \"not enough amountIn\");\r\n        // IWHT(wETH).deposit{value: msg.value}();\r\n        srcToken = wETH;\r\n      } else {\r\n        // should approve outside\r\n        TransferHelper.safeTransferFrom(srcToken, msg.sender, address(this), amountIn);\r\n      }\r\n\r\n      {\r\n        // 最低挂单量限制\r\n        require(amountIn > minAmounts[srcToken], \"less than min amount\");\r\n      }\r\n      uint idx = orderId ++;\r\n      OrderItem storage order = orders[idx];\r\n      order.orderId = idx;\r\n      order.tokenAmt.srcToken = srcToken;\r\n      order.tokenAmt.destToken = destToken;\r\n      order.owner = from == address(0) ? msg.sender : from;\r\n      order.to = to == address(0) ? msg.sender : to;\r\n      order.tokenAmt.amountIn = amountIn;\r\n      order.tokenAmt.fulfiled = 0;\r\n      order.tokenAmt.guaranteeAmountOut = guaranteeAmountOut;\r\n      order.timestamp = maskTimestamp(block.timestamp, expiredAt);\r\n      order.flag = flag;\r\n\r\n      // (address token0, address token1) = srcToken < destToken ? (srcToken, destToken) : (destToken, srcToken);\r\n      order.pair = pairFor(srcToken, destToken);\r\n\r\n      _putOrder(order);\r\n\r\n      return idx;\r\n    }\r\n\r\n    // 获取所有订单列表\r\n    function getAllOrders() public view returns(OrderItem[] memory orders) {\r\n      uint total = 0;\r\n      uint id = 0;\r\n      for (uint i = 0; i < orderId; i ++) {\r\n        OrderItem memory order = orders[i];\r\n        if ((order.flag & _ORDER_CLOSED) == 0) {\r\n          total ++;\r\n        }\r\n      }\r\n\r\n      orders = new OrderItem[](total);\r\n      for (uint i = 0; i < orderId; i ++) {\r\n        OrderItem memory order = orders[i];\r\n        if ((order.flag & _ORDER_CLOSED) == 0) {\r\n          orders[id] = order;\r\n          id ++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 交易对hash\r\n    function pairFor(address srcToken, address destToken) public view returns(uint pair) {\r\n      if (srcToken == address(0)) {\r\n          srcToken = wETH;\r\n      }\r\n      if (destToken == address(0)) {\r\n          destToken = wETH;\r\n      }\r\n      (address token0, address token1) = srcToken < destToken ? (srcToken, destToken) : (destToken, srcToken);\r\n      pair = uint(keccak256(abi.encodePacked(token0, token1)));\r\n    }\r\n\r\n    // 增加参数 address to, 该参数通过 router 合约传入， 并验证 to == item.owner \r\n    function cancelOrder(uint orderId) public nonReentrant {\r\n      OrderItem storage order = orders[orderId];\r\n\r\n      if (isMargin(order.flag)) {\r\n        require(msg.sender == owner() || msg.sender == marginAddr, \"cancelMarginOrder: no auth\");\r\n      } else {\r\n        require(msg.sender == owner() || msg.sender == order.owner, \"cancelOrder: no auth\");\r\n      }\r\n      address srcToken = order.tokenAmt.srcToken;\r\n      if (srcToken == address(0)) {\r\n        TransferHelper.safeTransferETH(order.owner, order.tokenAmt.fulfiled);\r\n      } else {\r\n        TransferHelper.safeTransfer(srcToken, order.owner, order.tokenAmt.fulfiled);\r\n      }\r\n      emit CancelOrder(order.owner, orderId);\r\n      order.flag |= _ORDER_CLOSED;\r\n      _removeOrder(order);\r\n    }\r\n\r\n    // 剩余可成交部分\r\n    function _amountRemaining(uint amtTotal, uint fulfiled) internal pure returns (uint) {\r\n        // (amtTotal - fulfiled) * (1 - fee)\r\n        return amtTotal.sub(fulfiled);\r\n    }\r\n\r\n    // buyAmt: 待买走的挂卖token的数量, 未扣除手续费\r\n    // outAmt: 挂卖得到的token 的数量, 未扣除手续费\r\n    function _swap(address srcToken, address destToken, address maker, address buyer, uint buyAmt, uint outAmt, bool margin) private {\r\n      // bool margin = isMargin(order.flag);\r\n\r\n      if (margin) {\r\n        // 回调\r\n        IMarginHolding(marginAddr).onFulfiled(maker, outAmt, buyAmt);\r\n      } else {\r\n        balanceOf[destToken][maker] += outAmt;\r\n      }\r\n\r\n      // 买家得到的币\r\n      if (srcToken == address(0)) {\r\n        TransferHelper.safeTransferETH(buyer, buyAmt);\r\n      } else {\r\n        TransferHelper.safeTransfer(srcToken, buyer, buyAmt);\r\n      }\r\n    }\r\n\r\n    // todo\r\n    function getFeeRate() public view returns (uint) {\r\n      return 10000 - 30;\r\n    }\r\n\r\n    // order 成交, 收取成交后的币的手续费\r\n    // 普通订单, maker 成交的币由合约代持; taker 的币发给用户\r\n    //\r\n    function fulfilOrder(uint orderId, uint amtToTaken) external payable whenOpen nonReentrant returns (bool) {\r\n      OrderItem storage order = orders[orderId];\r\n      uint expired = getExpiredAt(order.timestamp);\r\n\r\n      if ((expired != 0) && (expired < block.timestamp)) {\r\n        // 已过期\r\n        cancelOrder(orderId);\r\n        return false;\r\n      }\r\n\r\n      if ((order.flag & _ORDER_CLOSED) > 0) {\r\n          return false;\r\n      }\r\n\r\n      uint left = order.tokenAmt.amountIn.sub(order.tokenAmt.fulfiled);\r\n\r\n      if(left < amtToTaken) {\r\n        return false;\r\n      } // , \"not enough\");\r\n\r\n      address destToken = order.tokenAmt.destToken;\r\n      // 挂单者在不扣除手续费的情况下得到的币的数量\r\n      uint amtDest = amtToTaken.mul(order.tokenAmt.guaranteeAmountOut).div(order.tokenAmt.amountIn);\r\n      uint fee = getFeeRate();\r\n      // 买家得到的\r\n      uint _buyAmt = amtToTaken.mul(fee).div(10000);\r\n      uint _outAmt = amtDest.mul(fee).div(10000);\r\n      _swap(order.tokenAmt.srcToken, order.tokenAmt.destToken, order.owner, msg.sender, _buyAmt, _outAmt, isMargin(order.flag));\r\n\r\n      // 验证转移买家的币\r\n      if (destToken == address(0)) {\r\n        require(msg.value >= amtDest, \"amount not transfer in\");\r\n      } else {\r\n        TransferHelper.safeTransferFrom(destToken, msg.sender, address(this), amtDest);\r\n      }\r\n\r\n      left -= amtToTaken;\r\n      order.tokenAmt.fulfiled += amtToTaken;\r\n\r\n      emit FulFilOrder(order.owner, msg.sender, orderId, amtToTaken, amtDest, left);\r\n      if (left == 0) {\r\n        //\r\n        order.flag |= _ORDER_CLOSED;\r\n        _removeOrder(order);\r\n      }\r\n      return true;\r\n    }\r\n\r\n    // function fulfilOrders(uint[] memory orderIds, uint[] memory amtToTaken) external whenOpen {\r\n    //     require(orderIds.length == amtToTaken.length, \"array length should equal\");\r\n\r\n    //     for (uint i = 0; i < orderIds.length; i ++) {\r\n    //       try fulfilOrder(orderIds[i], amtToTaken[i]) {\r\n    //       } catch {\r\n    //         // nothing\r\n    //       }\r\n    //     }\r\n    // }\r\n\r\n    // 用户成交后，资金由合约代管, 用户提现得到自己的 token\r\n    function withdraw(address token, uint amt) external {\r\n        uint total = balanceOf[token][msg.sender];\r\n        require(total >= amt, \"not enough asset\");\r\n\r\n        if (token == address(0)) {\r\n          TransferHelper.safeTransferETH(msg.sender, amt);\r\n        } else {\r\n          TransferHelper.safeTransferFrom(token, address(this), msg.sender, amt);\r\n        }\r\n\r\n        balanceOf[token][msg.sender] = total.sub(amt);\r\n    }\r\n\r\n    function adminTransfer(address token, address to, uint amt) external onlyOwner {\r\n        if (token == address(0)) {\r\n          TransferHelper.safeTransferETH(to, amt);\r\n        } else {\r\n          TransferHelper.safeTransferFrom(token, address(this), to, amt);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    uint256 constant WAD = 10 ** 18;\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    function wad() public pure returns (uint256) {\r\n        return WAD;\r\n    }\r\n\r\n    function ray() public pure returns (uint256) {\r\n        return RAY;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a <= b ? a : b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\r\n        if (a > 3) {\r\n            b = a;\r\n            uint256 x = a / 2 + 1;\r\n            while (x < b) {\r\n                b = x;\r\n                x = (a / x + x) / 2;\r\n            }\r\n        } else if (a != 0) {\r\n            b = 1;\r\n        }\r\n    }\r\n\r\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mul(a, b) / WAD;\r\n    }\r\n\r\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, b), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mul(a, b) / RAY;\r\n    }\r\n\r\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, b), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(mul(a, WAD), b);\r\n    }\r\n\r\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, WAD), b / 2) / b;\r\n    }\r\n\r\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(mul(a, RAY), b);\r\n    }\r\n\r\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, RAY), b / 2) / b;\r\n    }\r\n\r\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\r\n        uint256 result = WAD;\r\n        while (n > 0) {\r\n            if (n % 2 != 0) {\r\n                result = wmul(result, x);\r\n            }\r\n            x = wmul(x, x);\r\n            n /= 2;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\r\n        uint256 result = RAY;\r\n        while (n > 0) {\r\n            if (n % 2 != 0) {\r\n                result = rmul(result, x);\r\n            }\r\n            x = rmul(x, x);\r\n            n /= 2;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}