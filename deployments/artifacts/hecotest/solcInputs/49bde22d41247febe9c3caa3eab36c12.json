{
  "language": "Solidity",
  "sources": {
    "contracts/swap/aggressive/Address.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/swap/aggressive/OneSpilt.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nimport \"./UniERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./IWETH.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\nimport \"./IUniswapV2Exchange.sol\";\r\n\r\ncontract OneSplit is Ownable {\r\n    using SafeMath for uint256;\r\n    // using DisableFlags for uint256;\r\n\r\n    using UniERC20 for IERC20;\r\n    using UniERC20 for IWETH;\r\n    using UniswapV2ExchangeLib for IUniswapV2Exchange;\r\n    // using ChaiHelper for IChai;\r\n\r\n    IWETH public weth; // = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    IUniswapV2Factory[] public factories = [\r\n      IUniswapV2Factory(0x6Cf6749FE8Be5Db551a9962504F10a8467361754),\r\n      IUniswapV2Factory(0x1eA875068D325AF621Dfd9B63C461E7536149b1F)\r\n    ];\r\n    // IUniswapV2Factory mdexFactory = 0xb0b670fc1F7724119963018DB0BfA86aDb22d941;\r\n    // IUniswapV2Factory bxhFactory = 0xB6B1fE87cAa52D968832a5053116af08f4601475;\r\n    uint256 private constant _REVERSE_MASK =   0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    constructor(address _weth) public {\r\n        weth = IWETH(_weth);\r\n    }\r\n\r\n    struct Args {\r\n        IERC20 fromToken;\r\n        IERC20 destToken;\r\n        IERC20[] midTokens;\r\n        uint256 amount;\r\n        uint256 parts;\r\n        uint256 flags;\r\n        // uint256 slip;  // 分母 10000\r\n        uint256 destTokenEthPriceTimesGasPrice;\r\n    }\r\n\r\n    struct CalcVars {\r\n      IUniswapV2Factory factory;\r\n      IERC20 fromToken;\r\n      IERC20 midToken;\r\n      IERC20 destToken;\r\n      uint256[] amounts;\r\n      uint256 flags;\r\n      uint256 destTokenEthPriceTimesGasPrice;\r\n      bool atLeastOnePositive;\r\n    }\r\n\r\n    struct SwapParm {\r\n        address srcToken;\r\n        uint routers;\r\n        uint returnAmt;\r\n        uint[] amts;\r\n        uint[] outAmts;\r\n        uint[] minOutAmts;\r\n        uint[] flags;\r\n        bytes32[][] pools;\r\n    }\r\n\r\n    // function addFactory(address _factory) external onlyOwner {\r\n    //     factories[factories.length] = _factory;\r\n    // }\r\n\r\n    function resetFactories(address[] memory _factories) external onlyOwner {\r\n        uint total = factories.length;\r\n        for (uint i = 0; i < total; i ++) {\r\n            factories.pop();\r\n        }\r\n\r\n        factories = new IUniswapV2Factory[](_factories.length);\r\n        for (uint i = 0; i < _factories.length; i ++) {\r\n            factories[i] = IUniswapV2Factory(_factories[i]);\r\n        }\r\n    }\r\n\r\n    function getExpectedReturnWithGas(Args memory args)\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution,\r\n            bytes memory data\r\n        ) {\r\n        uint routers = (1 + args.midTokens.length) * factories.length;\r\n        uint256[] memory amounts = _linearInterpolation(args.amount, args.parts);\r\n        int256[][] memory matrix = new int256[][](routers);\r\n        uint256[] memory gases = new uint256[](routers);\r\n\r\n        {\r\n          CalcVars memory localVar;\r\n          localVar.fromToken = args.fromToken;\r\n          localVar.destToken = args.destToken;\r\n          localVar.amounts = amounts;\r\n          localVar.flags = args.flags;\r\n          localVar.destTokenEthPriceTimesGasPrice = args.destTokenEthPriceTimesGasPrice;\r\n\r\n          uint n = 0;\r\n          // bool atLeastOnePositive = false;\r\n          for (uint i = 0; i < factories.length; i ++ ) {\r\n              localVar.factory = factories[i];\r\n              _getFactoryResults(localVar, args.midTokens, matrix, gases, n);\r\n              // bool pos = _getFactoryResults(localVar, midTokens, matrix, n, destTokenEthPriceTimesGasPrice);\r\n              // atLeastOnePositive = atLeastOnePositive || pos;\r\n              n = 1 + args.midTokens.length;\r\n              // (uint256[] memory amts, uint gas) = _calculateUniswapV2(localVar);\r\n              // rets[n] = amts;\r\n              // n ++;\r\n              // for (uint j = 0; j < midTokens.length; j ++) {\r\n              //     localVar.midToken = midTokens[j];\r\n              //     (uint256[] memory amts, uint gas) = _calculateUniswapV2OverMidToken(localVar);\r\n              //     rets[n] = amts;\r\n              //     n ++;\r\n              // }\r\n          }\r\n        }\r\n        \r\n        (, distribution) = _findBestDistribution(args.parts, matrix);\r\n\r\n        (returnAmount, estimateGasAmount, data) = _getReturnAndGasByDistribution(args, distribution, matrix, gases);\r\n        //     Args({\r\n        //         fromToken: fromToken,\r\n        //         destToken: destToken,\r\n        //         amount: amount,\r\n        //         parts: parts,\r\n        //         flags: flags,\r\n        //         destTokenEthPriceTimesGasPrice: destTokenEthPriceTimesGasPrice,\r\n        //         distribution: distribution,\r\n        //         matrix: matrix,\r\n        //         gases: gases,\r\n        //     })\r\n        // );\r\n        return (returnAmount, estimateGasAmount, distribution, data);\r\n    }\r\n\r\n    function _getReturnAndGasByDistribution(\r\n        Args memory args,\r\n        uint[] memory distribution,\r\n        int[][] memory matrix,\r\n        uint[] memory gases\r\n    ) internal view returns(uint256 returnAmount, uint256 estimateGasAmount, bytes memory data) {\r\n        SwapParm memory param;\r\n        // uint routes;\r\n        for (uint i = 0; i < distribution.length; i ++) {\r\n            if (distribution[i] > 0) {\r\n                param.routers ++;\r\n            }\r\n        }\r\n\r\n        param.srcToken = address(args.fromToken);\r\n        param.amts = new uint[](param.routers);\r\n        param.outAmts = new uint[](param.routers);\r\n        param.minOutAmts = new uint[](param.routers);\r\n        param.flags = new uint[](param.routers);\r\n\r\n        uint total;\r\n        uint idx;\r\n        // uint amtIn = args.amount.mul(args.parts);\r\n        // uint slip = 10000 - args.slip;\r\n        \r\n        for (uint i = 0; i < distribution.length; i ++) {\r\n            if (distribution[i] > 0) {\r\n                estimateGasAmount = estimateGasAmount.add(gases[i]);\r\n                int256 value = matrix[i][distribution[i]] + int256(gases[i].mul(args.destTokenEthPriceTimesGasPrice).div(1e18));\r\n                returnAmount = returnAmount.add(uint256(value));\r\n\r\n                if (idx == param.routers - 1) {\r\n                    // 弥补精度\r\n                    param.amts[idx] = args.amount - total;\r\n                } else {\r\n                    param.amts[idx] = args.amount.mul(args.parts).div(distribution[i]);\r\n                }\r\n                param.outAmts[idx] = uint256(value);\r\n                param.minOutAmts[idx] = uint256(value);  // .mul(10000 - args.slip).div(10000);\r\n                // param.minOutAmts[idx] = uint256(value).mul(10000 - args.slip).div(10000);\r\n                total += param.amts[idx];\r\n                // uint units = args.midTokens.length + 1;\r\n                if (i % (args.midTokens.length+1) == 0) {\r\n                    // 没有中间交易对\r\n                    param.pools[idx] = _buildPoolData(factories[i/(args.midTokens.length+1)], args.fromToken, IERC20(0), args.destToken, 997000);\r\n                } else {\r\n                    // 有中间交易对的情况\r\n                    param.pools[idx] = _buildPoolData(factories[i/(args.midTokens.length+1)], args.fromToken, args.midTokens[i%(args.midTokens.length+1)], args.destToken, 997000);\r\n                }\r\n\r\n                idx ++;\r\n            }\r\n        }\r\n\r\n        param.returnAmt = returnAmount;\r\n        data = abi.encode(param);\r\n    }\r\n\r\n    // feeRate 的分母是 1000_000\r\n    function _buildPoolData(IUniswapV2Factory factory,\r\n        IERC20 srcToken,\r\n        IERC20 midToken,\r\n        IERC20 destToken,\r\n        uint feeRate) private view returns (bytes32[] memory) {\r\n        bytes32[] memory data;\r\n\r\n        feeRate = feeRate << 160;\r\n        IERC20 fromTokenReal = srcToken.isETH() ? weth : srcToken;\r\n        IERC20 destTokenReal = destToken.isETH() ? weth : destToken;\r\n        address[] memory path;\r\n        if (address(midToken) != address(0)) {\r\n            data = new bytes32[](1);\r\n            path = new address[](2);\r\n            path[0] = address(fromTokenReal);\r\n            path[1] = address(destTokenReal);\r\n\r\n        } else {\r\n            data = new bytes32[](2);\r\n            path = new address[](3);\r\n            path[0] = address(fromTokenReal);\r\n            path[1] = address(midToken);\r\n            path[2] = address(destTokenReal);\r\n        }\r\n\r\n        for (uint i = 0; i < path.length - 1; i ++) {\r\n            address t0 = path[i];\r\n            address t1 = path[i+1];\r\n\r\n            address pair = address(factory.getPair(IERC20(t0), IERC20(t1)));\r\n            uint pool = uint(pair);\r\n            pool = feeRate | pool;\r\n            // reverse\r\n            address token0 = IUniswapV2Pair(pair).token0();\r\n            if (token0 != t0) {\r\n              pool = pool | _REVERSE_MASK;\r\n            }\r\n            data[i] = bytes32(pool);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    function _getFactoryResults(CalcVars memory localVar,\r\n      IERC20[] memory midTokens,\r\n      int256[][] memory matrix,\r\n      uint256[] memory gases,\r\n      uint n) internal view {\r\n        bool atLeastOnePositive = false;\r\n        // Prepend zero and sub gas\r\n\r\n        (uint256[] memory amts, uint gas) = _calculateUniswapV2(localVar);\r\n        gases[n] = gas;\r\n        gas = gas.mul(localVar.destTokenEthPriceTimesGasPrice).div(1e18);\r\n        matrix[n] = new int256[](amts.length + 1);\r\n        for (uint j = 0; j < amts.length; j++) {\r\n            matrix[n][j + 1] = int256(amts[j]) - int256(gas);\r\n            atLeastOnePositive = atLeastOnePositive || (matrix[n][j + 1] > 0);\r\n        }\r\n        n ++;\r\n\r\n        for (uint i = 0; i < midTokens.length; i ++) {\r\n            localVar.midToken = midTokens[i];\r\n            // (uint256[] memory amts, uint gas) = _calculateUniswapV2OverMidToken(localVar);\r\n            (amts, gas) = _calculateUniswapV2OverMidToken(localVar);\r\n            gases[n] = gas;\r\n            gas = gas.mul(localVar.destTokenEthPriceTimesGasPrice).div(1e18);\r\n            \r\n            matrix[n] = new int256[](amts.length + 1);\r\n            for (uint j = 0; j < amts.length; j++) {\r\n                matrix[n][j + 1] = int256(amts[j]) - int256(gas);\r\n                atLeastOnePositive = atLeastOnePositive || (matrix[n][j + 1] > 0);\r\n            }\r\n            n ++;\r\n        }\r\n\r\n        if (atLeastOnePositive) {\r\n          localVar.atLeastOnePositive = true;\r\n        }\r\n    }\r\n\r\n    // function _getReserves(IERC20[] memory midTokens) private returns (function(IUniswapV2Factory,IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[] memory) {\r\n    //   function(IUniswapV2Factory,IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[] memory reserves = new function(IUniswapV2Factory,IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[]();\r\n\r\n    //   for (uint i = 0; i < factories.length; i ++ ) {\r\n    //       reserves.push();\r\n    //       for (uint j = 0; j < midTokens.length; j ++) {\r\n\r\n    //       }\r\n    //   }\r\n    // }\r\n\r\n    function _findBestDistribution(\r\n        uint256 s,                // parts\r\n        int256[][] memory amounts // exchangesReturns\r\n    )\r\n        internal\r\n        pure\r\n        returns(\r\n            int256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        uint256 n = amounts.length;\r\n\r\n        int256[][] memory answer = new int256[][](n); // int[n][s+1]\r\n        uint256[][] memory parent = new uint256[][](n); // int[n][s+1]\r\n\r\n        for (uint i = 0; i < n; i++) {\r\n            answer[i] = new int256[](s + 1);\r\n            parent[i] = new uint256[](s + 1);\r\n        }\r\n\r\n        for (uint j = 0; j <= s; j++) {\r\n            answer[0][j] = amounts[0][j];\r\n            for (uint i = 1; i < n; i++) {\r\n                answer[i][j] = 0;\r\n            }\r\n            parent[0][j] = 0;\r\n        }\r\n\r\n        for (uint i = 1; i < n; i++) {\r\n            for (uint j = 0; j <= s; j++) {\r\n                answer[i][j] = answer[i - 1][j];\r\n                parent[i][j] = j;\r\n\r\n                for (uint k = 1; k <= j; k++) {\r\n                    if (answer[i - 1][j - k] + amounts[i][k] > answer[i][j]) {\r\n                        answer[i][j] = answer[i - 1][j - k] + amounts[i][k];\r\n                        parent[i][j] = j - k;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        distribution = new uint256[](n);\r\n\r\n        uint256 partsLeft = s;\r\n        for (uint curExchange = n - 1; partsLeft > 0; curExchange--) {\r\n            distribution[curExchange] = partsLeft - parent[curExchange][partsLeft];\r\n            partsLeft = parent[curExchange][partsLeft];\r\n        }\r\n\r\n        returnAmount = (answer[n - 1][s] == 0) ? 0 : answer[n - 1][s];\r\n    }\r\n\r\n    function _calculateUniswapFormula(uint256 fromBalance, uint256 toBalance, uint256 amount) internal pure returns(uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n        return amount.mul(toBalance).mul(997).div(\r\n            fromBalance.mul(1000).add(amount.mul(997))\r\n        );\r\n    }\r\n\r\n    function _calculateUniswapV2(CalcVars memory lvar) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IUniswapV2Factory factory = lvar.factory;\r\n        IERC20 fromToken = lvar.fromToken;\r\n        IERC20 destToken = lvar.destToken;\r\n        uint256[] memory amounts = lvar.amounts;\r\n        // uint256 /*flags*/\r\n        rets = new uint256[](amounts.length);\r\n\r\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\r\n        IERC20 destTokenReal = destToken.isETH() ? weth : destToken;\r\n        IUniswapV2Exchange exchange = factory.getPair(fromTokenReal, destTokenReal);\r\n        if (exchange != IUniswapV2Exchange(0)) {\r\n            uint256 fromTokenBalance = fromTokenReal.uniBalanceOf(address(exchange));\r\n            uint256 destTokenBalance = destTokenReal.uniBalanceOf(address(exchange));\r\n            for (uint i = 0; i < amounts.length; i++) {\r\n                rets[i] = _calculateUniswapFormula(fromTokenBalance, destTokenBalance, amounts[i]);\r\n            }\r\n            return (rets, 50_000);\r\n        }\r\n    }\r\n\r\n    function _linearInterpolation(\r\n        uint256 value,\r\n        uint256 parts\r\n    ) internal pure returns(uint256[] memory rets) {\r\n        rets = new uint256[](parts);\r\n        for (uint i = 0; i < parts; i++) {\r\n            rets[i] = value.mul(i + 1).div(parts);\r\n        }\r\n    }\r\n\r\n    function _calculateUniswapV2OverMidToken(\r\n        CalcVars memory lvar\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        // rets = _linearInterpolation(amount, parts);\r\n        // IUniswapV2Factory factory = var.factory;\r\n        // IERC20 fromToken = var.fromToken;\r\n        // IERC20 midToken = var.midToken;\r\n        // IERC20 destToken = var.destToken;\r\n        // uint256[] memory amounts = var.amounts;\r\n        // // uint256 parts,\r\n        // uint256 flags = var.flags;\r\n        CalcVars memory tmpVar;\r\n        tmpVar.factory = lvar.factory;\r\n        tmpVar.fromToken = lvar.fromToken;\r\n        // tmpVar.midToken = lvar.factory;\r\n        tmpVar.destToken = lvar.midToken;\r\n        tmpVar.amounts = lvar.amounts;\r\n        tmpVar.flags = lvar.flags;\r\n\r\n        uint256 gas1;\r\n        uint256 gas2;\r\n        (rets, gas1) = _calculateUniswapV2(tmpVar);\r\n        tmpVar.amounts = rets;\r\n        tmpVar.fromToken = lvar.midToken;\r\n        tmpVar.destToken = lvar.destToken;\r\n        (rets, gas2) = _calculateUniswapV2(tmpVar);\r\n        return (rets, gas1 + gas2);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/swap/aggressive/UniERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\nlibrary UniERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    IERC20 private constant _ZERO_ADDRESS = IERC20(0);\r\n\r\n    function isETH(IERC20 token) internal pure returns (bool) {\r\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\r\n    }\r\n\r\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return account.balance;\r\n        } else {\r\n            return token.balanceOf(account);\r\n        }\r\n    }\r\n\r\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                to.transfer(amount);\r\n            } else {\r\n                _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniApprove(IERC20 token, address to, uint256 amount) internal {\r\n        require(!isETH(token), \"Approve called on ETH\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(abi.encodeWithSelector(token.approve.selector, to, amount));\r\n\r\n        if (!success || (returndata.length > 0 && !abi.decode(returndata, (bool)))) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, 0));\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, amount));\r\n        }\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/swap/aggressive/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"
    },
    "contracts/swap/aggressive/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\npragma solidity >=0.6.12;\r\n\r\nlibrary SafeMath {\r\n    uint256 constant WAD = 10 ** 18;\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    function wad() public pure returns (uint256) {\r\n        return WAD;\r\n    }\r\n\r\n    function ray() public pure returns (uint256) {\r\n        return RAY;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a <= b ? a : b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\r\n        if (a > 3) {\r\n            b = a;\r\n            uint256 x = a / 2 + 1;\r\n            while (x < b) {\r\n                b = x;\r\n                x = (a / x + x) / 2;\r\n            }\r\n        } else if (a != 0) {\r\n            b = 1;\r\n        }\r\n    }\r\n\r\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mul(a, b) / WAD;\r\n    }\r\n\r\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, b), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mul(a, b) / RAY;\r\n    }\r\n\r\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, b), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(mul(a, WAD), b);\r\n    }\r\n\r\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, WAD), b / 2) / b;\r\n    }\r\n\r\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(mul(a, RAY), b);\r\n    }\r\n\r\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, RAY), b / 2) / b;\r\n    }\r\n\r\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\r\n        uint256 result = WAD;\r\n        while (n > 0) {\r\n            if (n % 2 != 0) {\r\n                result = wmul(result, x);\r\n            }\r\n            x = wmul(x, x);\r\n            n /= 2;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\r\n        uint256 result = RAY;\r\n        while (n > 0) {\r\n            if (n % 2 != 0) {\r\n                result = rmul(result, x);\r\n            }\r\n            x = rmul(x, x);\r\n            n /= 2;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n"
    },
    "contracts/swap/aggressive/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\npragma solidity ^0.6.12;\r\n\r\nimport \"./Address.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n"
    },
    "contracts/swap/aggressive/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n\r\nabstract contract IWETH is IERC20 {\r\n    function deposit() external virtual payable;\r\n\r\n    function withdraw(uint256 amount) external virtual;\r\n}\r\n"
    },
    "contracts/swap/aggressive/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nimport \"./IUniswapV2Exchange.sol\";\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Exchange pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n}"
    },
    "contracts/swap/aggressive/IUniswapV2Exchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nimport \"./Math.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./UniERC20.sol\";\r\n\r\n\r\ninterface IUniswapV2Exchange {\r\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n}\r\n\r\n\r\nlibrary UniswapV2ExchangeLib {\r\n    using Math for uint256;\r\n    using SafeMath for uint256;\r\n    using UniERC20 for IERC20;\r\n\r\n    function getReturn(\r\n        IUniswapV2Exchange exchange,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint amountIn\r\n    ) internal view returns (uint256 result, bool needSync, bool needSkim) {\r\n        uint256 reserveIn = fromToken.uniBalanceOf(address(exchange));\r\n        uint256 reserveOut = destToken.uniBalanceOf(address(exchange));\r\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\r\n        if (fromToken > destToken) {\r\n            (reserve0, reserve1) = (reserve1, reserve0);\r\n        }\r\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\r\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\r\n\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(Math.min(reserveOut, reserve1));\r\n        uint256 denominator = Math.min(reserveIn, reserve0).mul(1000).add(amountInWithFee);\r\n        result = (denominator == 0) ? 0 : numerator.div(denominator);\r\n    }\r\n}\r\n"
    },
    "contracts/swap/aggressive/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n"
    },
    "contracts/swap/aggressive/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "contracts/swap/aggressive/UnoswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./UniERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./RevertReasonParser.sol\";\r\n\r\ninterface IERC20Permit {\r\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\ncontract Permitable {\r\n    event Error(\r\n        string reason\r\n    );\r\n\r\n    function _permit(IERC20 token, uint256 amount, bytes calldata permit) internal {\r\n        if (permit.length == 32 * 7) {\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success, bytes memory result) = address(token).call(abi.encodePacked(IERC20Permit.permit.selector, permit));\r\n            if (!success) {\r\n                string memory reason = RevertReasonParser.parse(result, \"Permit call failed: \");\r\n                if (token.allowance(msg.sender, address(this)) < amount) {\r\n                    revert(reason);\r\n                } else {\r\n                    emit Error(reason);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract UnoswapRouter is Permitable {\r\n    uint256 private constant _TRANSFER_FROM_CALL_SELECTOR_32 = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _WETH_DEPOSIT_CALL_SELECTOR_32 = 0xd0e30db000000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _WETH_WITHDRAW_CALL_SELECTOR_32 = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _ERC20_TRANSFER_CALL_SELECTOR_32 = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _ADDRESS_MASK =   0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 private constant _REVERSE_MASK =   0x8000000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _WETH_MASK =      0x4000000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _NUMERATOR_MASK = 0x0000000000000000ffffffff0000000000000000000000000000000000000000;\r\n    uint256 private constant _WETH = 0x000000000000000000000000C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    uint256 private constant _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 = 0x0902f1ac00000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 = 0x022c0d9f00000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _DENOMINATOR = 1000000000;\r\n    uint256 private constant _NUMERATOR_OFFSET = 160;\r\n\r\n    receive() external payable {\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        require(msg.sender != tx.origin, \"ETH deposit rejected\");\r\n    }\r\n\r\n    // constructor(address _weth) public {\r\n    //     // _WETH = uint(_weth);\r\n    // }\r\n\r\n    function unoswapWithPermit(\r\n        IERC20 srcToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        bytes32[] calldata pools,\r\n        bytes calldata permit\r\n    ) external payable returns(uint256 returnAmount) {\r\n        _permit(srcToken, amount, permit);\r\n        return unoswap(srcToken, amount, minReturn, pools);\r\n    }\r\n\r\n    struct SwapParm {\r\n        address srcToken;\r\n        uint routers;\r\n        uint returnAmt;\r\n        uint[] amts;\r\n        uint[] outAmts;\r\n        uint[] minOutAmts;\r\n        uint[] flags;\r\n        bytes32[][] pools;\r\n    }\r\n\r\n    // 同时调用多个交易所兑换\r\n    function unoswapAll(bytes calldata data) public payable returns(uint256 returnAmount) {\r\n        SwapParm memory param = abi.decode(data, (SwapParm));\r\n        // uint[] memory amtOut;\r\n        for (uint i = 0; i < param.routers; i ++) {\r\n            uint flag = param.flags[i];\r\n\r\n            // todo \r\n            // bytes32[] calldata pools = new bytes32[](param.pools.length);\r\n\r\n            uint amtOut = unoswap(IERC20(param.srcToken), param.amts[i], param.minOutAmts[i], param.pools[i]);\r\n            returnAmount += amtOut;\r\n        }\r\n        // return;\r\n    }\r\n\r\n    function unoswap(\r\n        IERC20 srcToken,\r\n        uint256 amount,     // 输入\r\n        uint256 minReturn,\r\n        bytes32[] memory /* pools */\r\n    ) public payable returns(uint256 returnAmount) {\r\n        assembly {  // solhint-disable-line no-inline-assembly\r\n            function reRevert() {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n\r\n            function revertWithReason(m, len) {\r\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\r\n                mstore(0x20, 0x0000002000000000000000000000000000000000000000000000000000000000)\r\n                mstore(0x40, m)\r\n                revert(0, len)\r\n            }\r\n\r\n            function swap(emptyPtr, swapAmount, pair, reversed, numerator, dst) -> ret {\r\n                mstore(emptyPtr, _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\r\n                if iszero(staticcall(gas(), pair, emptyPtr, 0x4, emptyPtr, 0x40)) {\r\n                    reRevert()\r\n                }\r\n\r\n                let reserve0 := mload(emptyPtr)\r\n                let reserve1 := mload(add(emptyPtr, 0x20))\r\n                if reversed {\r\n                    let tmp := reserve0\r\n                    reserve0 := reserve1\r\n                    reserve1 := tmp\r\n                }\r\n                ret := mul(swapAmount, numerator)\r\n                ret := div(mul(ret, reserve1), add(ret, mul(reserve0, _DENOMINATOR)))\r\n\r\n                mstore(emptyPtr, _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\r\n                switch reversed\r\n                case 0 {\r\n                    mstore(add(emptyPtr, 0x04), 0)\r\n                    mstore(add(emptyPtr, 0x24), ret)\r\n                }\r\n                default {\r\n                    mstore(add(emptyPtr, 0x04), ret)\r\n                    mstore(add(emptyPtr, 0x24), 0)\r\n                }\r\n                mstore(add(emptyPtr, 0x44), dst)\r\n                mstore(add(emptyPtr, 0x64), 0x80)\r\n                mstore(add(emptyPtr, 0x84), 0)\r\n                if iszero(call(gas(), pair, 0, emptyPtr, 0xa4, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n            }\r\n\r\n            let emptyPtr := mload(0x40)\r\n            mstore(0x40, add(emptyPtr, 0xc0))\r\n\r\n            let poolsOffset := add(calldataload(0x64), 0x4)   // 0x64 地址保存的是 pool end offset 的偏移，例如 0x80\r\n            let poolsEndOffset := calldataload(poolsOffset)   // 多少个 pool\r\n            poolsOffset := add(poolsOffset, 0x20)             // pair 地址\r\n            poolsEndOffset := add(poolsOffset, mul(0x20, poolsEndOffset))\r\n            let rawPair := calldataload(poolsOffset)\r\n            switch srcToken\r\n            case 0 {\r\n                if iszero(eq(amount, callvalue())) {\r\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55)  // \"invalid msg.value\"\r\n                }\r\n\r\n                mstore(emptyPtr, _WETH_DEPOSIT_CALL_SELECTOR_32)\r\n                if iszero(call(gas(), _WETH, amount, emptyPtr, 0x4, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n\r\n                mstore(emptyPtr, _ERC20_TRANSFER_CALL_SELECTOR_32)\r\n                mstore(add(emptyPtr, 0x4), and(rawPair, _ADDRESS_MASK))\r\n                mstore(add(emptyPtr, 0x24), amount)\r\n                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x44, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n            }\r\n            default {\r\n                if callvalue() {\r\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55)  // \"invalid msg.value\"\r\n                }\r\n\r\n                mstore(emptyPtr, _TRANSFER_FROM_CALL_SELECTOR_32)\r\n                mstore(add(emptyPtr, 0x4), caller())\r\n                mstore(add(emptyPtr, 0x24), and(rawPair, _ADDRESS_MASK))\r\n                mstore(add(emptyPtr, 0x44), amount)\r\n                if iszero(call(gas(), srcToken, 0, emptyPtr, 0x64, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n            }\r\n\r\n            returnAmount := amount\r\n\r\n            for {let i := add(poolsOffset, 0x20)} lt(i, poolsEndOffset) {i := add(i, 0x20)} {\r\n                let nextRawPair := calldataload(i)\r\n\r\n                returnAmount := swap(\r\n                    emptyPtr,\r\n                    returnAmount,\r\n                    and(rawPair, _ADDRESS_MASK),\r\n                    and(rawPair, _REVERSE_MASK),\r\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\r\n                    and(nextRawPair, _ADDRESS_MASK)\r\n                )\r\n\r\n                rawPair := nextRawPair\r\n            }\r\n\r\n            switch and(rawPair, _WETH_MASK)\r\n            case 0 {\r\n                returnAmount := swap(\r\n                    emptyPtr,\r\n                    returnAmount,\r\n                    and(rawPair, _ADDRESS_MASK),\r\n                    and(rawPair, _REVERSE_MASK),\r\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\r\n                    caller()\r\n                )\r\n            }\r\n            default {\r\n                returnAmount := swap(\r\n                    emptyPtr,\r\n                    returnAmount,\r\n                    and(rawPair, _ADDRESS_MASK),\r\n                    and(rawPair, _REVERSE_MASK),\r\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\r\n                    address()\r\n                )\r\n\r\n                mstore(emptyPtr, _WETH_WITHDRAW_CALL_SELECTOR_32)\r\n                mstore(add(emptyPtr, 0x04), returnAmount)\r\n                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x24, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n\r\n                if iszero(call(gas(), caller(), returnAmount, 0, 0, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n            }\r\n\r\n            if lt(returnAmount, minReturn) {\r\n                revertWithReason(0x000000164d696e2072657475726e206e6f742072656163686564000000000000, 0x5a)  // \"Min return not reached\"\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/swap/aggressive/RevertReasonParser.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\nlibrary RevertReasonParser {\r\n    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\r\n        // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\r\n        // We assume that revert reason is abi-encoded as Error(string)\r\n\r\n        // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\r\n        if (data.length >= 68 && data[0] == \"\\x08\" && data[1] == \"\\xc3\" && data[2] == \"\\x79\" && data[3] == \"\\xa0\") {\r\n            string memory reason;\r\n            // solhint-disable no-inline-assembly\r\n            assembly {\r\n                // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\r\n                reason := add(data, 68)\r\n            }\r\n            /*\r\n                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\r\n                also sometimes there is extra 32 bytes of zeros padded in the end:\r\n                https://github.com/ethereum/solidity/issues/10170\r\n                because of that we can't check for equality and instead check\r\n                that string length + extra 68 bytes is less than overall data length\r\n            */\r\n            require(data.length >= 68 + bytes(reason).length, \"Invalid revert reason\");\r\n            return string(abi.encodePacked(prefix, \"Error(\", reason, \")\"));\r\n        }\r\n        // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\r\n        else if (data.length == 36 && data[0] == \"\\x4e\" && data[1] == \"\\x48\" && data[2] == \"\\x7b\" && data[3] == \"\\x71\") {\r\n            uint256 code;\r\n            // solhint-disable no-inline-assembly\r\n            assembly {\r\n                // 36 = 32 bytes data length + 4-byte selector\r\n                code := mload(add(data, 36))\r\n            }\r\n            return string(abi.encodePacked(prefix, \"Panic(\", _toHex(code), \")\"));\r\n        }\r\n\r\n        return string(abi.encodePacked(prefix, \"Unknown(\", _toHex(data), \")\"));\r\n    }\r\n\r\n    function _toHex(uint256 value) private pure returns(string memory) {\r\n        return _toHex(abi.encodePacked(value));\r\n    }\r\n\r\n    function _toHex(bytes memory data) private pure returns(string memory) {\r\n        bytes16 alphabet = 0x30313233343536373839616263646566;\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\r\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n}\r\n\r\n"
    },
    "contracts/swap/aggressive/AggregationRouterV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./SafeERC20.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./SafeERC20.sol\";\r\n\r\nimport \"./UnoswapRouter.sol\";\r\n\r\ninterface IChi is IERC20 {\r\n    function mint(uint256 value) external;\r\n    function free(uint256 value) external returns (uint256 freed);\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\n\r\ninterface IGasDiscountExtension {\r\n    function calculateGas(uint256 gasUsed, uint256 flags, uint256 calldataLength) external view returns (IChi, uint256);\r\n}\r\n\r\ninterface IAggregationExecutor is IGasDiscountExtension {\r\n    function callBytes(bytes calldata data) external payable;  // 0xd9c45357\r\n}\r\n\r\ncontract AggregationRouterV3 is Ownable, UnoswapRouter {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using UniERC20 for IERC20;\r\n\r\n    uint256 private constant _PARTIAL_FILL = 0x01;\r\n    uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;\r\n    uint256 private constant _SHOULD_CLAIM = 0x04;\r\n    uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;\r\n    uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;\r\n\r\n    struct SwapDescription {\r\n        IERC20 srcToken;\r\n        IERC20 dstToken;\r\n        address srcReceiver;\r\n        address dstReceiver;\r\n        uint256 amount;\r\n        uint256 minReturnAmount;\r\n        uint256 flags;\r\n        bytes permit;\r\n    }\r\n\r\n    event Swapped(\r\n        address sender,\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        address dstReceiver,\r\n        uint256 spentAmount,\r\n        uint256 returnAmount\r\n    );\r\n\r\n    function discountedSwap(\r\n        IAggregationExecutor caller,\r\n        SwapDescription calldata desc,    // 必须 pragma experimental ABIEncoderV2\r\n        bytes calldata data\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 returnAmount, uint256 gasLeft, uint256 chiSpent)\r\n    {\r\n        uint256 initialGas = gasleft();\r\n\r\n        address chiSource = address(0);\r\n        if (desc.flags & _BURN_FROM_MSG_SENDER != 0) {\r\n            chiSource = msg.sender;\r\n        } else if (desc.flags & _BURN_FROM_TX_ORIGIN != 0) {\r\n            chiSource = tx.origin; // solhint-disable-line avoid-tx-origin\r\n        } else {\r\n            revert(\"Incorrect CHI burn flags\");\r\n        }\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returnData) = address(this).delegatecall(abi.encodeWithSelector(this.swap.selector, caller, desc, data));\r\n        if (success) {\r\n            (returnAmount,) = abi.decode(returnData, (uint256, uint256));\r\n        } else {\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n            emit Error(RevertReasonParser.parse(returnData, \"Swap failed: \"));\r\n        }\r\n\r\n        (IChi chi, uint256 amount) = caller.calculateGas(initialGas.sub(gasleft()), desc.flags, msg.data.length);\r\n        if (amount > 0) {\r\n            chiSpent = chi.freeFromUpTo(chiSource, amount);\r\n        }\r\n        gasLeft = gasleft();\r\n    }\r\n\r\n    function swap(\r\n        IAggregationExecutor caller,\r\n        SwapDescription calldata desc,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 returnAmount, uint256 gasLeft)\r\n    {\r\n        require(desc.minReturnAmount > 0, \"Min return should not be 0\");\r\n        require(data.length > 0, \"data should be not zero\");\r\n\r\n        uint256 flags = desc.flags;\r\n        IERC20 srcToken = desc.srcToken;\r\n        IERC20 dstToken = desc.dstToken;\r\n\r\n        if (flags & _REQUIRES_EXTRA_ETH != 0) {\r\n            require(msg.value > (srcToken.isETH() ? desc.amount : 0), \"Invalid msg.value\");\r\n        } else {\r\n            require(msg.value == (srcToken.isETH() ? desc.amount : 0), \"Invalid msg.value\");\r\n        }\r\n\r\n        if (flags & _SHOULD_CLAIM != 0) {\r\n            require(!srcToken.isETH(), \"Claim token is ETH\");\r\n            _permit(srcToken, desc.amount, desc.permit);\r\n            srcToken.safeTransferFrom(msg.sender, desc.srcReceiver, desc.amount);\r\n        }\r\n\r\n        address dstReceiver = (desc.dstReceiver == address(0)) ? msg.sender : desc.dstReceiver;\r\n        uint256 initialSrcBalance = (flags & _PARTIAL_FILL != 0) ? srcToken.uniBalanceOf(msg.sender) : 0;\r\n        uint256 initialDstBalance = dstToken.uniBalanceOf(dstReceiver);\r\n\r\n        {\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success, bytes memory result) = address(caller).call{value: msg.value}(abi.encodePacked(caller.callBytes.selector, data));\r\n            if (!success) {\r\n                revert(RevertReasonParser.parse(result, \"callBytes failed: \"));\r\n            }\r\n        }\r\n\r\n        uint256 spentAmount = desc.amount;\r\n        returnAmount = dstToken.uniBalanceOf(dstReceiver).sub(initialDstBalance);\r\n\r\n        if (flags & _PARTIAL_FILL != 0) {\r\n            spentAmount = initialSrcBalance.add(desc.amount).sub(srcToken.uniBalanceOf(msg.sender));\r\n            require(returnAmount.mul(desc.amount) >= desc.minReturnAmount.mul(spentAmount), \"Return amount is not enough\");\r\n        } else {\r\n            require(returnAmount >= desc.minReturnAmount, \"Return amount is not enough\");\r\n        }\r\n\r\n        emit Swapped(\r\n            msg.sender,\r\n            srcToken,\r\n            dstToken,\r\n            dstReceiver,\r\n            spentAmount,\r\n            returnAmount\r\n        );\r\n\r\n        gasLeft = gasleft();\r\n    }\r\n\r\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\r\n        token.uniTransfer(msg.sender, amount);\r\n    }\r\n\r\n    function destroy() external onlyOwner {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}