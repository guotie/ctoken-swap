{
  "address": "0x10c220d26949757E753A223AfDA1f49a207773c4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ctokenFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Error",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLAG_SWAP_DIRECT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLAG_SWAP_ROUTER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ctokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "unoswapAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "pools",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "permit",
          "type": "bytes"
        }
      ],
      "name": "unoswapWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0bc44328de3e44b82eee1fc0c94948b8473c479719180b79e3d2f9fa00b5bdb2",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x10c220d26949757E753A223AfDA1f49a207773c4",
    "transactionIndex": 163,
    "gasUsed": "2241503",
    "logsBloom": "0x
    "blockHash": "0xb1b65e58359ccd90a129e7e7b67b1335adf21f3f4bb2f14d7c21f63107e738a5",
    "transactionHash": "0x0bc44328de3e44b82eee1fc0c94948b8473c479719180b79e3d2f9fa00b5bdb2",
    "logs": [],
    "blockNumber": 6013785,
    "cumulativeGasUsed": "7069282",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836",
    "0xC65d5ea738F466FEb518b6079732C7b03eE04CF0"
  ],
  "solcInputHash": "f83496fc5b65debe563e58c1c0cf72bf",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ctokenFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLAG_SWAP_DIRECT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLAG_SWAP_ROUTER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unoswapAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"pools\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"unoswapWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/aggressive/UnoswapRouter.sol\":\"UnoswapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/aggressive/Address.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc270a61a6f11c912d5c3755911d5ef996a8fe78ee32392334f9fdf6540228083\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/ICERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\ninterface ICERC20 {\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function exchangeRateCurrent() external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function accrualBlockNumber() external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xed463584a5a9991a05eb8b39ac6fcb454c9ff914d963db93f87a26d7dd8ba30f\",\"license\":\"MIT\"},\"contracts/swap/aggressive/ICTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\ninterface ICTokenFactory {\\r\\n    // \\u6839\\u636e token \\u5730\\u5740\\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 ctoken \\u5730\\u5740\\r\\n    function getCTokenAddressPure(address token) external view returns (address);\\r\\n\\r\\n    // \\u6839\\u636e ctoken \\u5730\\u5740\\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 token \\u5730\\u5740\\r\\n    function getTokenAddress(address cToken) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a01d37b64a4065fecc3d2fe735d2e151e632bc61317de0f212ee6d526568f77\",\"license\":\"MIT\"},\"contracts/swap/aggressive/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x23b94bd1e3bcc3eb3ed7f46e4b82e8ef11810af8c015794dd8bcf3d51a3cf0e7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/IUniswapV2Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Math.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./UniERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface IUniswapV2Exchange {\\r\\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n}\\r\\n\\r\\n\\r\\nlibrary UniswapV2ExchangeLib {\\r\\n    using Math for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using UniERC20 for IERC20;\\r\\n\\r\\n    function getReturn(\\r\\n        IUniswapV2Exchange exchange,\\r\\n        IERC20 fromToken,\\r\\n        IERC20 destToken,\\r\\n        uint amountIn\\r\\n    ) internal view returns (uint256 result, bool needSync, bool needSkim) {\\r\\n        uint256 reserveIn = fromToken.uniBalanceOf(address(exchange));\\r\\n        uint256 reserveOut = destToken.uniBalanceOf(address(exchange));\\r\\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\\r\\n        if (fromToken > destToken) {\\r\\n            (reserve0, reserve1) = (reserve1, reserve0);\\r\\n        }\\r\\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\\r\\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\\r\\n\\r\\n        uint256 amountInWithFee = amountIn.mul(997);\\r\\n        uint256 numerator = amountInWithFee.mul(Math.min(reserveOut, reserve1));\\r\\n        uint256 denominator = Math.min(reserveIn, reserve0).mul(1000).add(amountInWithFee);\\r\\n        result = (denominator == 0) ? 0 : numerator.div(denominator);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ab57d81100781c12e9cf32a68ba4afe6e0e209f620cb93a69a58bae9ddf2bdd\",\"license\":\"MIT\"},\"contracts/swap/aggressive/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./IUniswapV2Exchange.sol\\\";\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Exchange pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint reserveA, uint reserveB);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router {\\r\\n    function factory() external view returns (IUniswapV2Factory);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IEBankV2Router {\\r\\n    function factory() external view returns (IUniswapV2Factory);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokensUnderlying(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokensUnderlying(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETHUnderlying(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n}\",\"keccak256\":\"0x94ee921515fc1160f86cea3cad29a2d713b2a6e1a9114cbdb74604bd51c043e2\",\"license\":\"MIT\"},\"contracts/swap/aggressive/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract IWETH is IERC20 {\\r\\n    function deposit() external virtual payable;\\r\\n\\r\\n    function withdraw(uint256 amount) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x51352637310347dd11e7132157a7257ebd50e2f3ae19589fd7751d06d88800a9\",\"license\":\"MIT\"},\"contracts/swap/aggressive/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xae28964ea0ef66ab169ac55cd33922bbc329897791df496dd3f29fc5c2914f4d\",\"license\":\"MIT\"},\"contracts/swap/aggressive/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x51aa67982e68a104022e88a37a46efb6b04287a282033ab8688a35e52e7e7655\",\"license\":\"MIT\"},\"contracts/swap/aggressive/RevertReasonParser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\nlibrary RevertReasonParser {\\r\\n    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\\r\\n        // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\\r\\n        // We assume that revert reason is abi-encoded as Error(string)\\r\\n\\r\\n        // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\\r\\n        if (data.length >= 68 && data[0] == \\\"\\\\x08\\\" && data[1] == \\\"\\\\xc3\\\" && data[2] == \\\"\\\\x79\\\" && data[3] == \\\"\\\\xa0\\\") {\\r\\n            string memory reason;\\r\\n            // solhint-disable no-inline-assembly\\r\\n            assembly {\\r\\n                // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\\r\\n                reason := add(data, 68)\\r\\n            }\\r\\n            /*\\r\\n                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\\r\\n                also sometimes there is extra 32 bytes of zeros padded in the end:\\r\\n                https://github.com/ethereum/solidity/issues/10170\\r\\n                because of that we can't check for equality and instead check\\r\\n                that string length + extra 68 bytes is less than overall data length\\r\\n            */\\r\\n            require(data.length >= 68 + bytes(reason).length, \\\"Invalid revert reason\\\");\\r\\n            return string(abi.encodePacked(prefix, \\\"Error(\\\", reason, \\\")\\\"));\\r\\n        }\\r\\n        // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\\r\\n        else if (data.length == 36 && data[0] == \\\"\\\\x4e\\\" && data[1] == \\\"\\\\x48\\\" && data[2] == \\\"\\\\x7b\\\" && data[3] == \\\"\\\\x71\\\") {\\r\\n            uint256 code;\\r\\n            // solhint-disable no-inline-assembly\\r\\n            assembly {\\r\\n                // 36 = 32 bytes data length + 4-byte selector\\r\\n                code := mload(add(data, 36))\\r\\n            }\\r\\n            return string(abi.encodePacked(prefix, \\\"Panic(\\\", _toHex(code), \\\")\\\"));\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(prefix, \\\"Unknown(\\\", _toHex(data), \\\")\\\"));\\r\\n    }\\r\\n\\r\\n    function _toHex(uint256 value) private pure returns(string memory) {\\r\\n        return _toHex(abi.encodePacked(value));\\r\\n    }\\r\\n\\r\\n    function _toHex(bytes memory data) private pure returns(string memory) {\\r\\n        bytes16 alphabet = 0x30313233343536373839616263646566;\\r\\n        bytes memory str = new bytes(2 + data.length * 2);\\r\\n        str[0] = \\\"0\\\";\\r\\n        str[1] = \\\"x\\\";\\r\\n        for (uint256 i = 0; i < data.length; i++) {\\r\\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\\r\\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x4595a3e4186994891dcb34c95124a5491426ad7018a68a55094772ad32e61d4c\",\"license\":\"MIT\"},\"contracts/swap/aggressive/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x2c8388370e55c92685918acdafb0263e8e8882f56a50c7e922e4c8ba1c961aac\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant WAD = 10 ** 18;\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7d6656a8d66b238405e36506908726a329c023e7679a43c400e08a80e383d5fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\nlibrary UniERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n    IERC20 private constant _ZERO_ADDRESS = IERC20(0);\\r\\n\\r\\n    function isETH(IERC20 token) internal pure returns (bool) {\\r\\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\r\\n    }\\r\\n\\r\\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\r\\n        if (isETH(token)) {\\r\\n            return account.balance;\\r\\n        } else {\\r\\n            return token.balanceOf(account);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\\r\\n        if (amount > 0) {\\r\\n            if (isETH(token)) {\\r\\n                to.transfer(amount);\\r\\n            } else {\\r\\n                _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uniApprove(IERC20 token, address to, uint256 amount) internal {\\r\\n        require(!isETH(token), \\\"Approve called on ETH\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(abi.encodeWithSelector(token.approve.selector, to, amount));\\r\\n\\r\\n        if (!success || (returndata.length > 0 && !abi.decode(returndata, (bool)))) {\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, 0));\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, amount));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa23b2015828893a7d57349ff7ea22219b006f86f03a7fb3043275454e77a4e6\",\"license\":\"MIT\"},\"contracts/swap/aggressive/UnoswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./UniERC20.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./RevertReasonParser.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./ICTokenFactory.sol\\\";\\r\\nimport \\\"./ICERC20.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20Permit {\\r\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata cpath,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    // function swapExactTokensForTokensUnderlying(\\r\\n    //     uint amountIn,\\r\\n    //     uint amountOutMin,\\r\\n    //     address[] calldata path,\\r\\n    //     address to,\\r\\n    //     uint deadline\\r\\n    // ) external ensure(deadline) returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\ncontract Permitable {\\r\\n    event Error(\\r\\n        string reason\\r\\n    );\\r\\n\\r\\n    function _permit(IERC20 token, uint256 amount, bytes calldata permit) internal {\\r\\n        if (permit.length == 32 * 7) {\\r\\n            // solhint-disable-next-line avoid-low-level-calls\\r\\n            (bool success, bytes memory result) = address(token).call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\r\\n            if (!success) {\\r\\n                string memory reason = RevertReasonParser.parse(result, \\\"Permit call failed: \\\");\\r\\n                if (token.allowance(msg.sender, address(this)) < amount) {\\r\\n                    revert(reason);\\r\\n                } else {\\r\\n                    emit Error(reason);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract UnoswapRouter is Permitable {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    uint256 private constant _TRANSFER_FROM_CALL_SELECTOR_32 = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant _WETH_DEPOSIT_CALL_SELECTOR_32 = 0xd0e30db000000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant _WETH_WITHDRAW_CALL_SELECTOR_32 = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant _ERC20_TRANSFER_CALL_SELECTOR_32 = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant _ADDRESS_MASK =   0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\r\\n    uint256 private constant _REVERSE_MASK =   0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant _WETH_MASK =      0x4000000000000000000000000000000000000000000000000000000000000000;\\r\\n    // \\u7a33\\u5b9a\\u5e01\\u5151\\u6362\\r\\n    uint private constant _SWAP_CURVE    = 0x1000000000000000000000000000000000000000000000000000000000000000;\\r\\n    // ctoken \\u5151\\u6362\\r\\n    uint private constant _SWAP_COMPOUND = 0x0800000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n    // \\u5bf9\\u4e8e compound \\u4ea4\\u6613\\u6240, \\u76f4\\u63a5\\u5151\\u6362 ctoken \\r\\n    uint public constant FLAG_SWAP_DIRECT = 0x0400000000000000000000000000000000000000000000000000000000000000;\\r\\n    // \\u4f7f\\u7528 router \\u800c\\u4e0d\\u662f pair \\u6765\\u5151\\u6362\\r\\n    uint public constant FLAG_SWAP_ROUTER = 0x0200000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n    uint256 private constant _NUMERATOR_MASK = 0x0000000000000000ffffffff0000000000000000000000000000000000000000;\\r\\n    uint256 private _WETH =           0x000000000000000000000000C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    uint256 private constant _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 = 0x0902f1ac00000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 = 0x022c0d9f00000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant _DENOMINATOR = 1000000;\\r\\n    uint256 private constant _NUMERATOR_OFFSET = 160;\\r\\n\\r\\n    address public ctokenFactory;\\r\\n\\r\\n    receive() external payable {\\r\\n        // solhint-disable-next-line avoid-tx-origin\\r\\n        require(msg.sender != tx.origin, \\\"ETH deposit rejected\\\");\\r\\n    }\\r\\n\\r\\n    constructor(address _weth, address _ctokenFactory) public {\\r\\n        _WETH = uint(_weth);\\r\\n        ctokenFactory = _ctokenFactory;\\r\\n    }\\r\\n\\r\\n    // \\u6839\\u636e token \\u67e5\\u627e\\u5176 ctoken \\u5730\\u5740\\r\\n    function _getCtokenAddress(address _ctokenFactory, IERC20 token) private view returns (address) {\\r\\n        address ctoken = ICTokenFactory(_ctokenFactory).getCTokenAddressPure(address(token));\\r\\n\\r\\n        if (ctoken == address(0)) {\\r\\n            // \\u6b64\\u79cd\\u60c5\\u51b5\\u8ba4\\u4e3a token \\u5c31\\u662f ctoken\\r\\n            return address(token);\\r\\n        }\\r\\n        return ctoken;\\r\\n    }\\r\\n\\r\\n    // \\u6839\\u636e token \\u662f\\u5426\\u662f ctoken\\u3002 \\u5982\\u679c\\u662f ctoken, \\u5219\\u53ef\\u4ee5\\u627e\\u5230\\u5176\\u5bf9\\u5e94\\u7684token, cETH \\u5bf9\\u5e94\\u7684token \\u662f wETH\\r\\n    function _isCToken(address _ctokenFactory, address ctoken) private view returns (bool) {\\r\\n        if (address(ctoken) == address(0)) {\\r\\n            // ETH\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        address token = ICTokenFactory(_ctokenFactory).getTokenAddress(address(ctoken));\\r\\n\\r\\n        return token != address(0);\\r\\n    }\\r\\n\\r\\n    function unoswapWithPermit(\\r\\n        IERC20 srcToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        bytes32[] calldata pools,\\r\\n        bytes calldata permit\\r\\n    ) external payable returns(uint256 returnAmount) {\\r\\n        _permit(srcToken, amount, permit);\\r\\n        return _doSwap(address(srcToken), amount, minReturn, pools);\\r\\n    }\\r\\n\\r\\n    // \\u56e0\\u4e3a\\u9700\\u8981\\u4ea4\\u6613\\u6316\\u77ff\\u5fc5\\u987b\\u901a\\u8fc7router\\u6765\\u4ea4\\u6613\\r\\n    // struct MdexPoolArgs {\\r\\n    //     address router;\\r\\n    //     address[] path;\\r\\n    // }\\r\\n\\r\\n    struct SwapParm {\\r\\n        address srcToken;\\r\\n        address destToken;\\r\\n        uint routes;\\r\\n        uint returnAmt;\\r\\n        uint[] amts;\\r\\n        uint[] outAmts;\\r\\n        uint[] minOutAmts;\\r\\n        uint[] flags;\\r\\n        bytes32[][] pools;\\r\\n    }\\r\\n\\r\\n    // \\u540c\\u65f6\\u8c03\\u7528\\u591a\\u4e2a\\u4ea4\\u6613\\u6240\\u5151\\u6362\\r\\n    function unoswapAll(bytes calldata data) public payable returns(uint256 returnAmount) {\\r\\n        SwapParm memory param = abi.decode(data, (SwapParm));\\r\\n            console.log(\\\"srcToken: \\\", param.srcToken);\\r\\n            console.log(\\\"routes: \\\", param.routes);\\r\\n            console.log(\\\"returnAmt: \\\", param.returnAmt);\\r\\n\\r\\n        return _unoswapAll(param);\\r\\n    }\\r\\n\\r\\n    function _unoswapAll(SwapParm memory param) private returns(uint256 returnAmount) {\\r\\n        for (uint i = 0; i < param.routes; i ++) {\\r\\n            console.log(\\\"amts[%d]: \\\", i, param.amts[i]);\\r\\n            console.log(\\\"outAmts[%d]: \\\", i, param.outAmts[i]);\\r\\n            console.log(\\\"minOutAmts[%d]: \\\", i, param.minOutAmts[i]);\\r\\n            console.log(\\\"flags[%d]: \\\", i, param.flags[i]);\\r\\n            bytes32[] memory pool = param.pools[i];\\r\\n            for (uint j = 0; j < pool.length; j ++) {\\r\\n                console.log( j, uint(pool[j]));\\r\\n            }\\r\\n        }\\r\\n        // \\u7528\\u6237\\u5356\\u51fa\\u7684\\u5e01\\u662fctoken\\r\\n        // bool ctokenIn = _isCToken(ctokenFactory, param.srcToken);\\r\\n        // // \\u7528\\u6237\\u4e70\\u5165\\u7684\\u5e01\\u662fctoken\\r\\n        // bool ctokenOut = _isCToken(ctokenFactory, param.destToken);\\r\\n        // uint exchangeRateIn = 1e18;\\r\\n        // uint exchangeRateOut = 1e18;\\r\\n\\r\\n        // if (ctokenIn) {\\r\\n        //     exchangeRateIn = _calcExchangeRate(param.srcToken);\\r\\n        // }\\r\\n        // if (ctokenOut) {\\r\\n        //     exchangeRateOut = _calcExchangeRate(param.destToken);\\r\\n        // }\\r\\n\\r\\n        // uint[] memory amtOut;\\r\\n        for (uint i = 0; i < param.routes; i ++) {\\r\\n            uint flag = param.flags[i];\\r\\n            uint amtOut;\\r\\n\\r\\n            if ((flag & FLAG_SWAP_ROUTER) != 0) {\\r\\n                // swap by router\\r\\n                address router = address(uint(param.pools[i][0]) & _ADDRESS_MASK);\\r\\n                uint paths = param.pools[i].length - 1;\\r\\n                address[] memory path = new address[](paths);\\r\\n                for (uint j = 0; j < paths; j ++) {\\r\\n                    path[j] = address(uint(param.pools[i][j+1]) & _ADDRESS_MASK);\\r\\n                }\\r\\n                bool ctokenSwap = (flag & _SWAP_COMPOUND) != 0;\\r\\n                _swapByRouter(router, path, param.amts[i], param.minOutAmts[i], ctokenSwap);\\r\\n            } else {\\r\\n                // todo \\r\\n                // bytes32[] calldata pools = new bytes32[](param.pools.length);\\r\\n                require(flag == 0, \\\"here flag should be 0\\\");\\r\\n                amtOut = _doSwap((param.srcToken), param.amts[i], param.minOutAmts[i], param.pools[i]);\\r\\n            }\\r\\n            returnAmount += amtOut;\\r\\n        }\\r\\n        console.log(\\\"param.ret: real ret: \\\", param.returnAmt, returnAmount);\\r\\n        // return;\\r\\n    }\\r\\n\\r\\n    // \\u8ba1\\u7b97 ctoken \\u7684 exchange rate \\u5df2\\u7ecf\\u4e58\\u4e86 e18\\r\\n    function _calcExchangeRate(address token) private view returns (uint) {\\r\\n        ICERC20 ctoken = ICERC20(_getCtokenAddress(ctokenFactory, IERC20(token)));\\r\\n\\r\\n        uint rate = ctoken.exchangeRateStored();\\r\\n        uint supplyRate = ctoken.supplyRatePerBlock();\\r\\n        uint lastBlock = ctoken.accrualBlockNumber();\\r\\n        uint blocks = block.number.sub(lastBlock);\\r\\n        uint inc = rate.mul(supplyRate).mul(blocks);\\r\\n        return rate.add(inc);\\r\\n    }\\r\\n\\r\\n    function _swap(address pair, address dst, uint amt, uint feeRate, bool reversed) private returns (uint ret) {\\r\\n        (uint r0, uint r1) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (reversed) {\\r\\n            uint tmp = r0;\\r\\n            r0 = r1;\\r\\n            r1 = tmp;\\r\\n        }\\r\\n        uint amtIn = amt.mul(feeRate);\\r\\n        ret = amtIn.mul(r1).div(amtIn + r0 * _DENOMINATOR);\\r\\n\\r\\n        console.log(\\\"amtIn: %d feeRate: %d amtOut: %d\\\", amt, feeRate, ret);\\r\\n        if (reversed) {\\r\\n            IUniswapV2Pair(pair).swap(ret, 0, dst, new bytes(0));\\r\\n        } else {\\r\\n            IUniswapV2Pair(pair).swap(0, ret, dst, new bytes(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // \\u901a\\u8fc7 router \\u6765 swap\\r\\n    function _swapByRouter(address router, address[] memory path, uint amt, uint amtOut, bool ctokenSwap) private {\\r\\n        uint deadline = block.timestamp + 60;\\r\\n\\r\\n        console.log(\\\"_swapByRouter:\\\", router, amt, amtOut);\\r\\n        if (path[0] == address(0)) {\\r\\n            // swapExactETHForTokens\\r\\n            // solhint-disable-next-line avoid-low-level-calls\\r\\n            if (ctokenSwap) {\\r\\n                // solhint-disable-next-line avoid-low-level-calls\\r\\n                router.call{value: amt}(abi.encodeWithSelector(IEBankV2Router.swapExactETHForTokensUnderlying.selector,\\r\\n                                                                amtOut, path, msg.sender, deadline));\\r\\n            } else {\\r\\n                // solhint-disable-next-line avoid-low-level-calls\\r\\n                router.call{value: amt}(abi.encodeWithSelector(IUniswapV2Router.swapExactETHForTokens.selector, amtOut, path, msg.sender, deadline));\\r\\n            }\\r\\n        } else {\\r\\n            if (path[path.length-1] == address(0)) {\\r\\n                // swapExactTokensForETH\\r\\n                // solhint-disable-next-line avoid-low-level-calls\\r\\n                if (ctokenSwap) {\\r\\n                    // solhint-disable-next-line avoid-low-level-calls\\r\\n                    router.call(abi.encodeWithSelector(IEBankV2Router.swapExactTokensForETHUnderlying.selector,\\r\\n                                                        amt, amtOut, path, address(this), deadline));\\r\\n                } else {\\r\\n                    // solhint-disable-next-line avoid-low-level-calls\\r\\n                    router.call(abi.encodeWithSelector(IUniswapV2Router.swapExactTokensForETH.selector, amt, amtOut, path, address(this), deadline));\\r\\n                }\\r\\n            } else {\\r\\n                if (ctokenSwap) {\\r\\n                    // solhint-disable-next-line avoid-low-level-calls\\r\\n                    router.call(abi.encodeWithSelector(IEBankV2Router.swapExactTokensForTokensUnderlying.selector,\\r\\n                                                        amt, amtOut, path, msg.sender, deadline));\\r\\n                } else {\\r\\n                    // swapExactTokensForTokens\\r\\n                    // solhint-disable-next-line avoid-low-level-calls\\r\\n                    router.call(abi.encodeWithSelector(IUniswapV2Router.swapExactTokensForTokens.selector, amt, amtOut, path, msg.sender, deadline));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _doSwap(address srcToken, uint amt, uint minOutAmt, bytes32[] memory datas) private returns (uint ret) {\\r\\n        address pair = address(uint256(datas[0]) & _ADDRESS_MASK);\\r\\n\\r\\n        // address srcReal;\\r\\n        if (srcToken == address(0)) {\\r\\n            IWETH(_WETH).deposit{value: amt}();\\r\\n            IERC20(_WETH).transfer(pair, amt);\\r\\n            // srcReal = _WETH;\\r\\n        } else {\\r\\n            TransferHelper.safeTransferFrom(srcToken, msg.sender, pair, amt);\\r\\n            // srcReal = srcToken;\\r\\n        }\\r\\n\\r\\n        uint data;\\r\\n        uint feeRate;\\r\\n        bool reversed;\\r\\n        ret = amt;\\r\\n        for (uint i = 0; i < datas.length - 1; i ++) {\\r\\n            data = uint((datas[i]));\\r\\n            reversed = (data & _REVERSE_MASK) != 0;\\r\\n            feeRate = (data & _NUMERATOR_MASK) >> 160;\\r\\n            address nextPair = address(uint(datas[i+1]) & _ADDRESS_MASK);\\r\\n\\r\\n            ret = _swap(pair, nextPair, ret, feeRate, reversed);\\r\\n            pair = nextPair;\\r\\n        }\\r\\n\\r\\n        data = uint(datas[datas.length - 1]);\\r\\n        reversed = (data & _REVERSE_MASK) != 0;\\r\\n        feeRate = (data & _NUMERATOR_MASK) >> 160;\\r\\n        pair = address(data & _ADDRESS_MASK);\\r\\n        bool wethOut = (data & _WETH_MASK) != 0;\\r\\n        // last\\r\\n        if (wethOut) {\\r\\n            ret = _swap(pair, address(this), ret, feeRate, reversed);\\r\\n            require(ret >= minOutAmt, \\\"not enough weth out\\\");\\r\\n            IWETH(_WETH).withdraw(ret);\\r\\n            TransferHelper.safeTransferETH(msg.sender, ret);\\r\\n        } else {\\r\\n            console.log(\\\"amtIn:\\\", ret);\\r\\n            ret = _swap(pair, msg.sender, ret, feeRate, reversed);\\r\\n            console.log(pair, ret, minOutAmt);\\r\\n            require(ret >= minOutAmt, \\\"not enough out\\\");\\r\\n        }\\r\\n    }\\r\\n    /*\\r\\n    function unoswap(\\r\\n        IERC20 srcToken,\\r\\n        uint256 amount,     // \\u8f93\\u5165\\r\\n        uint256 minReturn,\\r\\n        bytes32[] calldata // pools\\r\\n    ) public payable returns(uint256 returnAmount) {\\r\\n        assembly {  // solhint-disable-line no-inline-assembly\\r\\n            function reRevert() {\\r\\n                returndatacopy(0, 0, returndatasize())\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n\\r\\n            function revertWithReason(m, len) {\\r\\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\r\\n                mstore(0x20, 0x0000002000000000000000000000000000000000000000000000000000000000)\\r\\n                mstore(0x40, m)\\r\\n                revert(0, len)\\r\\n            }\\r\\n\\r\\n            function swap(emptyPtr, swapAmount, pair, reversed, numerator, dst) -> ret {\\r\\n                mstore(emptyPtr, _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\\r\\n                if iszero(staticcall(gas(), pair, emptyPtr, 0x4, emptyPtr, 0x40)) {\\r\\n                    reRevert()\\r\\n                }\\r\\n\\r\\n                let reserve0 := mload(emptyPtr)\\r\\n                let reserve1 := mload(add(emptyPtr, 0x20))\\r\\n                if reversed {\\r\\n                    let tmp := reserve0\\r\\n                    reserve0 := reserve1\\r\\n                    reserve1 := tmp\\r\\n                }\\r\\n                ret := mul(swapAmount, numerator)\\r\\n                ret := div(mul(ret, reserve1), add(ret, mul(reserve0, _DENOMINATOR)))\\r\\n\\r\\n                mstore(emptyPtr, _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\\r\\n                switch reversed\\r\\n                case 0 {\\r\\n                    mstore(add(emptyPtr, 0x04), 0)\\r\\n                    mstore(add(emptyPtr, 0x24), ret)\\r\\n                }\\r\\n                default {\\r\\n                    mstore(add(emptyPtr, 0x04), ret)\\r\\n                    mstore(add(emptyPtr, 0x24), 0)\\r\\n                }\\r\\n                mstore(add(emptyPtr, 0x44), dst)\\r\\n                mstore(add(emptyPtr, 0x64), 0x80)\\r\\n                mstore(add(emptyPtr, 0x84), 0)\\r\\n                if iszero(call(gas(), pair, 0, emptyPtr, 0xa4, 0, 0)) {\\r\\n                    reRevert()\\r\\n                }\\r\\n            }\\r\\n\\r\\n            let emptyPtr := mload(0x40)\\r\\n            mstore(0x40, add(emptyPtr, 0xc0))\\r\\n\\r\\n            let poolsOffset := add(calldataload(0x64), 0x4)   // 0x64 \\u5730\\u5740\\u4fdd\\u5b58\\u7684\\u662f pool end offset \\u7684\\u504f\\u79fb\\uff0c\\u4f8b\\u5982 0x80\\r\\n            let poolsEndOffset := calldataload(poolsOffset)   // \\u591a\\u5c11\\u4e2a pool\\r\\n            poolsOffset := add(poolsOffset, 0x20)             // pair \\u5730\\u5740\\r\\n            poolsEndOffset := add(poolsOffset, mul(0x20, poolsEndOffset))\\r\\n            let rawPair := calldataload(poolsOffset)\\r\\n            switch srcToken\\r\\n            case 0 {\\r\\n                if iszero(eq(amount, callvalue())) {\\r\\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55)  // \\\"invalid msg.value\\\"\\r\\n                }\\r\\n\\r\\n                mstore(emptyPtr, _WETH_DEPOSIT_CALL_SELECTOR_32)\\r\\n                if iszero(call(gas(), _WETH, amount, emptyPtr, 0x4, 0, 0)) {\\r\\n                    reRevert()\\r\\n                }\\r\\n\\r\\n                mstore(emptyPtr, _ERC20_TRANSFER_CALL_SELECTOR_32)\\r\\n                mstore(add(emptyPtr, 0x4), and(rawPair, _ADDRESS_MASK))\\r\\n                mstore(add(emptyPtr, 0x24), amount)\\r\\n                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x44, 0, 0)) {\\r\\n                    reRevert()\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                if callvalue() {\\r\\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55)  // \\\"invalid msg.value\\\"\\r\\n                }\\r\\n\\r\\n                mstore(emptyPtr, _TRANSFER_FROM_CALL_SELECTOR_32)\\r\\n                mstore(add(emptyPtr, 0x4), caller())\\r\\n                mstore(add(emptyPtr, 0x24), and(rawPair, _ADDRESS_MASK))\\r\\n                mstore(add(emptyPtr, 0x44), amount)\\r\\n                if iszero(call(gas(), srcToken, 0, emptyPtr, 0x64, 0, 0)) {\\r\\n                    reRevert()\\r\\n                }\\r\\n            }\\r\\n\\r\\n            returnAmount := amount\\r\\n\\r\\n            for {let i := add(poolsOffset, 0x20)} lt(i, poolsEndOffset) {i := add(i, 0x20)} {\\r\\n                let nextRawPair := calldataload(i)\\r\\n\\r\\n                returnAmount := swap(\\r\\n                    emptyPtr,\\r\\n                    returnAmount,\\r\\n                    and(rawPair, _ADDRESS_MASK),\\r\\n                    and(rawPair, _REVERSE_MASK),\\r\\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\\r\\n                    and(nextRawPair, _ADDRESS_MASK)\\r\\n                )\\r\\n\\r\\n                rawPair := nextRawPair\\r\\n            }\\r\\n\\r\\n            switch and(rawPair, _WETH_MASK)\\r\\n            case 0 {\\r\\n                returnAmount := swap(\\r\\n                    emptyPtr,\\r\\n                    returnAmount,\\r\\n                    and(rawPair, _ADDRESS_MASK),\\r\\n                    and(rawPair, _REVERSE_MASK),\\r\\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\\r\\n                    caller()\\r\\n                )\\r\\n            }\\r\\n            default {\\r\\n                returnAmount := swap(\\r\\n                    emptyPtr,\\r\\n                    returnAmount,\\r\\n                    and(rawPair, _ADDRESS_MASK),\\r\\n                    and(rawPair, _REVERSE_MASK),\\r\\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\\r\\n                    address()\\r\\n                )\\r\\n\\r\\n                mstore(emptyPtr, _WETH_WITHDRAW_CALL_SELECTOR_32)\\r\\n                mstore(add(emptyPtr, 0x04), returnAmount)\\r\\n                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x24, 0, 0)) {\\r\\n                    reRevert()\\r\\n                }\\r\\n\\r\\n                if iszero(call(gas(), caller(), returnAmount, 0, 0, 0, 0)) {\\r\\n                    reRevert()\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if lt(returnAmount, minReturn) {\\r\\n                revertWithReason(0x000000164d696e2072657475726e206e6f742072656163686564000000000000, 0x5a)  // \\\"Min return not reached\\\"\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    */\\r\\n}\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0e27fc3c0f839444160131691d809ceed07eb8d35fdd1cf6281405b6401f05d4\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26000553480156200002957600080fd5b50604051620027d6380380620027d68339810160408190526200004c9162000075565b6001600160a01b03918216600055600180546001600160a01b03191691909216179055620000cc565b6000806040838503121562000088578182fd5b82516200009581620000b3565b6020840151909250620000a881620000b3565b809150509250929050565b6001600160a01b0381168114620000c957600080fd5b50565b6126fa80620000dc6000396000f3fe60806040526004361061005e5760003560e01c8063757607f811610043578063757607f8146100de578063a1251d75146100f3578063c7a82811146101065761008e565b806325c9e276146100935780634dbbf9ec146100be5761008e565b3661008e573332141561008c5760405162461bcd60e51b8152600401610083906123c7565b60405180910390fd5b005b600080fd5b34801561009f57600080fd5b506100a861011b565b6040516100b591906121e0565b60405180910390f35b6100d16100cc366004611d9e565b61012a565b6040516100b591906121d7565b3480156100ea57600080fd5b506100d161021e565b6100d1610101366004611dde565b610226565b34801561011257600080fd5b506100d161027f565b6001546001600160a01b031681565b6000610134611bad565b61014083850185611e9e565b90506101856040518060400160405280600a81526020017f737263546f6b656e3a200000000000000000000000000000000000000000000081525082600001516102a3565b6101c86040518060400160405280600881526020017f726f757465733a200000000000000000000000000000000000000000000000008152508260400151610305565b61020b6040518060400160405280600b81526020017f72657475726e416d743a200000000000000000000000000000000000000000008152508260600151610305565b61021481610363565b9150505b92915050565b600160f91b81565b600061023488888585610778565b61027388888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061093592505050565b98975050505050505050565b7f040000000000000000000000000000000000000000000000000000000000000081565b61030182826040516024016102b99291906122b7565b60408051601f198184030181529190526020810180516001600160e01b03167f319af33300000000000000000000000000000000000000000000000000000000179052610c80565b5050565b610301828260405160240161031b92919061231a565b60408051601f198184030181529190526020810180516001600160e01b03167f9710a9d000000000000000000000000000000000000000000000000000000000179052610c80565b6000805b8260400151811015610503576103ca6040518060400160405280600a81526020017f616d74735b25645d3a200000000000000000000000000000000000000000000081525082856080015184815181106103bd57fe5b6020026020010151610ca1565b6104146040518060400160405280600d81526020017f6f7574416d74735b25645d3a2000000000000000000000000000000000000000815250828560a0015184815181106103bd57fe5b61045e6040518060400160405280601081526020017f6d696e4f7574416d74735b25645d3a2000000000000000000000000000000000815250828560c0015184815181106103bd57fe5b6104a86040518060400160405280600b81526020017f666c6167735b25645d3a20000000000000000000000000000000000000000000815250828560e0015184815181106103bd57fe5b606083610100015182815181106104bb57fe5b6020026020010151905060005b81518110156104f9576104f1818383815181106104e157fe5b602002602001015160001c610d06565b6001016104c8565b5050600101610367565b5060005b826040015181101561072e5760008360e00151828151811061052557fe5b602002602001015190506000600160f91b82166000146106a95760006001600160a01b03866101000151858151811061055a57fe5b602002602001015160008151811061056e57fe5b602002602001015160001c16905060006001876101000151868151811061059157fe5b60200260200101515103905060608167ffffffffffffffff811180156105b657600080fd5b506040519080825280602002602001820160405280156105e0578160200160208202803683370190505b50905060005b82811015610655576001600160a01b03896101000151888151811061060757fe5b6020026020010151826001018151811061061d57fe5b602002602001015160001c1682828151811061063557fe5b6001600160a01b03909216602092830291909101909101526001016105e6565b506000600160fb1b86166000141590506106a084838b608001518a8151811061067a57fe5b60200260200101518c60c001518b8151811061069257fe5b602002602001015185610d64565b50505050610720565b81156106c75760405162461bcd60e51b815260040161008390612390565b61071d8560000151866080015185815181106106df57fe5b60200260200101518760c0015186815181106106f757fe5b6020026020010151886101000151878151811061071057fe5b6020026020010151610935565b90505b929092019150600101610507565b506107736040518060400160405280601581526020017f706172616d2e7265743a207265616c207265743a200000000000000000000000815250836060015183610ca1565b919050565b60e081141561092f5760006060856001600160a01b031663d505accf60e01b85856040516020016107ab9392919061207f565b60408051601f19818403018152908290526107c5916120a3565b6000604051808303816000865af19150503d8060008114610802576040519150601f19603f3d011682016040523d82523d6000602084013e610807565b606091505b50915091508161092c576060610852826040518060400160405280601481526020017f5065726d69742063616c6c206661696c65643a200000000000000000000000008152506111ae565b905085876001600160a01b031663dd62ed3e33306040518363ffffffff1660e01b81526004016108839291906121f4565b60206040518083038186803b15801561089b57600080fd5b505afa1580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d39190611fd5565b10156108f3578060405162461bcd60e51b815260040161008391906122a4565b7f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa8160405161092291906122a4565b60405180910390a1505b50505b50505050565b6000806001600160a01b038360008151811061094d57fe5b60209081029190910101511690506001600160a01b038616610a47576000546001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b1580156109a657600080fd5b505af11580156109ba573d6000803e3d6000fd5b50505050506000546001600160a01b031663a9059cbb82876040518363ffffffff1660e01b81526004016109ef929190612232565b602060405180830381600087803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190611d7e565b50610a53565b610a538633838861148a565b600080600087945060005b6001875103811015610af157868181518110610a7657fe5b602002602001015160001c9350600160ff1b841660001415915060a077ffffffff00000000000000000000000000000000000000008516901c925060006001600160a01b03888360010181518110610aca57fe5b602002602001015160001c169050610ae58682898787611573565b96509450600101610a5e565b5085600187510381518110610b0257fe5b60209081029190910101516001600160a01b03811694509250505060a081901c63ffffffff16600160ff1b821615157f4000000000000000000000000000000000000000000000000000000000000000831615801590610bfa57610b698530888686611573565b955087861015610b8b5760405162461bcd60e51b8152600401610083906123fe565b6000546001600160a01b0316632e1a7d4d876040518263ffffffff1660e01b8152600401610bb991906121d7565b600060405180830381600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b50505050610bf53387611759565b610c73565b610c396040518060400160405280600681526020017f616d74496e3a000000000000000000000000000000000000000000000000000081525087610305565b610c468533888686611573565b9550610c5385878a6117e6565b87861015610c735760405162461bcd60e51b815260040161008390612526565b5050505050949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b610d01838383604051602401610cb99392919061233c565b60408051601f198184030181529190526020810180516001600160e01b03167f969cdd0300000000000000000000000000000000000000000000000000000000179052610c80565b505050565b6103018282604051602401610d1c9291906125ef565b60408051601f198184030181529190526020810180516001600160e01b03167f6c0f698000000000000000000000000000000000000000000000000000000000179052610c80565b60408051808201909152600e81527f5f737761704279526f757465723a0000000000000000000000000000000000006020820152603c420190610da990878686611846565b60006001600160a01b031685600081518110610dc157fe5b60200260200101516001600160a01b03161415610f43578115610e9057856001600160a01b03168463ee41be8e60e01b85883386604051602401610e0894939291906125ba565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610e4691906120a3565b60006040518083038185875af1925050503d8060008114610e83576040519150601f19603f3d011682016040523d82523d6000602084013e610e88565b606091505b505050610f3e565b856001600160a01b031684637ff36ab560e01b85883386604051602401610eba94939291906125ba565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610ef891906120a3565b60006040518083038185875af1925050503d8060008114610f35576040519150601f19603f3d011682016040523d82523d6000602084013e610f3a565b606091505b5050505b61092c565b60006001600160a01b031685600187510381518110610f5e57fe5b60200260200101516001600160a01b031614156110c757811561102157856001600160a01b0316638e750db960e01b8585883086604051602401610fa69594939291906125fd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610fe491906120a3565b6000604051808303816000865af19150503d8060008114610e83576040519150601f19603f3d011682016040523d82523d6000602084013e610e88565b856001600160a01b03166318cbafe560e01b858588308660405160240161104c9594939291906125fd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161108a91906120a3565b6000604051808303816000865af19150503d8060008114610f35576040519150601f19603f3d011682016040523d82523d6000602084013e610f3a565b81156110f857856001600160a01b0316633eabf55f60e01b858588338660405160240161104c9594939291906125fd565b856001600160a01b03166338ed173960e01b85858833866040516024016111239594939291906125fd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161116191906120a3565b6000604051808303816000865af19150503d806000811461119e576040519150601f19603f3d011682016040523d82523d6000602084013e6111a3565b606091505b505050505050505050565b606060448351101580156111e15750826000815181106111ca57fe5b6020910101516001600160f81b031916600160fb1b145b80156112285750826001815181106111f557fe5b6020910101516001600160f81b0319167fc300000000000000000000000000000000000000000000000000000000000000145b801561126f57508260028151811061123c57fe5b6020910101516001600160f81b0319167f7900000000000000000000000000000000000000000000000000000000000000145b80156112b657508260038151811061128357fe5b6020910101516001600160f81b0319167fa000000000000000000000000000000000000000000000000000000000000000145b156113125760606044840190508051604401845110156112e85760405162461bcd60e51b815260040161008390612492565b82816040516020016112fb92919061218b565b604051602081830303815290604052915050610218565b8251602414801561135e57508260008151811061132b57fe5b6020910101516001600160f81b0319167f4e00000000000000000000000000000000000000000000000000000000000000145b80156113a557508260018151811061137257fe5b6020910101516001600160f81b0319167f4800000000000000000000000000000000000000000000000000000000000000145b80156113ec5750826002815181106113b957fe5b6020910101516001600160f81b0319167f7b00000000000000000000000000000000000000000000000000000000000000145b801561143357508260038151811061140057fe5b6020910101516001600160f81b0319167f7100000000000000000000000000000000000000000000000000000000000000145b1561145857602483015182611447826118a8565b6040516020016112fb9291906120bf565b81611462846118ce565b604051602001611473929190612125565b604051602081830303815290604052905092915050565b60006060856001600160a01b03166323b872dd8686866040516024016114b29392919061220e565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516114eb91906120a3565b6000604051808303816000865af19150503d8060008114611528576040519150601f19603f3d011682016040523d82523d6000602084013e61152d565b606091505b50915091508180156115575750805115806115575750808060200190518101906115579190611d7e565b61092c5760405162461bcd60e51b81526004016100839061255d565b6000806000876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b1580156115b057600080fd5b505afa1580156115c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e89190611fed565b9150915083156115f457905b60006116008787611a91565b905061161d620f4240840282016116178385611a91565b90611ad2565b93506116606040518060400160405280602081526020017f616d74496e3a20256420666565526174653a20256420616d744f75743a202564815250888887611b14565b84156116db57604080516000808252602082019283905263022c0d9f60e01b9092526001600160a01b038b169163022c0d9f916116a49188918d906024810161226c565b600060405180830381600087803b1580156116be57600080fd5b505af11580156116d2573d6000803e3d6000fd5b5050505061174d565b604080516000808252602082019283905263022c0d9f60e01b9092526001600160a01b038b169163022c0d9f9161171a919088908d906024810161226c565b600060405180830381600087803b15801561173457600080fd5b505af1158015611748573d6000803e3d6000fd5b505050505b50505095945050505050565b604080516000808252602082019092526001600160a01b03841690839060405161178391906120a3565b60006040518083038185875af1925050503d80600081146117c0576040519150601f19603f3d011682016040523d82523d6000602084013e6117c5565b606091505b5050905080610d015760405162461bcd60e51b8152600401610083906124c9565b610d018383836040516024016117fe9392919061224b565b60408051601f198184030181529190526020810180516001600160e01b03167f8786135e00000000000000000000000000000000000000000000000000000000179052610c80565b61092f8484848460405160240161186094939291906122e2565b60408051601f198184030181529190526020810180516001600160e01b03167fdaa394bd00000000000000000000000000000000000000000000000000000000179052610c80565b6060610218826040516020016118be91906121d7565b6040516020818303038152906040525b80516060907f303132333435363738396162636465660000000000000000000000000000000090829060029081020167ffffffffffffffff8111801561191357600080fd5b506040519080825280601f01601f19166020018201604052801561193e576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061196f57fe5b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106119b457fe5b60200101906001600160f81b031916908160001a90535060005b8451811015611a89578260048683815181106119e657fe5b01602001516001600160f81b031916901c60f81c60108110611a0457fe5b1a60f81b828260020260020181518110611a1a57fe5b60200101906001600160f81b031916908160001a90535082858281518110611a3e57fe5b60209101015160f81c600f1660108110611a5457fe5b1a60f81b828260020260030181518110611a6a57fe5b60200101906001600160f81b031916908160001a9053506001016119ce565b509392505050565b600082611aa057506000610218565b82820282848281611aad57fe5b0414611acb5760405162461bcd60e51b815260040161008390612435565b9392505050565b6000611acb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611b76565b61092f84848484604051602401611b2e9493929190612361565b60408051601f198184030181529190526020810180516001600160e01b03167f08ee566600000000000000000000000000000000000000000000000000000000179052610c80565b60008183611b975760405162461bcd60e51b815260040161008391906122a4565b506000838581611ba357fe5b0495945050505050565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160608152602001606081526020016060815260200160608152602001606081525090565b8035610218816126ac565b600082601f830112611c26578081fd5b8135611c39611c3482612660565b612639565b818152915060208083019084810160005b84811015611cce578135870188603f820112611c6557600080fd5b83810135611c75611c3482612660565b818152858101906040848101888502860182018e1015611c9457600080fd5b600095505b84861015611cb7578035845260019590950194928801928801611c99565b505087525050509282019290820190600101611c4a565b505050505092915050565b600082601f830112611ce9578081fd5b8135611cf7611c3482612660565b818152915060208083019084810181840286018201871015611d1857600080fd5b60005b84811015611cce57813584529282019290820190600101611d1b565b60008083601f840112611d48578182fd5b50813567ffffffffffffffff811115611d5f578182fd5b602083019150836020828501011115611d7757600080fd5b9250929050565b600060208284031215611d8f578081fd5b81518015158114611acb578182fd5b60008060208385031215611db0578081fd5b823567ffffffffffffffff811115611dc6578182fd5b611dd285828601611d37565b90969095509350505050565b600080600080600080600060a0888a031215611df8578283fd5b8735611e03816126ac565b96506020880135955060408801359450606088013567ffffffffffffffff80821115611e2d578485fd5b818a0191508a601f830112611e40578485fd5b813581811115611e4e578586fd5b8b60208083028501011115611e61578586fd5b6020830196508095505060808a0135915080821115611e7e578384fd5b50611e8b8a828b01611d37565b989b979a50959850939692959293505050565b600060208284031215611eaf578081fd5b813567ffffffffffffffff80821115611ec6578283fd5b8184019150610120808387031215611edc578384fd5b611ee581612639565b9050611ef18684611c0b565b8152611f008660208501611c0b565b60208201526040830135604082015260608301356060820152608083013582811115611f2a578485fd5b611f3687828601611cd9565b60808301525060a083013582811115611f4d578485fd5b611f5987828601611cd9565b60a08301525060c083013582811115611f70578485fd5b611f7c87828601611cd9565b60c08301525060e083013582811115611f93578485fd5b611f9f87828601611cd9565b60e0830152506101008084013583811115611fb8578586fd5b611fc488828701611c16565b918301919091525095945050505050565b600060208284031215611fe6578081fd5b5051919050565b60008060408385031215611fff578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156120485781516001600160a01b031687529582019590820190600101612023565b509495945050505050565b6000815180845261206b816020860160208601612680565b601f01601f19169290920160200192915050565b60006001600160e01b03198516825282846004840137910160040190815292915050565b600082516120b5818460208701612680565b9190910192915050565b600083516120d1818460208801612680565b7f50616e6963280000000000000000000000000000000000000000000000000000908301908152835161210b816006840160208801612680565b602960f81b60069290910191820152600701949350505050565b60008351612137818460208801612680565b7f556e6b6e6f776e280000000000000000000000000000000000000000000000009083019081528351612171816008840160208801612680565b602960f81b60089290910191820152600901949350505050565b6000835161219d818460208801612680565b7f4572726f72280000000000000000000000000000000000000000000000000000908301908152835161210b816006840160208801612680565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60008582528460208301526001600160a01b03841660408301526080606083015261229a6080830184612053565b9695505050505050565b600060208252611acb6020830184612053565b6000604082526122ca6040830185612053565b90506001600160a01b03831660208301529392505050565b6000608082526122f56080830187612053565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b60006040825261232d6040830185612053565b90508260208301529392505050565b60006060825261234f6060830186612053565b60208301949094525060400152919050565b6000608082526123746080830187612053565b6020830195909552506040810192909252606090910152919050565b60208082526015908201527f6865726520666c61672073686f756c6420626520300000000000000000000000604082015260600190565b60208082526014908201527f455448206465706f7369742072656a6563746564000000000000000000000000604082015260600190565b60208082526013908201527f6e6f7420656e6f7567682077657468206f757400000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f496e76616c69642072657665727420726561736f6e0000000000000000000000604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201527f4c45440000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f6e6f7420656e6f756768206f7574000000000000000000000000000000000000604082015260600190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160408201527f494c454400000000000000000000000000000000000000000000000000000000606082015260800190565b6000858252608060208301526125d36080830186612010565b6001600160a01b03949094166040830152506060015292915050565b918252602082015260400190565b600086825285602083015260a0604083015261261c60a0830186612010565b6001600160a01b0394909416606083015250608001529392505050565b60405181810167ffffffffffffffff8111828210171561265857600080fd5b604052919050565b600067ffffffffffffffff821115612676578081fd5b5060209081020190565b60005b8381101561269b578181015183820152602001612683565b8381111561092f5750506000910152565b6001600160a01b03811681146126c157600080fd5b5056fea2646970667358221220a107310d81b3941e7473a63d4cbfbc2d9feeebd0b084e9d72e20eec14a239d2f64736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061005e5760003560e01c8063757607f811610043578063757607f8146100de578063a1251d75146100f3578063c7a82811146101065761008e565b806325c9e276146100935780634dbbf9ec146100be5761008e565b3661008e573332141561008c5760405162461bcd60e51b8152600401610083906123c7565b60405180910390fd5b005b600080fd5b34801561009f57600080fd5b506100a861011b565b6040516100b591906121e0565b60405180910390f35b6100d16100cc366004611d9e565b61012a565b6040516100b591906121d7565b3480156100ea57600080fd5b506100d161021e565b6100d1610101366004611dde565b610226565b34801561011257600080fd5b506100d161027f565b6001546001600160a01b031681565b6000610134611bad565b61014083850185611e9e565b90506101856040518060400160405280600a81526020017f737263546f6b656e3a200000000000000000000000000000000000000000000081525082600001516102a3565b6101c86040518060400160405280600881526020017f726f757465733a200000000000000000000000000000000000000000000000008152508260400151610305565b61020b6040518060400160405280600b81526020017f72657475726e416d743a200000000000000000000000000000000000000000008152508260600151610305565b61021481610363565b9150505b92915050565b600160f91b81565b600061023488888585610778565b61027388888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061093592505050565b98975050505050505050565b7f040000000000000000000000000000000000000000000000000000000000000081565b61030182826040516024016102b99291906122b7565b60408051601f198184030181529190526020810180516001600160e01b03167f319af33300000000000000000000000000000000000000000000000000000000179052610c80565b5050565b610301828260405160240161031b92919061231a565b60408051601f198184030181529190526020810180516001600160e01b03167f9710a9d000000000000000000000000000000000000000000000000000000000179052610c80565b6000805b8260400151811015610503576103ca6040518060400160405280600a81526020017f616d74735b25645d3a200000000000000000000000000000000000000000000081525082856080015184815181106103bd57fe5b6020026020010151610ca1565b6104146040518060400160405280600d81526020017f6f7574416d74735b25645d3a2000000000000000000000000000000000000000815250828560a0015184815181106103bd57fe5b61045e6040518060400160405280601081526020017f6d696e4f7574416d74735b25645d3a2000000000000000000000000000000000815250828560c0015184815181106103bd57fe5b6104a86040518060400160405280600b81526020017f666c6167735b25645d3a20000000000000000000000000000000000000000000815250828560e0015184815181106103bd57fe5b606083610100015182815181106104bb57fe5b6020026020010151905060005b81518110156104f9576104f1818383815181106104e157fe5b602002602001015160001c610d06565b6001016104c8565b5050600101610367565b5060005b826040015181101561072e5760008360e00151828151811061052557fe5b602002602001015190506000600160f91b82166000146106a95760006001600160a01b03866101000151858151811061055a57fe5b602002602001015160008151811061056e57fe5b602002602001015160001c16905060006001876101000151868151811061059157fe5b60200260200101515103905060608167ffffffffffffffff811180156105b657600080fd5b506040519080825280602002602001820160405280156105e0578160200160208202803683370190505b50905060005b82811015610655576001600160a01b03896101000151888151811061060757fe5b6020026020010151826001018151811061061d57fe5b602002602001015160001c1682828151811061063557fe5b6001600160a01b03909216602092830291909101909101526001016105e6565b506000600160fb1b86166000141590506106a084838b608001518a8151811061067a57fe5b60200260200101518c60c001518b8151811061069257fe5b602002602001015185610d64565b50505050610720565b81156106c75760405162461bcd60e51b815260040161008390612390565b61071d8560000151866080015185815181106106df57fe5b60200260200101518760c0015186815181106106f757fe5b6020026020010151886101000151878151811061071057fe5b6020026020010151610935565b90505b929092019150600101610507565b506107736040518060400160405280601581526020017f706172616d2e7265743a207265616c207265743a200000000000000000000000815250836060015183610ca1565b919050565b60e081141561092f5760006060856001600160a01b031663d505accf60e01b85856040516020016107ab9392919061207f565b60408051601f19818403018152908290526107c5916120a3565b6000604051808303816000865af19150503d8060008114610802576040519150601f19603f3d011682016040523d82523d6000602084013e610807565b606091505b50915091508161092c576060610852826040518060400160405280601481526020017f5065726d69742063616c6c206661696c65643a200000000000000000000000008152506111ae565b905085876001600160a01b031663dd62ed3e33306040518363ffffffff1660e01b81526004016108839291906121f4565b60206040518083038186803b15801561089b57600080fd5b505afa1580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d39190611fd5565b10156108f3578060405162461bcd60e51b815260040161008391906122a4565b7f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa8160405161092291906122a4565b60405180910390a1505b50505b50505050565b6000806001600160a01b038360008151811061094d57fe5b60209081029190910101511690506001600160a01b038616610a47576000546001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b1580156109a657600080fd5b505af11580156109ba573d6000803e3d6000fd5b50505050506000546001600160a01b031663a9059cbb82876040518363ffffffff1660e01b81526004016109ef929190612232565b602060405180830381600087803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190611d7e565b50610a53565b610a538633838861148a565b600080600087945060005b6001875103811015610af157868181518110610a7657fe5b602002602001015160001c9350600160ff1b841660001415915060a077ffffffff00000000000000000000000000000000000000008516901c925060006001600160a01b03888360010181518110610aca57fe5b602002602001015160001c169050610ae58682898787611573565b96509450600101610a5e565b5085600187510381518110610b0257fe5b60209081029190910101516001600160a01b03811694509250505060a081901c63ffffffff16600160ff1b821615157f4000000000000000000000000000000000000000000000000000000000000000831615801590610bfa57610b698530888686611573565b955087861015610b8b5760405162461bcd60e51b8152600401610083906123fe565b6000546001600160a01b0316632e1a7d4d876040518263ffffffff1660e01b8152600401610bb991906121d7565b600060405180830381600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b50505050610bf53387611759565b610c73565b610c396040518060400160405280600681526020017f616d74496e3a000000000000000000000000000000000000000000000000000081525087610305565b610c468533888686611573565b9550610c5385878a6117e6565b87861015610c735760405162461bcd60e51b815260040161008390612526565b5050505050949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b610d01838383604051602401610cb99392919061233c565b60408051601f198184030181529190526020810180516001600160e01b03167f969cdd0300000000000000000000000000000000000000000000000000000000179052610c80565b505050565b6103018282604051602401610d1c9291906125ef565b60408051601f198184030181529190526020810180516001600160e01b03167f6c0f698000000000000000000000000000000000000000000000000000000000179052610c80565b60408051808201909152600e81527f5f737761704279526f757465723a0000000000000000000000000000000000006020820152603c420190610da990878686611846565b60006001600160a01b031685600081518110610dc157fe5b60200260200101516001600160a01b03161415610f43578115610e9057856001600160a01b03168463ee41be8e60e01b85883386604051602401610e0894939291906125ba565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610e4691906120a3565b60006040518083038185875af1925050503d8060008114610e83576040519150601f19603f3d011682016040523d82523d6000602084013e610e88565b606091505b505050610f3e565b856001600160a01b031684637ff36ab560e01b85883386604051602401610eba94939291906125ba565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610ef891906120a3565b60006040518083038185875af1925050503d8060008114610f35576040519150601f19603f3d011682016040523d82523d6000602084013e610f3a565b606091505b5050505b61092c565b60006001600160a01b031685600187510381518110610f5e57fe5b60200260200101516001600160a01b031614156110c757811561102157856001600160a01b0316638e750db960e01b8585883086604051602401610fa69594939291906125fd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610fe491906120a3565b6000604051808303816000865af19150503d8060008114610e83576040519150601f19603f3d011682016040523d82523d6000602084013e610e88565b856001600160a01b03166318cbafe560e01b858588308660405160240161104c9594939291906125fd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161108a91906120a3565b6000604051808303816000865af19150503d8060008114610f35576040519150601f19603f3d011682016040523d82523d6000602084013e610f3a565b81156110f857856001600160a01b0316633eabf55f60e01b858588338660405160240161104c9594939291906125fd565b856001600160a01b03166338ed173960e01b85858833866040516024016111239594939291906125fd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161116191906120a3565b6000604051808303816000865af19150503d806000811461119e576040519150601f19603f3d011682016040523d82523d6000602084013e6111a3565b606091505b505050505050505050565b606060448351101580156111e15750826000815181106111ca57fe5b6020910101516001600160f81b031916600160fb1b145b80156112285750826001815181106111f557fe5b6020910101516001600160f81b0319167fc300000000000000000000000000000000000000000000000000000000000000145b801561126f57508260028151811061123c57fe5b6020910101516001600160f81b0319167f7900000000000000000000000000000000000000000000000000000000000000145b80156112b657508260038151811061128357fe5b6020910101516001600160f81b0319167fa000000000000000000000000000000000000000000000000000000000000000145b156113125760606044840190508051604401845110156112e85760405162461bcd60e51b815260040161008390612492565b82816040516020016112fb92919061218b565b604051602081830303815290604052915050610218565b8251602414801561135e57508260008151811061132b57fe5b6020910101516001600160f81b0319167f4e00000000000000000000000000000000000000000000000000000000000000145b80156113a557508260018151811061137257fe5b6020910101516001600160f81b0319167f4800000000000000000000000000000000000000000000000000000000000000145b80156113ec5750826002815181106113b957fe5b6020910101516001600160f81b0319167f7b00000000000000000000000000000000000000000000000000000000000000145b801561143357508260038151811061140057fe5b6020910101516001600160f81b0319167f7100000000000000000000000000000000000000000000000000000000000000145b1561145857602483015182611447826118a8565b6040516020016112fb9291906120bf565b81611462846118ce565b604051602001611473929190612125565b604051602081830303815290604052905092915050565b60006060856001600160a01b03166323b872dd8686866040516024016114b29392919061220e565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516114eb91906120a3565b6000604051808303816000865af19150503d8060008114611528576040519150601f19603f3d011682016040523d82523d6000602084013e61152d565b606091505b50915091508180156115575750805115806115575750808060200190518101906115579190611d7e565b61092c5760405162461bcd60e51b81526004016100839061255d565b6000806000876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b1580156115b057600080fd5b505afa1580156115c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e89190611fed565b9150915083156115f457905b60006116008787611a91565b905061161d620f4240840282016116178385611a91565b90611ad2565b93506116606040518060400160405280602081526020017f616d74496e3a20256420666565526174653a20256420616d744f75743a202564815250888887611b14565b84156116db57604080516000808252602082019283905263022c0d9f60e01b9092526001600160a01b038b169163022c0d9f916116a49188918d906024810161226c565b600060405180830381600087803b1580156116be57600080fd5b505af11580156116d2573d6000803e3d6000fd5b5050505061174d565b604080516000808252602082019283905263022c0d9f60e01b9092526001600160a01b038b169163022c0d9f9161171a919088908d906024810161226c565b600060405180830381600087803b15801561173457600080fd5b505af1158015611748573d6000803e3d6000fd5b505050505b50505095945050505050565b604080516000808252602082019092526001600160a01b03841690839060405161178391906120a3565b60006040518083038185875af1925050503d80600081146117c0576040519150601f19603f3d011682016040523d82523d6000602084013e6117c5565b606091505b5050905080610d015760405162461bcd60e51b8152600401610083906124c9565b610d018383836040516024016117fe9392919061224b565b60408051601f198184030181529190526020810180516001600160e01b03167f8786135e00000000000000000000000000000000000000000000000000000000179052610c80565b61092f8484848460405160240161186094939291906122e2565b60408051601f198184030181529190526020810180516001600160e01b03167fdaa394bd00000000000000000000000000000000000000000000000000000000179052610c80565b6060610218826040516020016118be91906121d7565b6040516020818303038152906040525b80516060907f303132333435363738396162636465660000000000000000000000000000000090829060029081020167ffffffffffffffff8111801561191357600080fd5b506040519080825280601f01601f19166020018201604052801561193e576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061196f57fe5b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106119b457fe5b60200101906001600160f81b031916908160001a90535060005b8451811015611a89578260048683815181106119e657fe5b01602001516001600160f81b031916901c60f81c60108110611a0457fe5b1a60f81b828260020260020181518110611a1a57fe5b60200101906001600160f81b031916908160001a90535082858281518110611a3e57fe5b60209101015160f81c600f1660108110611a5457fe5b1a60f81b828260020260030181518110611a6a57fe5b60200101906001600160f81b031916908160001a9053506001016119ce565b509392505050565b600082611aa057506000610218565b82820282848281611aad57fe5b0414611acb5760405162461bcd60e51b815260040161008390612435565b9392505050565b6000611acb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611b76565b61092f84848484604051602401611b2e9493929190612361565b60408051601f198184030181529190526020810180516001600160e01b03167f08ee566600000000000000000000000000000000000000000000000000000000179052610c80565b60008183611b975760405162461bcd60e51b815260040161008391906122a4565b506000838581611ba357fe5b0495945050505050565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160608152602001606081526020016060815260200160608152602001606081525090565b8035610218816126ac565b600082601f830112611c26578081fd5b8135611c39611c3482612660565b612639565b818152915060208083019084810160005b84811015611cce578135870188603f820112611c6557600080fd5b83810135611c75611c3482612660565b818152858101906040848101888502860182018e1015611c9457600080fd5b600095505b84861015611cb7578035845260019590950194928801928801611c99565b505087525050509282019290820190600101611c4a565b505050505092915050565b600082601f830112611ce9578081fd5b8135611cf7611c3482612660565b818152915060208083019084810181840286018201871015611d1857600080fd5b60005b84811015611cce57813584529282019290820190600101611d1b565b60008083601f840112611d48578182fd5b50813567ffffffffffffffff811115611d5f578182fd5b602083019150836020828501011115611d7757600080fd5b9250929050565b600060208284031215611d8f578081fd5b81518015158114611acb578182fd5b60008060208385031215611db0578081fd5b823567ffffffffffffffff811115611dc6578182fd5b611dd285828601611d37565b90969095509350505050565b600080600080600080600060a0888a031215611df8578283fd5b8735611e03816126ac565b96506020880135955060408801359450606088013567ffffffffffffffff80821115611e2d578485fd5b818a0191508a601f830112611e40578485fd5b813581811115611e4e578586fd5b8b60208083028501011115611e61578586fd5b6020830196508095505060808a0135915080821115611e7e578384fd5b50611e8b8a828b01611d37565b989b979a50959850939692959293505050565b600060208284031215611eaf578081fd5b813567ffffffffffffffff80821115611ec6578283fd5b8184019150610120808387031215611edc578384fd5b611ee581612639565b9050611ef18684611c0b565b8152611f008660208501611c0b565b60208201526040830135604082015260608301356060820152608083013582811115611f2a578485fd5b611f3687828601611cd9565b60808301525060a083013582811115611f4d578485fd5b611f5987828601611cd9565b60a08301525060c083013582811115611f70578485fd5b611f7c87828601611cd9565b60c08301525060e083013582811115611f93578485fd5b611f9f87828601611cd9565b60e0830152506101008084013583811115611fb8578586fd5b611fc488828701611c16565b918301919091525095945050505050565b600060208284031215611fe6578081fd5b5051919050565b60008060408385031215611fff578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156120485781516001600160a01b031687529582019590820190600101612023565b509495945050505050565b6000815180845261206b816020860160208601612680565b601f01601f19169290920160200192915050565b60006001600160e01b03198516825282846004840137910160040190815292915050565b600082516120b5818460208701612680565b9190910192915050565b600083516120d1818460208801612680565b7f50616e6963280000000000000000000000000000000000000000000000000000908301908152835161210b816006840160208801612680565b602960f81b60069290910191820152600701949350505050565b60008351612137818460208801612680565b7f556e6b6e6f776e280000000000000000000000000000000000000000000000009083019081528351612171816008840160208801612680565b602960f81b60089290910191820152600901949350505050565b6000835161219d818460208801612680565b7f4572726f72280000000000000000000000000000000000000000000000000000908301908152835161210b816006840160208801612680565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60008582528460208301526001600160a01b03841660408301526080606083015261229a6080830184612053565b9695505050505050565b600060208252611acb6020830184612053565b6000604082526122ca6040830185612053565b90506001600160a01b03831660208301529392505050565b6000608082526122f56080830187612053565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b60006040825261232d6040830185612053565b90508260208301529392505050565b60006060825261234f6060830186612053565b60208301949094525060400152919050565b6000608082526123746080830187612053565b6020830195909552506040810192909252606090910152919050565b60208082526015908201527f6865726520666c61672073686f756c6420626520300000000000000000000000604082015260600190565b60208082526014908201527f455448206465706f7369742072656a6563746564000000000000000000000000604082015260600190565b60208082526013908201527f6e6f7420656e6f7567682077657468206f757400000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f496e76616c69642072657665727420726561736f6e0000000000000000000000604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201527f4c45440000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f6e6f7420656e6f756768206f7574000000000000000000000000000000000000604082015260600190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160408201527f494c454400000000000000000000000000000000000000000000000000000000606082015260800190565b6000858252608060208301526125d36080830186612010565b6001600160a01b03949094166040830152506060015292915050565b918252602082015260400190565b600086825285602083015260a0604083015261261c60a0830186612010565b6001600160a01b0394909416606083015250608001529392505050565b60405181810167ffffffffffffffff8111828210171561265857600080fd5b604052919050565b600067ffffffffffffffff821115612676578081fd5b5060209081020190565b60005b8381101561269b578181015183820152602001612683565b8381111561092f5750506000910152565b6001600160a01b03811681146126c157600080fd5b5056fea2646970667358221220a107310d81b3941e7473a63d4cbfbc2d9feeebd0b084e9d72e20eec14a239d2f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5610,
        "contract": "contracts/swap/aggressive/UnoswapRouter.sol:UnoswapRouter",
        "label": "_WETH",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5624,
        "contract": "contracts/swap/aggressive/UnoswapRouter.sol:UnoswapRouter",
        "label": "ctokenFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}