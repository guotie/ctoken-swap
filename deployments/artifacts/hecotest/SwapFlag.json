{
  "address": "0x1a6f0B40eaA438BdD678fEE74AD61844EFA3239B",
  "abi": [
    {
      "inputs": [],
      "name": "FLAG_TOKEN_CTOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLAG_TOKEN_IN_ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLAG_TOKEN_OUT_ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLAG_TOKEN_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SwapFlagMap",
          "name": "self",
          "type": "tuple"
        }
      ],
      "name": "allowPartialFill",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SwapFlagMap",
          "name": "self",
          "type": "tuple"
        }
      ],
      "name": "burnCHI",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SwapFlagMap",
          "name": "self",
          "type": "tuple"
        }
      ],
      "name": "getComplexLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SwapFlagMap",
          "name": "self",
          "type": "tuple"
        }
      ],
      "name": "getMainRoutes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SwapFlagMap",
          "name": "self",
          "type": "tuple"
        }
      ],
      "name": "getParts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SwapFlagMap",
          "name": "self",
          "type": "tuple"
        }
      ],
      "name": "tokenInIsETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SwapFlagMap",
          "name": "self",
          "type": "tuple"
        }
      ],
      "name": "tokenIsCToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "tokenIsToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SwapFlagMap",
          "name": "self",
          "type": "tuple"
        }
      ],
      "name": "tokenIsToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SwapFlagMap",
          "name": "self",
          "type": "tuple"
        }
      ],
      "name": "tokenOutIsETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7970f6d61d050d63694cc91c94dad3eed1b2ccc0ad5946a2fac78d62a3e0c479",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x1a6f0B40eaA438BdD678fEE74AD61844EFA3239B",
    "transactionIndex": 2,
    "gasUsed": "226461",
    "logsBloom": "0x
    "blockHash": "0x1eaa788f88389839ed9bc5ec59515f748f9b53855e7e885228306cb92ead3561",
    "transactionHash": "0x7970f6d61d050d63694cc91c94dad3eed1b2ccc0ad5946a2fac78d62a3e0c479",
    "logs": [],
    "blockNumber": 7056636,
    "cumulativeGasUsed": "306713",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b9e5f63cd574526af4f4bd3217c8f6cc",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FLAG_TOKEN_CTOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLAG_TOKEN_IN_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLAG_TOKEN_OUT_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLAG_TOKEN_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SwapFlagMap\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"allowPartialFill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SwapFlagMap\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"burnCHI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SwapFlagMap\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"getComplexLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SwapFlagMap\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"getMainRoutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SwapFlagMap\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"getParts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SwapFlagMap\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"tokenInIsETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SwapFlagMap\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"tokenIsCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"tokenIsToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SwapFlagMap\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"tokenIsToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SwapFlagMap\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"tokenOutIsETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowPartialFill(DataTypes.SwapFlagMap)\":{\"details\":\"get param allow partial fill\"},\"burnCHI(DataTypes.SwapFlagMap)\":{\"details\":\"get param burn CHI\"},\"getComplexLevel(DataTypes.SwapFlagMap)\":{\"details\":\"get param complex level\"},\"getMainRoutes(DataTypes.SwapFlagMap)\":{\"details\":\"get param main routes max port\"},\"getParts(DataTypes.SwapFlagMap)\":{\"details\":\"get param split parts\"},\"tokenInIsETH(DataTypes.SwapFlagMap)\":{\"details\":\"if token in is ETH\"},\"tokenIsCToken(DataTypes.SwapFlagMap)\":{\"details\":\"if token in/out is ctoken\"},\"tokenIsToken(DataTypes.SwapFlagMap)\":{\"details\":\"if token in/out is token\"},\"tokenOutIsETH(DataTypes.SwapFlagMap)\":{\"details\":\"if token out is ETH\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/aggressive2/library/SwapFlag.sol\":\"SwapFlag\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/aggressive2/library/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title DataTypes library\\r\\n * @author ebankex\\r\\n * @notice Provides data types and functions to perform step swap calculations\\r\\n * @dev DataTypes are used for aggressive swap within multi swap exchanges.\\r\\n **/\\r\\n\\r\\nlibrary DataTypes {\\r\\n    // \\u6b65\\u9aa4\\u6267\\u884c\\u7684\\u52a8\\u4f5c\\u7c7b\\u578b\\r\\n    uint256 public constant STEP_DEPOSIT_ETH           = 0x0000000001; // prettier-ignore\\r\\n    uint256 public constant STEP_WITHDRAW_WETH         = 0x0000000002; // prettier-ignore\\r\\n    uint256 public constant STEP_COMPOUND_MINT_CTOKEN  = 0x0000000003; // prettier-ignore\\r\\n    uint256 public constant STEP_COMPOUND_MINT_CETH    = 0x0000000004; // prettier-ignore\\r\\n    uint256 public constant STEP_COMPOUND_REDEEM_TOKEN = 0x0000000005; // prettier-ignore\\r\\n    // uint256 public constant STEP_COMPOUND_REDEEM_ETH   = 0x0000000006; // prettier-ignore\\r\\n    uint256 public constant STEP_AAVE_DEPOSIT_ATOKEN   = 0x0000000007; // prettier-ignore\\r\\n    uint256 public constant STEP_AAVE_DEPOSIT_WETH     = 0x0000000008; // prettier-ignore\\r\\n    uint256 public constant STEP_AAVE_WITHDRAW_TOKEN   = 0x0000000009; // prettier-ignore\\r\\n    uint256 public constant STEP_AAVE_WITHDRAW_ETH     = 0x000000000a; // prettier-ignore\\r\\n\\r\\n    // uint256 public constant STEP_UNISWAP_PAIR_SWAP              = 0x0000000100; // prettier-ignore\\r\\n    uint256 public constant STEP_UNISWAP_ROUTER_TOKENS_TOKENS   = 0x000000011; // prettier-ignore\\r\\n    uint256 public constant STEP_UNISWAP_ROUTER_ETH_TOKENS      = 0x000000012; // prettier-ignore\\r\\n    uint256 public constant STEP_UNISWAP_ROUTER_TOKENS_ETH      = 0x000000013; // prettier-ignore\\r\\n    uint256 public constant STEP_EBANK_ROUTER_CTOKENS_CTOKENS   = 0x000000014;  // prettier-ignore same to STEP_UNISWAP_ROUTER_TOKENS_TOKENS\\r\\n    uint256 public constant STEP_EBANK_ROUTER_TOKENS_TOKENS     = 0x000000015;  // prettier-ignore underlying\\r\\n    uint256 public constant STEP_EBANK_ROUTER_ETH_TOKENS        = 0x000000016;  // prettier-ignore underlying\\r\\n    uint256 public constant STEP_EBANK_ROUTER_TOKENS_ETH        = 0x000000017;  // prettier-ignore underlying\\r\\n\\r\\n    uint256 public constant REVERSE_SWAP_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 public constant ADDRESS_MASK      = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff; // prettier-ignore\\r\\n\\r\\n    // todo slip, 16 bit, \\u5206\\u6bcd: 10000\\r\\n    struct SwapFlagMap {\\r\\n        // bit 0-7 parts, 8 bit\\r\\n        // bit 8-63: flag token in/out, 64 bit\\r\\n        // bit 72-79 max main part, 8 bit\\r\\n        // bit 80-81 complex level, 2 bit\\r\\n        // bit 82    allow partial fill\\r\\n        // bit 83    allow burnChi\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    /// @dev \\u8be2\\u4ef7 \\u8ba1\\u7b97\\u6700\\u4f73\\u5151\\u6362\\u8def\\u5f84\\u7684\\u5165\\u53c2\\r\\n    struct RoutePathParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        address[] midTokens;      // should always be token\\r\\n        uint256 mainRoutes;           // distributeCounts\\r\\n        uint256 complex;\\r\\n        uint256 parts;\\r\\n        bool allowPartial;\\r\\n        bool allowBurnchi;\\r\\n    }\\r\\n\\r\\n    /// @dev \\u8be2\\u4ef7 \\u8ba1\\u7b97\\u6700\\u4f73\\u5151\\u6362\\u8def\\u5f84\\u7684\\u5165\\u53c2\\r\\n    struct QuoteParams {\\r\\n        address to;\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint256 amountIn;\\r\\n        address[] midTokens;      // should always be token\\r\\n        uint256 mainRoutes;           // distributeCounts\\r\\n        uint256 complex;\\r\\n        uint256 parts;\\r\\n        // uint256 routes;           // distributeCounts\\r\\n        bool allowPartial;\\r\\n        bool allowBurnchi;\\r\\n        // uint256 tokenPriceGWei;\\r\\n        // address fromAddress;\\r\\n        // address dstReceiver;\\r\\n        // address[] midTokens;      // should always be token\\r\\n        // Exchange[]  exchanges;\\r\\n        // address[][] paths;        // \\u7531 midTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 path \\u5217\\u8868\\r\\n        // address[][] cpaths;       // \\u7531 midCTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 cpath \\u5217\\u8868\\r\\n        // SwapFlagMap flag;\\r\\n    }\\r\\n\\r\\n    // swap reserves; exchange rates\\r\\n    struct SwapReserveRates {\\r\\n        bool isEToken;\\r\\n        bool allowBurnchi;\\r\\n        bool allEbank;                  // \\u662f\\u5426\\u5168\\u90e8\\u90fd\\u7531 ebank \\u5151\\u6362\\r\\n        uint256 ebankAmt;\\r\\n        uint256 amountIn;\\r\\n        uint256 swapRoutes;             // \\u6700\\u7ec8\\u7ecf\\u8fc7\\u591a\\u5c11\\u4e2a route \\u6765\\u5151\\u6362\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        address etokenIn;\\r\\n        address etokenOut;\\r\\n        uint256 routes;                 // distributeCounts \\u4ea4\\u6613\\u6240\\u6570\\u91cf * \\u8def\\u5f84\\u6570\\u91cf\\r\\n        uint256 rateIn;\\r\\n        uint256 rateOut;\\r\\n        uint256[]  fees;\\r\\n        Exchange[]  exchanges;\\r\\n        address[][] paths;        // \\u7531 midTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 path \\u5217\\u8868\\r\\n        address[][] cpaths;       // \\u7531 midCTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 cpath \\u5217\\u8868\\r\\n        uint256[][][] reserves;     // [routes][path]\\r\\n        uint256[] distributes;    // \\u5404\\u4e2a swap \\u8def\\u5f84\\u5206\\u914d\\u7684\\u5151\\u6362\\u6570\\u91cf, \\u5bf9\\u4e8e ebank \\u662f etoken \\u7684\\u6570\\u91cf\\uff0c \\u5176\\u4ed6 swap \\u662f token \\u6570\\u91cf\\r\\n    }\\r\\n\\r\\n    struct UniswapRouterParam {\\r\\n        uint256 amount;\\r\\n        address contractAddr;\\r\\n        // address to;\\r\\n        address[] path;\\r\\n    }\\r\\n\\r\\n    struct CompoundRedeemParam {\\r\\n        uint256 amount;\\r\\n        // address to;\\r\\n        address ctoken;\\r\\n    }\\r\\n\\r\\n    struct UniswapPairParam {\\r\\n        uint256 amount;\\r\\n        address[] pairs;\\r\\n    }\\r\\n\\r\\n    // struct \\r\\n    struct StepExecuteParams {\\r\\n        uint256 flag;           // step execute flag \\u6307\\u793a\\u7528\\u54ea\\u79cd\\u6b65\\u9aa4\\u53bb\\u6267\\u884c\\r\\n        bytes   data;\\r\\n    }\\r\\n\\r\\n    /// @dev \\u5151\\u6362 \\u5165\\u53c2\\r\\n    struct SwapParams {\\r\\n        // address to;\\r\\n        // address tokenIn;\\r\\n        // address tokenOut;\\r\\n        // uint256 amountIn;\\r\\n        // uint256 amountOut;\\r\\n        // uint256 tokenPriceGWei;\\r\\n        // address fromAddress;\\r\\n        // address dstReceiver;\\r\\n        // address[] midTokens;  // should always be token\\r\\n        // SwapFlagMap flag;\\r\\n        // SwapFlagMap flag;\\r\\n        bool isEToken;\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint256 amountIn;\\r\\n        uint256 minAmt;\\r\\n        uint256 block;   // \\u8ba1\\u7b97\\u7ed3\\u679c\\u7684 block\\r\\n        StepExecuteParams[] steps;\\r\\n    }\\r\\n\\r\\n    /// @dev Exchange \\u4ea4\\u6613\\u6240\\u5408\\u7ea6\\u5730\\u5740\\u53ca\\u4ea4\\u6613\\u6240\\u7c7b\\u578b\\r\\n    struct Exchange {\\r\\n        uint exFlag;\\r\\n        address contractAddr;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev \\u8ba1\\u7b97\\u5404\\u4e2a\\u4ea4\\u6613\\u6240\\u7684\\u6bcf\\u4e2aparts\\u7684return\\r\\n    struct SwapDistributes {\\r\\n        bool        isCtoken;     // \\u4e70\\u5165\\u3001\\u5356\\u51fa\\u7684\\u5e01\\u662f\\u5426\\u662f ctoken\\r\\n        // bool     ctokenOut;    // \\u4e70\\u5230\\u7684\\u5e01\\u662f\\u5426\\u662f ctoken\\r\\n        address     to;           // \\u4ea4\\u6613\\u8005\\u5730\\u5740\\r\\n        address     tokenIn;\\r\\n        address     tokenOut;\\r\\n        uint256     parts;        // \\u4ea4\\u6613\\u91cf\\u62c6\\u5206\\u4e3a\\u591a\\u5c11\\u4efd\\r\\n        uint256     rateIn;       // token in exchange rate\\r\\n        uint256     rateOut;      // token out exchange rate\\r\\n        uint[]      amounts;      // split into parts\\r\\n        uint[]      cAmounts;     // mint to ctoken amounts\\r\\n        // address[]   midTokens;    // middle token list\\r\\n        // address[]   midCTokens;   // middle ctoken list\\r\\n        address[][] paths;        // \\u7531 midTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 path \\u5217\\u8868\\r\\n        address[][] cpaths;       // \\u7531 midCTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 cpath \\u5217\\u8868\\r\\n\\r\\n        uint[]      gases;          // gas \\u8d39\\u7528\\u4f30\\u7b97\\r\\n        uint[]      pathIdx;        // \\u4f7f\\u7528\\u7684 path \\u5e8f\\u53f7\\r\\n        uint[][]    distributes;    // \\u4e00\\u7ea7\\u4e3a\\u4ea4\\u6613\\u8def\\u5f84, \\u4e8c\\u7ea7\\u4e3a\\u8be5\\u4ea4\\u6613\\u8def\\u5f84\\u7684\\u6240\\u6709parts\\u5bf9\\u5e94\\u7684return\\r\\n        int256[][]  netDistributes; // distributes - gases\\r\\n        Exchange[]  exchanges;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x17bbfa793fdaae38aef1d421e8968f532629374c392dbb6d4e39a167d0506c47\",\"license\":\"MIT\"},\"contracts/swap/aggressive2/library/SwapFlag.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./DataTypes.sol\\\";\\r\\n\\r\\nlibrary SwapFlag {\\r\\n    uint256 public constant FLAG_TOKEN_IN_ETH          = 0x000000000100; // prettier-ignore\\r\\n    uint256 public constant FLAG_TOKEN_TOKEN           = 0x000000000200; // prettier-ignore\\r\\n    uint256 public constant FLAG_TOKEN_CTOKEN          = 0x000000000400; // prettier-ignore\\r\\n    uint256 public constant FLAG_TOKEN_OUT_ETH         = 0x000000000800; // prettier-ignore\\r\\n    // uint256 public constant FLAG_TOKEN_OUT_TOKEN       = 0x000000001000; // prettier-ignore\\r\\n    // uint256 public constant FLAG_TOKEN_OUT_CTOKEN      = 0x000000002000; // prettier-ignore\\r\\n    // uint256 public constant FLAG_TOKEN_OUT_CETH        = 0x0000000040; // prettier-ignore\\r\\n\\r\\n    uint256 internal constant _MASK_PARTS           = 0x00000000000000000000ff; // prettier-ignore\\r\\n    uint256 internal constant _MASK_MAIN_ROUTES     = 0x00ff000000000000000000; // prettier-ignore\\r\\n    uint256 internal constant _MASK_COMPLEX_LEVEL   = 0x0300000000000000000000; // prettier-ignore\\r\\n    uint256 internal constant _MASK_PARTIAL_FILL    = 0x0400000000000000000000; // prettier-ignore\\r\\n    uint256 internal constant _MASK_BURN_CHI        = 0x0800000000000000000000; // prettier-ignore\\r\\n\\r\\n    // uint256 internal constant _SHIFT_PARTS          = 64; // prettier-ignore\\r\\n    uint256 internal constant _SHIFT_MAIN_ROUTES    = 72; // prettier-ignore\\r\\n    uint256 internal constant _SHIFT_COMPLEX_LEVEL  = 80; // prettier-ignore\\r\\n\\r\\n    /// @dev if token in/out is token\\r\\n    function tokenIsToken(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & FLAG_TOKEN_TOKEN) != 0;\\r\\n    }\\r\\n\\r\\n    function tokenIsToken(uint flag) public pure returns (bool) {\\r\\n        return (flag & FLAG_TOKEN_TOKEN) != 0;\\r\\n    }\\r\\n    \\r\\n    /// @dev if token in/out is ctoken\\r\\n    function tokenIsCToken(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & FLAG_TOKEN_CTOKEN) != 0;\\r\\n    }\\r\\n\\r\\n    /// @dev if token in is ETH\\r\\n    function tokenInIsETH(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & FLAG_TOKEN_IN_ETH) != 0;\\r\\n    }\\r\\n\\r\\n    /// @dev if token out is ETH\\r\\n    function tokenOutIsETH(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & FLAG_TOKEN_OUT_ETH) != 0;\\r\\n    }\\r\\n\\r\\n    /// @dev get param split parts\\r\\n    function getParts(DataTypes.SwapFlagMap memory self) public pure returns (uint256) {\\r\\n        return (self.data & _MASK_PARTS);\\r\\n    }\\r\\n\\r\\n    /// @dev get param main routes max port\\r\\n    function getMainRoutes(DataTypes.SwapFlagMap memory self) public pure returns (uint256) {\\r\\n        return (self.data & _MASK_MAIN_ROUTES) >> _SHIFT_MAIN_ROUTES;\\r\\n    }\\r\\n\\r\\n    /// @dev get param complex level\\r\\n    function getComplexLevel(DataTypes.SwapFlagMap memory self) public pure returns (uint256) {\\r\\n        return (self.data & _MASK_COMPLEX_LEVEL) >> _SHIFT_COMPLEX_LEVEL;\\r\\n    }\\r\\n\\r\\n    /// @dev get param allow partial fill\\r\\n    function allowPartialFill(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & _MASK_PARTIAL_FILL) != 0;\\r\\n    }\\r\\n\\r\\n    /// @dev get param burn CHI\\r\\n    function burnCHI(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & _MASK_BURN_CHI) != 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbcaae5a318ea7e7602be9123e1888e361a728392bf7c99fcd6c5fcae19b6466c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610323610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c80636fa12665116100965780638f861f7b116100705780638f861f7b146101b9578063ad81031f146101c1578063d000d182146101d4578063d28e79c5146101e7576100f4565b80636fa12665146101805780637ecd24881461019357806382417abe146101a6576100f4565b80632e6d07e2116100d25780632e6d07e21461014a57806347c077ff14610152578063587f2107146101655780636f3961fe1461016d576100f4565b8063115ed913146100f957806312fc4c2d146101175780631b49f21e14610137575b600080fd5b6101016101fa565b60405161010e91906102e4565b60405180910390f35b61012a610125366004610284565b610200565b60405161010e91906102d9565b610101610145366004610284565b610213565b61010161021d565b61012a610160366004610284565b610223565b610101610236565b61012a61017b3660046102c1565b61023c565b61010161018e366004610284565b610245565b61012a6101a1366004610284565b61024f565b61012a6101b4366004610284565b610259565b610101610263565b61012a6101cf366004610284565b610269565b6101016101e2366004610284565b610273565b61012a6101f5366004610284565b61027a565b61080081565b516a040000000000000000000016151590565b5160481c60ff1690565b61020081565b516a080000000000000000000016151590565b61040081565b61020016151590565b5160501c60031690565b5161010016151590565b5161020016151590565b61010081565b5161040016151590565b5160ff1690565b5161080016151590565b600060208284031215610295578081fd5b6040516020810181811067ffffffffffffffff821117156102b4578283fd5b6040529135825250919050565b6000602082840312156102d2578081fd5b5035919050565b901515815260200190565b9081526020019056fea2646970667358221220c48f2ca56df7b738574762d16b8703ed298dfbd7ae4b965a2606282a4fc133d664736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c80636fa12665116100965780638f861f7b116100705780638f861f7b146101b9578063ad81031f146101c1578063d000d182146101d4578063d28e79c5146101e7576100f4565b80636fa12665146101805780637ecd24881461019357806382417abe146101a6576100f4565b80632e6d07e2116100d25780632e6d07e21461014a57806347c077ff14610152578063587f2107146101655780636f3961fe1461016d576100f4565b8063115ed913146100f957806312fc4c2d146101175780631b49f21e14610137575b600080fd5b6101016101fa565b60405161010e91906102e4565b60405180910390f35b61012a610125366004610284565b610200565b60405161010e91906102d9565b610101610145366004610284565b610213565b61010161021d565b61012a610160366004610284565b610223565b610101610236565b61012a61017b3660046102c1565b61023c565b61010161018e366004610284565b610245565b61012a6101a1366004610284565b61024f565b61012a6101b4366004610284565b610259565b610101610263565b61012a6101cf366004610284565b610269565b6101016101e2366004610284565b610273565b61012a6101f5366004610284565b61027a565b61080081565b516a040000000000000000000016151590565b5160481c60ff1690565b61020081565b516a080000000000000000000016151590565b61040081565b61020016151590565b5160501c60031690565b5161010016151590565b5161020016151590565b61010081565b5161040016151590565b5160ff1690565b5161080016151590565b600060208284031215610295578081fd5b6040516020810181811067ffffffffffffffff821117156102b4578283fd5b6040529135825250919050565b6000602082840312156102d2578081fd5b5035919050565b901515815260200190565b9081526020019056fea2646970667358221220c48f2ca56df7b738574762d16b8703ed298dfbd7ae4b965a2606282a4fc133d664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowPartialFill(DataTypes.SwapFlagMap)": {
        "details": "get param allow partial fill"
      },
      "burnCHI(DataTypes.SwapFlagMap)": {
        "details": "get param burn CHI"
      },
      "getComplexLevel(DataTypes.SwapFlagMap)": {
        "details": "get param complex level"
      },
      "getMainRoutes(DataTypes.SwapFlagMap)": {
        "details": "get param main routes max port"
      },
      "getParts(DataTypes.SwapFlagMap)": {
        "details": "get param split parts"
      },
      "tokenInIsETH(DataTypes.SwapFlagMap)": {
        "details": "if token in is ETH"
      },
      "tokenIsCToken(DataTypes.SwapFlagMap)": {
        "details": "if token in/out is ctoken"
      },
      "tokenIsToken(DataTypes.SwapFlagMap)": {
        "details": "if token in/out is token"
      },
      "tokenOutIsETH(DataTypes.SwapFlagMap)": {
        "details": "if token out is ETH"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}