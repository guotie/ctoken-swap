{
  "address": "0x4680d16569e96672A53093350EB9F358a552fd17",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setFeeToRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e65350859e2f64ecf4df73c748c8ec9582692625c8b2a0d9a1febfc989958fa",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x4680d16569e96672A53093350EB9F358a552fd17",
    "transactionIndex": 0,
    "gasUsed": "3589550",
    "logsBloom": "0x
    "blockHash": "0x1e8e5f8e59428543fc2050743c49f232e4a0ce35e918882f66c677a1e84cee64",
    "transactionHash": "0x5e65350859e2f64ecf4df73c748c8ec9582692625c8b2a0d9a1febfc989958fa",
    "logs": [],
    "blockNumber": 4495077,
    "cumulativeGasUsed": "3589550",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49d531908840FDDaC744543d57CB21B91c3D9094"
  ],
  "solcInputHash": "087d4cb688a1e1d02c763275192bd9d0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setFeeToRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/heco/Factory.sol\":\"MdexFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/heco/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport \\\"../library/SafeMath.sol\\\";\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"../interface/IMdexFactory.sol\\\";\\r\\nimport \\\"../interface/IMdexPair.sol\\\";\\r\\n\\r\\ninterface IHswapV2Callee {\\r\\n    function hswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface IMdexERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\\r\\n\\r\\ncontract MdexERC20 is IMdexERC20 {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    string public constant override name = 'HSwap LP Token';\\r\\n    // function name() override external pure returns (string memory) {\\r\\n    //     return \\\"HSwap LP Token\\\";\\r\\n    // }\\r\\n    string public constant override symbol = 'HMDX';\\r\\n    uint8 public constant override decimals = 18;\\r\\n    uint  public override totalSupply;\\r\\n    mapping(address => uint) public override balanceOf;\\r\\n    mapping(address => mapping(address => uint)) public override allowance;\\r\\n\\r\\n    bytes32 public override DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint) public override nonces;\\r\\n\\r\\n    // event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    // event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    constructor() {\\r\\n        uint chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes('1')),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint value) internal {\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint value) internal {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint value) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint value) private {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint value) override external returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint value) override external returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) override external returns (bool) {\\r\\n        if (allowance[from][msg.sender] != uint(- 1)) {\\r\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override external {\\r\\n        require(deadline >= block.timestamp, 'MdexSwap: EXPIRED');\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                '\\\\x19\\\\x01',\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'MdexSwap: INVALID_SIGNATURE');\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MdexPair is IMdexERC20, IMdexPair {\\r\\n    using SafeMath  for uint;\\r\\n    using UQ112x112 for uint224;\\r\\n\\r\\n    uint public constant override MINIMUM_LIQUIDITY = 10 ** 3;\\r\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n\\r\\n    address public override factory;\\r\\n    address public override token0;\\r\\n    address public override token1;\\r\\n\\r\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\r\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\r\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\r\\n\\r\\n    uint public override price0CumulativeLast;\\r\\n    uint public override price1CumulativeLast;\\r\\n    uint public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\r\\n\\r\\n    uint private unlocked = 1;\\r\\n    modifier lock() {\\r\\n        require(unlocked == 1, 'MdexSwap: LOCKED');\\r\\n        unlocked = 0;\\r\\n        _;\\r\\n        unlocked = 1;\\r\\n    }\\r\\n    // using SafeMath for uint;\\r\\n\\r\\n    string public constant  override(IMdexERC20, IMdexPair) name = 'HSwap LP Token';\\r\\n    string public constant  override(IMdexERC20, IMdexPair) symbol = 'HMDX';\\r\\n    uint8 public constant  override(IMdexERC20, IMdexPair) decimals = 18;\\r\\n    uint  public  override(IMdexERC20, IMdexPair) totalSupply;\\r\\n    mapping(address => uint) public  override(IMdexERC20, IMdexPair) balanceOf;\\r\\n    mapping(address => mapping(address => uint)) public  override(IMdexERC20, IMdexPair) allowance;\\r\\n\\r\\n    bytes32 public  override(IMdexERC20, IMdexPair) DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant  override(IMdexERC20, IMdexPair) PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint) public  override(IMdexERC20, IMdexPair) nonces;\\r\\n\\r\\n    // event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    // event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    constructor() {\\r\\n        uint chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes('1')),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint value) internal {\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint value) internal {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint value) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint value) private {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint value) override(IMdexERC20, IMdexPair) external returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint value) override(IMdexERC20, IMdexPair) external returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) override(IMdexERC20, IMdexPair) external returns (bool) {\\r\\n        if (allowance[from][msg.sender] != uint(- 1)) {\\r\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline,\\r\\n                    uint8 v, bytes32 r, bytes32 s) override(IMdexERC20, IMdexPair) external {\\r\\n        require(deadline >= block.timestamp, 'MdexSwap: EXPIRED');\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                '\\\\x19\\\\x01',\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'MdexSwap: INVALID_SIGNATURE');\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n    ///////////////////////////////////////////////////////////////\\r\\n\\r\\n    function getReserves() override public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\r\\n        _reserve0 = reserve0;\\r\\n        _reserve1 = reserve1;\\r\\n        _blockTimestampLast = blockTimestampLast;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token, address to, uint value) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'MdexSwap: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    // event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    // event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    // event Swap(\\r\\n    //     address indexed sender,\\r\\n    //     uint amount0In,\\r\\n    //     uint amount1In,\\r\\n    //     uint amount0Out,\\r\\n    //     uint amount1Out,\\r\\n    //     address indexed to\\r\\n    // );\\r\\n    // event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    // constructor() public {\\r\\n    //     factory = msg.sender;\\r\\n    // }\\r\\n\\r\\n    // called once by the factory at time of deployment\\r\\n    function initialize(address _token0, address _token1) override external {\\r\\n        require(msg.sender == factory, 'MdexSwap: FORBIDDEN');\\r\\n        // sufficient check\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n    }\\r\\n\\r\\n    // update reserves and, on the first call per block, price accumulators\\r\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\r\\n        require(balance0 <= uint112(- 1) && balance1 <= uint112(- 1), 'MdexSwap: OVERFLOW');\\r\\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\r\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n        // overflow is desired\\r\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n            // * never overflows, and + overflow is desired\\r\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\r\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\r\\n        }\\r\\n        reserve0 = uint112(balance0);\\r\\n        reserve1 = uint112(balance1);\\r\\n        blockTimestampLast = blockTimestamp;\\r\\n        emit Sync(reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\r\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\r\\n        address feeTo = IMdexFactory(factory).feeTo();\\r\\n        feeOn = feeTo != address(0);\\r\\n        uint _kLast = kLast;\\r\\n        // gas savings\\r\\n        if (feeOn) {\\r\\n            if (_kLast != 0) {\\r\\n                uint rootK = SafeMath.sqrt(uint(_reserve0).mul(_reserve1));\\r\\n                uint rootKLast = SafeMath.sqrt(_kLast);\\r\\n                if (rootK > rootKLast) {\\r\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\r\\n                    uint denominator = rootK.mul(IMdexFactory(factory).feeToRate()).add(rootKLast);\\r\\n                    uint liquidity = numerator / denominator;\\r\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\r\\n                }\\r\\n            }\\r\\n        } else if (_kLast != 0) {\\r\\n            kLast = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function mint(address to) override external lock returns (uint liquidity) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\r\\n        // gas savings\\r\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        uint amount0 = balance0.sub(_reserve0);\\r\\n        uint amount1 = balance1.sub(_reserve1);\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply;\\r\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity = SafeMath.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\r\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\r\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n        } else {\\r\\n            liquidity = SafeMath.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\r\\n        }\\r\\n        require(liquidity > 0, 'MdexSwap: INSUFFICIENT_LIQUIDITY_MINTED');\\r\\n        _mint(to, liquidity);\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1);\\r\\n        // reserve0 and reserve1 are up-to-date\\r\\n        emit Mint(msg.sender, amount0, amount1);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function burn(address to) override external lock returns (uint amount0, uint amount1) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\r\\n        // gas savings\\r\\n        address _token0 = token0;\\r\\n        // gas savings\\r\\n        address _token1 = token1;\\r\\n        // gas savings\\r\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        uint liquidity = balanceOf[address(this)];\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply;\\r\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        amount0 = liquidity.mul(balance0) / _totalSupply;\\r\\n        // using balances ensures pro-rata distribution\\r\\n        amount1 = liquidity.mul(balance1) / _totalSupply;\\r\\n        // using balances ensures pro-rata distribution\\r\\n        require(amount0 > 0 && amount1 > 0, 'MdexSwap: INSUFFICIENT_LIQUIDITY_BURNED');\\r\\n        _burn(address(this), liquidity);\\r\\n        _safeTransfer(_token0, to, amount0);\\r\\n        _safeTransfer(_token1, to, amount1);\\r\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1);\\r\\n        // reserve0 and reserve1 are up-to-date\\r\\n        emit Burn(msg.sender, amount0, amount1, to);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) override external lock {\\r\\n        require(amount0Out > 0 || amount1Out > 0, 'MdexSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\r\\n        // gas savings\\r\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'MdexSwap: INSUFFICIENT_LIQUIDITY');\\r\\n\\r\\n        uint balance0;\\r\\n        uint balance1;\\r\\n        {// scope for _token{0,1}, avoids stack too deep errors\\r\\n            address _token0 = token0;\\r\\n            address _token1 = token1;\\r\\n            require(to != _token0 && to != _token1, 'MdexSwap: INVALID_TO');\\r\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\\r\\n            // optimistically transfer tokens\\r\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\\r\\n            // optimistically transfer tokens\\r\\n            if (data.length > 0) IHswapV2Callee(to).hswapV2Call(msg.sender, amount0Out, amount1Out, data);\\r\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        }\\r\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\r\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\r\\n        require(amount0In > 0 || amount1In > 0, 'MdexSwap: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        {// scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\r\\n            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\r\\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000 ** 2), 'MdexSwap: K');\\r\\n        }\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\r\\n    }\\r\\n\\r\\n    // force balances to match reserves\\r\\n    function skim(address to) override external lock {\\r\\n        address _token0 = token0;\\r\\n        // gas savings\\r\\n        address _token1 = token1;\\r\\n        // gas savings\\r\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\r\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() override external lock {\\r\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    function price(address token, uint256 baseDecimal) override public view returns (uint256) {\\r\\n        if ((token0 != token && token1 != token) || 0 == reserve0 || 0 == reserve1) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (token0 == token) {\\r\\n            return uint256(reserve1).mul(baseDecimal).div(uint256(reserve0));\\r\\n        } else {\\r\\n            return uint256(reserve0).mul(baseDecimal).div(uint256(reserve1));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MdexFactory is IMdexFactory {\\r\\n    using SafeMath for uint256;\\r\\n    address public override feeTo;\\r\\n    address public override feeToSetter;\\r\\n    uint256 public override feeToRate;\\r\\n    bytes32 public initCodeHash;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public override getPair;\\r\\n    address[] public override allPairs;\\r\\n\\r\\n    // event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    constructor(address _feeToSetter) {\\r\\n        feeToSetter = _feeToSetter;\\r\\n        initCodeHash = keccak256(abi.encodePacked(type(MdexPair).creationCode));\\r\\n    }\\r\\n\\r\\n    function allPairsLength() external view override returns (uint) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\r\\n        require(tokenA != tokenB, 'MdexSwapFactory: IDENTICAL_ADDRESSES');\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'MdexSwapFactory: ZERO_ADDRESS');\\r\\n        require(getPair[token0][token1] == address(0), 'MdexSwapFactory: PAIR_EXISTS');\\r\\n        // single check is sufficient\\r\\n        bytes memory bytecode = type(MdexPair).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\r\\n        assembly {\\r\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n        IMdexPair(pair).initialize(token0, token1);\\r\\n        getPair[token0][token1] = pair;\\r\\n        getPair[token1][token0] = pair;\\r\\n        // populate mapping in the reverse direction\\r\\n        allPairs.push(pair);\\r\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\r\\n    }\\r\\n\\r\\n    function setFeeTo(address _feeTo) external override {\\r\\n        require(msg.sender == feeToSetter, 'MdexSwapFactory: FORBIDDEN');\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function setFeeToSetter(address _feeToSetter) external override {\\r\\n        require(msg.sender == feeToSetter, 'MdexSwapFactory: FORBIDDEN');\\r\\n        require(_feeToSetter != address(0), \\\"MdexSwapFactory: FeeToSetter is zero address\\\");\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n\\r\\n    function setFeeToRate(uint256 _rate) external override {\\r\\n        require(msg.sender == feeToSetter, 'MdexSwapFactory: FORBIDDEN');\\r\\n        require(_rate > 0, \\\"MdexSwapFactory: FEE_TO_RATE_OVERFLOW\\\");\\r\\n        feeToRate = _rate.sub(1);\\r\\n    }\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) public pure override returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'MdexSwapFactory: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'MdexSwapFactory: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address tokenA, address tokenB) public view override returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                address(this),\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                initCodeHash\\r\\n            ))));\\r\\n    }\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address tokenA, address tokenB) public view override returns (uint reserveA, uint reserveB) {\\r\\n        (address token0,) = sortTokens(tokenA, tokenB);\\r\\n        (uint reserve0, uint reserve1,) = IMdexPair(pairFor(tokenA, tokenB)).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure override returns (uint amountB) {\\r\\n        require(amountA > 0, 'MdexSwapFactory: INSUFFICIENT_AMOUNT');\\r\\n        require(reserveA > 0 && reserveB > 0, 'MdexSwapFactory: INSUFFICIENT_LIQUIDITY');\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure override returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'MdexSwapFactory: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'MdexSwapFactory: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure override returns (uint amountIn) {\\r\\n        require(amountOut > 0, 'MdexSwapFactory: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'MdexSwapFactory: INSUFFICIENT_LIQUIDITY');\\r\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(uint amountIn, address[] memory path) public view override returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, 'MdexSwapFactory: INVALID_PATH');\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i], path[i + 1]);\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(uint amountOut, address[] memory path) public view override returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, 'MdexSwapFactory: INVALID_PATH');\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint i = path.length - 1; i > 0; i--) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i - 1], path[i]);\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary UQ112x112 {\\r\\n    uint224 constant Q112 = 2 ** 112;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\r\\n        z = uint224(y) * Q112;\\r\\n        // never overflows\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\r\\n        z = x / uint224(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd23d3158cb196b76a4eb5f3875e0ebeec95f5b839da22d57ad311d0009b5d64b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity =0.7.6;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x0801bec55b476b394f7fd1d587a3f5559dbf682e0b66b9acd9e6a01d88d0e234\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/interface/IMdexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity =0.7.6;\\r\\n\\r\\ninterface IMdexFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function feeToRate() external view returns (uint256);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n\\r\\n    function setFeeToRate(uint256) external;\\r\\n\\r\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\r\\n\\r\\n    function pairFor(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\\r\\n\\r\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0xb3b7724351f7a9f047108da4bf16e98b43e1bb5cbf2b4c6b4bf6859dc7f41d3e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/interface/IMdexPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity =0.7.6;\\r\\n\\r\\ninterface IMdexPair {\\r\\n    // event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    // event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function price(address token, uint256 baseDecimal) external view returns (uint256);\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4d15050bab6ffc033448ad03bb4e8d5fce026436eabbc887a5b9dcefdf51493e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/library/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant WAD = 10 ** 18;\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb94b87915ba28c24f7a8f8742d94ac7f80dd5ea24cf93cce834b0fa70f47f984\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516200637b3803806200637b8339818101604052602081101561003557600080fd5b5051600180546001600160a01b0319166001600160a01b038316179055604051610061602082016100ee565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106100a75780518252601f199092019160209182019101610088565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120600381905550506100fc565b61267f8062003cfc83390190565b613bf0806200010c6000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063a2e74af6116100cd578063d52bb6f411610081578063deba86e311610066578063deba86e314610525578063e6a439051461052d578063f46901ed1461055b57610151565b8063d52bb6f4146104d6578063db4c545e1461051d57610151565b8063b5e4aa72116100b2578063b5e4aa72146103e1578063c9c65396146103fe578063d06ca61f1461042c57610151565b8063a2e74af614610390578063ad615dec146103b857610151565b80631f00ca7411610124578063574f2ba311610109578063574f2ba31461033157806385f8c2591461033957806396ed28f91461036257610151565b80631f00ca74146101da578063544caa56146102d457610151565b8063017e7e5814610156578063054d50d41461017a578063094b7415146101b55780631e3dd18b146101bd575b600080fd5b61015e610581565b604080516001600160a01b039092168252519081900360200190f35b6101a36004803603606081101561019057600080fd5b5080359060208101359060400135610590565b60408051918252519081900360200190f35b61015e610668565b61015e600480360360208110156101d357600080fd5b5035610677565b610284600480360360408110156101f057600080fd5b8135919081019060408101602082013564010000000081111561021257600080fd5b82018360208201111561022457600080fd5b8035906020019184602083028401116401000000008311171561024657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106a1945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c05781810151838201526020016102a8565b505050509050019250505060405180910390f35b610302600480360360408110156102ea57600080fd5b506001600160a01b03813581169160200135166107ec565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390f35b6101a36108ca565b6101a36004803603606081101561034f57600080fd5b50803590602081013590604001356108d0565b61015e6004803603604081101561037857600080fd5b506001600160a01b03813581169160200135166109a8565b6103b6600480360360208110156103a657600080fd5b50356001600160a01b0316610a55565b005b6101a3600480360360608110156103ce57600080fd5b5080359060208101359060400135610b28565b6103b6600480360360208110156103f757600080fd5b5035610bce565b61015e6004803603604081101561041457600080fd5b506001600160a01b0381358116916020013516610c7d565b6102846004803603604081101561044257600080fd5b8135919081019060408101602082013564010000000081111561046457600080fd5b82018360208201111561047657600080fd5b8035906020019184602083028401116401000000008311171561049857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610fa6945050505050565b610504600480360360408110156104ec57600080fd5b506001600160a01b03813581169160200135166110dc565b6040805192835260208301919091528051918290030190f35b6101a36111a8565b6101a36111ae565b61015e6004803603604081101561054357600080fd5b506001600160a01b03813581169160200135166111b4565b6103b66004803603602081101561057157600080fd5b50356001600160a01b03166111da565b6000546001600160a01b031681565b60008084116105d05760405162461bcd60e51b815260040180806020018281038252602a815260200180613ab0602a913960400191505060405180910390fd5b6000831180156105e05750600082115b61061b5760405162461bcd60e51b8152600401808060200182810382526027815260200180613ada6027913960400191505060405180910390fd5b6000610629856103e5611268565b905060006106378285611268565b905060006106518361064b886103e8611268565b906112ca565b905080828161065c57fe5b04979650505050505050565b6001546001600160a01b031681565b6005818154811061068757600080fd5b6000918252602090912001546001600160a01b0316905081565b60606002825110156106fa576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561071257600080fd5b5060405190808252806020026020018201604052801561073c578160200160208202803683370190505b509050828160018351038151811061075057fe5b60209081029190910101528151600019015b80156107e55760008061079e85600185038151811061077d57fe5b602002602001015186858151811061079157fe5b60200260200101516110dc565b915091506107c08484815181106107b157fe5b602002602001015183836108d0565b8460018503815181106107cf57fe5b6020908102919091010152505060001901610762565b5092915050565b600080826001600160a01b0316846001600160a01b031614156108405760405162461bcd60e51b8152600401808060200182810382526024815260200180613b976024913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610610860578284610863565b83835b90925090506001600160a01b0382166108c3576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b9250929050565b60055490565b60008084116109105760405162461bcd60e51b815260040180806020018281038252602b815260200180613a85602b913960400191505060405180910390fd5b6000831180156109205750600082115b61095b5760405162461bcd60e51b8152600401808060200182810382526027815260200180613ada6027913960400191505060405180910390fd5b60006109736103e861096d8688611268565b90611268565b905060006109876103e561096d8689611324565b905061099e600182848161099757fe5b04906112ca565b9695505050505050565b60008060006109b785856107ec565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b166034820152815160288183030181526048820183528051908401206003547fff0000000000000000000000000000000000000000000000000000000000000060688401523090951b6069830152607d820152609d808201949094528151808203909401845260bd019052815191012095945050505050565b6001546001600160a01b03163314610ab4576040805162461bcd60e51b815260206004820152601a60248201527f4d64657853776170466163746f72793a20464f5242494444454e000000000000604482015290519081900360640190fd5b6001600160a01b038116610af95760405162461bcd60e51b815260040180806020018281038252602c815260200180613b01602c913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000808411610b685760405162461bcd60e51b8152600401808060200182810382526024815260200180613b2d6024913960400191505060405180910390fd5b600083118015610b785750600082115b610bb35760405162461bcd60e51b8152600401808060200182810382526027815260200180613ada6027913960400191505060405180910390fd5b82610bbe8584611268565b81610bc557fe5b04949350505050565b6001546001600160a01b03163314610c2d576040805162461bcd60e51b815260206004820152601a60248201527f4d64657853776170466163746f72793a20464f5242494444454e000000000000604482015290519081900360640190fd5b60008111610c6c5760405162461bcd60e51b8152600401808060200182810382526025815260200180613b726025913960400191505060405180910390fd5b610c77816001611324565b60025550565b6000816001600160a01b0316836001600160a01b03161415610cd05760405162461bcd60e51b8152600401808060200182810382526024815260200180613b976024913960400191505060405180910390fd5b600080836001600160a01b0316856001600160a01b031610610cf3578385610cf6565b84845b90925090506001600160a01b038216610d56576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615610dd0576040805162461bcd60e51b815260206004820152601c60248201527f4d64657853776170466163746f72793a20504149525f45584953545300000000604482015290519081900360640190fd5b600060405180602001610de2906113f8565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015610eaf57600080fd5b505af1158015610ec3573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d1673ffffffffffffffffffffffffffffffffffffffff1998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b6060600282511015610fff576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561101757600080fd5b50604051908082528060200260200182016040528015611041578160200160208202803683370190505b509050828160008151811061105257fe5b60200260200101818152505060005b60018351038110156107e55760008061109685848151811061107f57fe5b602002602001015186856001018151811061079157fe5b915091506110b88484815181106110a957fe5b60200260200101518383610590565b8484600101815181106110c757fe5b60209081029190910101525050600101611061565b60008060006110eb85856107ec565b5090506000806110fb87876109a8565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d606081101561115d57600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b038781169084161461119757808261119a565b81815b909890975095505050505050565b60035481565b60025481565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314611239576040805162461bcd60e51b815260206004820152601a60248201527f4d64657853776170466163746f72793a20464f5242494444454e000000000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600082611277575060006112c4565b8282028284828161128457fe5b04146112c15760405162461bcd60e51b8152600401808060200182810382526021815260200180613b516021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156112c1576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006112c183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156113f05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113b557818101518382015260200161139d565b50505050905090810190601f1680156113e25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b61267f806114068339019056fe6080604052600160075534801561001557600080fd5b50604080518082018252600e81526d2429bbb0b8102628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f87dad95daa867d5e0494900019e929bdf17f889d19a25c4156e2329f51c7c345818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600b55600080546001600160a01b031916331790556125738061010c6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a71461057b578063d505accf14610583578063dd62ed3e146105d4578063fff6cae914610602576101c4565b8063ba9a7a5614610545578063bc25cf771461054d578063c45a015514610573576101c4565b806389afcb44116100d357806389afcb44146104a657806395d89b41146104e5578063a9059cbb146104ed578063ad9b802414610519576101c4565b806370a08231146104525780637464fc3d146104785780637ecebe0014610480576101c4565b806330adf81f11610166578063485cc95511610140578063485cc955146103ee5780635909c0d51461041c5780635a3d5493146104245780636a6278421461042c576101c4565b806330adf81f146103c0578063313ce567146103c85780633644e515146103e6576101c4565b8063095ea7b3116101a2578063095ea7b31461030c5780630dfe16811461034c57806318160ddd1461037057806323b872dd1461038a576101c4565b8063022c0d9f146101c957806306fdde03146102575780630902f1ac146102d4575b600080fd5b610255600480360360808110156101df57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561021657600080fd5b82018360208201111561022857600080fd5b8035906020019184600183028401116401000000008311171561024a57600080fd5b50909250905061060a565b005b61025f610b40565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610299578181015183820152602001610281565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102dc610b79565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103386004803603604081101561032257600080fd5b506001600160a01b038135169060200135610ba3565b604080519115158252519081900360200190f35b610354610bba565b604080516001600160a01b039092168252519081900360200190f35b610378610bc9565b60408051918252519081900360200190f35b610338600480360360608110156103a057600080fd5b506001600160a01b03813581169160208101359091169060400135610bcf565b610378610c63565b6103d0610c87565b6040805160ff9092168252519081900360200190f35b610378610c8c565b6102556004803603604081101561040457600080fd5b506001600160a01b0381358116916020013516610c92565b610378610d37565b610378610d3d565b6103786004803603602081101561044257600080fd5b50356001600160a01b0316610d43565b6103786004803603602081101561046857600080fd5b50356001600160a01b031661101e565b610378611030565b6103786004803603602081101561049657600080fd5b50356001600160a01b0316611036565b6104cc600480360360208110156104bc57600080fd5b50356001600160a01b0316611048565b6040805192835260208301919091528051918290030190f35b61025f6113db565b6103386004803603604081101561050357600080fd5b506001600160a01b038135169060200135611414565b6103786004803603604081101561052f57600080fd5b506001600160a01b038135169060200135611421565b6103786114f9565b6102556004803603602081101561056357600080fd5b50356001600160a01b03166114ff565b610354611670565b61035461167f565b610255600480360360e081101561059957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561168e565b610378600480360360408110156105ea57600080fd5b506001600160a01b03813581169160200135166118b6565b6102556118d3565b600754600114610654576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600755841515806106675750600084115b6106a25760405162461bcd60e51b81526004018080602001828103825260248152602001806124af6024913960400191505060405180910390fd5b6000806106ad610b79565b5091509150816001600160701b0316871080156106d25750806001600160701b031686105b610723576040805162461bcd60e51b815260206004820181905260248201527f4d646578537761703a20494e53554646494349454e545f4c4951554944495459604482015290519081900360640190fd5b60015460025460009182916001600160a01b039182169190811690891682148015906107615750806001600160a01b0316896001600160a01b031614155b6107b2576040805162461bcd60e51b815260206004820152601460248201527f4d646578537761703a20494e56414c49445f544f000000000000000000000000604482015290519081900360640190fd5b8a156107c3576107c3828a8d611a34565b89156107d4576107d4818a8c611a34565b861561088657886001600160a01b031663226dc882338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561086d57600080fd5b505af1158015610881573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d60208110156108f657600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561094257600080fd5b505afa158015610956573d6000803e3d6000fd5b505050506040513d602081101561096c57600080fd5b5051925060009150506001600160701b0385168a9003831161098f57600061099e565b89856001600160701b03160383035b9050600089856001600160701b03160383116109bb5760006109ca565b89856001600160701b03160383035b905060008211806109db5750600081115b610a165760405162461bcd60e51b81526004018080602001828103825260238152602001806124f46023913960400191505060405180910390fd5b6000610a38610a26846003611be6565b610a32876103e8611be6565b90611c46565b90506000610a4a610a26846003611be6565b9050610a6f620f4240610a696001600160701b038b8116908b16611be6565b90611be6565b610a798383611be6565b1015610acc576040805162461bcd60e51b815260206004820152600b60248201527f4d646578537761703a204b000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610ada84848888611c88565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600755505050505050505050565b6040518060400160405280600e81526020017f4853776170204c5020546f6b656e00000000000000000000000000000000000081525081565b6003546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610bb0338484611e5f565b5060015b92915050565b6001546001600160a01b031681565b60085481565b6001600160a01b0383166000908152600a6020908152604080832033845290915281205460001914610c4e576001600160a01b0384166000908152600a60209081526040808320338452909152902054610c299083611c46565b6001600160a01b0385166000908152600a602090815260408083203384529091529020555b610c59848484611ec1565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600b5481565b6000546001600160a01b03163314610cf1576040805162461bcd60e51b815260206004820152601360248201527f4d646578537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600180546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560028054929093169116179055565b60045481565b60055481565b6000600754600114610d8f576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600781905580610d9f610b79565b50600154604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610df357600080fd5b505afa158015610e07573d6000803e3d6000fd5b505050506040513d6020811015610e1d57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e7057600080fd5b505afa158015610e84573d6000803e3d6000fd5b505050506040513d6020811015610e9a57600080fd5b505190506000610eb3836001600160701b038716611c46565b90506000610eca836001600160701b038716611c46565b90506000610ed88787611f6f565b60085490915080610f0f57610efb6103e8610a32610ef68787611be6565b612133565b9850610f0a60006103e8612185565b610f52565b610f4f6001600160701b038916610f268684611be6565b81610f2d57fe5b046001600160701b038916610f428685611be6565b81610f4957fe5b04612210565b98505b60008911610f915760405162461bcd60e51b81526004018080602001828103825260278152602001806125176027913960400191505060405180910390fd5b610f9b8a8a612185565b610fa786868a8a611c88565b8115610fd157600354610fcd906001600160701b0380821691600160701b900416611be6565b6006555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a25050600160075550949695505050505050565b60096020526000908152604090205481565b60065481565b600c6020526000908152604090205481565b600080600754600114611095576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b60006007819055806110a5610b79565b50600154600254604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561110157600080fd5b505afa158015611115573d6000803e3d6000fd5b505050506040513d602081101561112b57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d60208110156111a357600080fd5b5051306000908152600960205260408120549192506111c28888611f6f565b600854909150806111d38487611be6565b816111da57fe5b049a50806111e88486611be6565b816111ef57fe5b04995060008b118015611202575060008a115b61123d5760405162461bcd60e51b81526004018080602001828103825260278152602001806124886027913960400191505060405180910390fd5b6112473084612227565b611252878d8d611a34565b61125d868d8c611a34565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156112a357600080fd5b505afa1580156112b7573d6000803e3d6000fd5b505050506040513d60208110156112cd57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561131957600080fd5b505afa15801561132d573d6000803e3d6000fd5b505050506040513d602081101561134357600080fd5b5051935061135385858b8b611c88565b811561137d57600354611379906001600160701b0380821691600160701b900416611be6565b6006555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600781905550915091565b6040518060400160405280600481526020017f484d44580000000000000000000000000000000000000000000000000000000081525081565b6000610bb0338484611ec1565b6001546000906001600160a01b0384811691161480159061145057506002546001600160a01b03848116911614155b8061146457506003546001600160701b0316155b8061147f5750600354600160701b90046001600160701b0316155b1561148c57506000610bb4565b6001546001600160a01b03848116911614156114d5576003546114ce906001600160701b03808216916114c891600160701b9091041685611be6565b906122b8565b9050610bb4565b6003546114ce906001600160701b03600160701b82048116916114c8911685611be6565b6103e881565b600754600114611549576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600755600154600254600354604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926115f292859287926115ed926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156115bb57600080fd5b505afa1580156115cf573d6000803e3d6000fd5b505050506040513d60208110156115e557600080fd5b505190611c46565b611a34565b61166681846115ed6003600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156115bb57600080fd5b5050600160075550565b6000546001600160a01b031681565b6002546001600160a01b031681565b428410156116e3576040805162461bcd60e51b815260206004820152601160248201527f4d646578537761703a2045585049524544000000000000000000000000000000604482015290519081900360640190fd5b600b546001600160a01b038089166000818152600c602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611819573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061184f5750886001600160a01b0316816001600160a01b0316145b6118a0576040805162461bcd60e51b815260206004820152601b60248201527f4d646578537761703a20494e56414c49445f5349474e41545552450000000000604482015290519081900360640190fd5b6118ab898989611e5f565b505050505050505050565b600a60209081526000928352604080842090915290825290205481565b60075460011461191d576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600755600154604080516370a0823160e01b81523060048201529051611a2d926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561196e57600080fd5b505afa158015611982573d6000803e3d6000fd5b505050506040513d602081101561199857600080fd5b5051600254604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156119e557600080fd5b505afa1580156119f9573d6000803e3d6000fd5b505050506040513d6020811015611a0f57600080fd5b50516003546001600160701b0380821691600160701b900416611c88565b6001600755565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017815292518151600094859489169392918291908083835b60208310611af95780518252601f199092019160209182019101611ada565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b5b576040519150601f19603f3d011682016040523d82523d6000602084013e611b60565b606091505b5091509150818015611b8e575080511580611b8e5750808060200190516020811015611b8b57600080fd5b50515b611bdf576040805162461bcd60e51b815260206004820152601960248201527f4d646578537761703a205452414e534645525f4641494c454400000000000000604482015290519081900360640190fd5b5050505050565b600082611bf557506000610bb4565b82820282848281611c0257fe5b0414611c3f5760405162461bcd60e51b81526004018080602001828103825260218152602001806124d36021913960400191505060405180910390fd5b9392505050565b6000611c3f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506122fa565b6001600160701b038411801590611ca657506001600160701b038311155b611cf7576040805162461bcd60e51b815260206004820152601260248201527f4d646578537761703a204f564552464c4f570000000000000000000000000000604482015290519081900360640190fd5b60035463ffffffff42811691600160e01b90048116820390811615801590611d2757506001600160701b03841615155b8015611d3b57506001600160701b03831615155b15611da6578063ffffffff16611d6385611d5486612391565b6001600160e01b0316906123a3565b600480546001600160e01b03929092169290920201905563ffffffff8116611d8e84611d5487612391565b600580546001600160e01b0392909216929092020190555b600380546dffffffffffffffffffffffffffff19166001600160701b03888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b038084166000818152600a6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260096020526040902054611ee49082611c46565b6001600160a01b038085166000908152600960205260408082209390935590841681522054611f1390826123c8565b6001600160a01b0380841660008181526009602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008054604080517f017e7e58000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163017e7e58916004808301926020929190829003018186803b158015611fcd57600080fd5b505afa158015611fe1573d6000803e3d6000fd5b505050506040513d6020811015611ff757600080fd5b50516006546001600160a01b03821615801594509192509061211f57801561211a576000612034610ef66001600160701b03888116908816611be6565b9050600061204183612133565b90508082111561211757600061206361205a8484611c46565b60085490611be6565b905060006120f3836120ed60008054906101000a90046001600160a01b03166001600160a01b031663deba86e36040518163ffffffff1660e01b815260040160206040518083038186803b1580156120ba57600080fd5b505afa1580156120ce573d6000803e3d6000fd5b505050506040513d60208110156120e457600080fd5b50518790611be6565b906123c8565b9050600081838161210057fe5b0490508015612113576121138782612185565b5050505b50505b61212b565b801561212b5760006006555b505092915050565b60006003821115612176575080600160028204015b818110156121705780915060028182858161215f57fe5b04018161216857fe5b049050612148565b50612180565b8115612180575060015b919050565b60085461219290826123c8565b6008556001600160a01b0382166000908152600960205260409020546121b890826123c8565b6001600160a01b03831660008181526009602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818311156122205781611c3f565b5090919050565b6001600160a01b03821660009081526009602052604090205461224a9082611c46565b6001600160a01b0383166000908152600960205260409020556008546122709082611c46565b6008556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000611c3f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612422565b600081848411156123895760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561234e578181015183820152602001612336565b50505050905090810190601f16801561237b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816123c057fe5b049392505050565b600082820183811015611c3f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081836124715760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561234e578181015183820152602001612336565b50600083858161247d57fe5b049594505050505056fe4d646578537761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444d646578537761703a20494e53554646494349454e545f4f55545055545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d646578537761703a20494e53554646494349454e545f494e5055545f414d4f554e544d646578537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220898f25e34c62f15dc00cb0ac01aac5294131079a217c681f93e51606484f4bba64736f6c634300070600334d64657853776170466163746f72793a20494e53554646494349454e545f4f55545055545f414d4f554e544d64657853776170466163746f72793a20494e53554646494349454e545f494e5055545f414d4f554e544d64657853776170466163746f72793a20494e53554646494349454e545f4c49515549444954594d64657853776170466163746f72793a20466565546f536574746572206973207a65726f20616464726573734d64657853776170466163746f72793a20494e53554646494349454e545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d64657853776170466163746f72793a204645455f544f5f524154455f4f564552464c4f574d64657853776170466163746f72793a204944454e544943414c5f414444524553534553a2646970667358221220a09babf5a29382ea0027914c4fda31fc10815e152bbbdef1a212c8da6ddd7e3d64736f6c634300070600336080604052600160075534801561001557600080fd5b50604080518082018252600e81526d2429bbb0b8102628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f87dad95daa867d5e0494900019e929bdf17f889d19a25c4156e2329f51c7c345818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600b55600080546001600160a01b031916331790556125738061010c6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a71461057b578063d505accf14610583578063dd62ed3e146105d4578063fff6cae914610602576101c4565b8063ba9a7a5614610545578063bc25cf771461054d578063c45a015514610573576101c4565b806389afcb44116100d357806389afcb44146104a657806395d89b41146104e5578063a9059cbb146104ed578063ad9b802414610519576101c4565b806370a08231146104525780637464fc3d146104785780637ecebe0014610480576101c4565b806330adf81f11610166578063485cc95511610140578063485cc955146103ee5780635909c0d51461041c5780635a3d5493146104245780636a6278421461042c576101c4565b806330adf81f146103c0578063313ce567146103c85780633644e515146103e6576101c4565b8063095ea7b3116101a2578063095ea7b31461030c5780630dfe16811461034c57806318160ddd1461037057806323b872dd1461038a576101c4565b8063022c0d9f146101c957806306fdde03146102575780630902f1ac146102d4575b600080fd5b610255600480360360808110156101df57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561021657600080fd5b82018360208201111561022857600080fd5b8035906020019184600183028401116401000000008311171561024a57600080fd5b50909250905061060a565b005b61025f610b40565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610299578181015183820152602001610281565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102dc610b79565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103386004803603604081101561032257600080fd5b506001600160a01b038135169060200135610ba3565b604080519115158252519081900360200190f35b610354610bba565b604080516001600160a01b039092168252519081900360200190f35b610378610bc9565b60408051918252519081900360200190f35b610338600480360360608110156103a057600080fd5b506001600160a01b03813581169160208101359091169060400135610bcf565b610378610c63565b6103d0610c87565b6040805160ff9092168252519081900360200190f35b610378610c8c565b6102556004803603604081101561040457600080fd5b506001600160a01b0381358116916020013516610c92565b610378610d37565b610378610d3d565b6103786004803603602081101561044257600080fd5b50356001600160a01b0316610d43565b6103786004803603602081101561046857600080fd5b50356001600160a01b031661101e565b610378611030565b6103786004803603602081101561049657600080fd5b50356001600160a01b0316611036565b6104cc600480360360208110156104bc57600080fd5b50356001600160a01b0316611048565b6040805192835260208301919091528051918290030190f35b61025f6113db565b6103386004803603604081101561050357600080fd5b506001600160a01b038135169060200135611414565b6103786004803603604081101561052f57600080fd5b506001600160a01b038135169060200135611421565b6103786114f9565b6102556004803603602081101561056357600080fd5b50356001600160a01b03166114ff565b610354611670565b61035461167f565b610255600480360360e081101561059957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561168e565b610378600480360360408110156105ea57600080fd5b506001600160a01b03813581169160200135166118b6565b6102556118d3565b600754600114610654576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600755841515806106675750600084115b6106a25760405162461bcd60e51b81526004018080602001828103825260248152602001806124af6024913960400191505060405180910390fd5b6000806106ad610b79565b5091509150816001600160701b0316871080156106d25750806001600160701b031686105b610723576040805162461bcd60e51b815260206004820181905260248201527f4d646578537761703a20494e53554646494349454e545f4c4951554944495459604482015290519081900360640190fd5b60015460025460009182916001600160a01b039182169190811690891682148015906107615750806001600160a01b0316896001600160a01b031614155b6107b2576040805162461bcd60e51b815260206004820152601460248201527f4d646578537761703a20494e56414c49445f544f000000000000000000000000604482015290519081900360640190fd5b8a156107c3576107c3828a8d611a34565b89156107d4576107d4818a8c611a34565b861561088657886001600160a01b031663226dc882338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561086d57600080fd5b505af1158015610881573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d60208110156108f657600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561094257600080fd5b505afa158015610956573d6000803e3d6000fd5b505050506040513d602081101561096c57600080fd5b5051925060009150506001600160701b0385168a9003831161098f57600061099e565b89856001600160701b03160383035b9050600089856001600160701b03160383116109bb5760006109ca565b89856001600160701b03160383035b905060008211806109db5750600081115b610a165760405162461bcd60e51b81526004018080602001828103825260238152602001806124f46023913960400191505060405180910390fd5b6000610a38610a26846003611be6565b610a32876103e8611be6565b90611c46565b90506000610a4a610a26846003611be6565b9050610a6f620f4240610a696001600160701b038b8116908b16611be6565b90611be6565b610a798383611be6565b1015610acc576040805162461bcd60e51b815260206004820152600b60248201527f4d646578537761703a204b000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610ada84848888611c88565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600755505050505050505050565b6040518060400160405280600e81526020017f4853776170204c5020546f6b656e00000000000000000000000000000000000081525081565b6003546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610bb0338484611e5f565b5060015b92915050565b6001546001600160a01b031681565b60085481565b6001600160a01b0383166000908152600a6020908152604080832033845290915281205460001914610c4e576001600160a01b0384166000908152600a60209081526040808320338452909152902054610c299083611c46565b6001600160a01b0385166000908152600a602090815260408083203384529091529020555b610c59848484611ec1565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600b5481565b6000546001600160a01b03163314610cf1576040805162461bcd60e51b815260206004820152601360248201527f4d646578537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600180546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560028054929093169116179055565b60045481565b60055481565b6000600754600114610d8f576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600781905580610d9f610b79565b50600154604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610df357600080fd5b505afa158015610e07573d6000803e3d6000fd5b505050506040513d6020811015610e1d57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e7057600080fd5b505afa158015610e84573d6000803e3d6000fd5b505050506040513d6020811015610e9a57600080fd5b505190506000610eb3836001600160701b038716611c46565b90506000610eca836001600160701b038716611c46565b90506000610ed88787611f6f565b60085490915080610f0f57610efb6103e8610a32610ef68787611be6565b612133565b9850610f0a60006103e8612185565b610f52565b610f4f6001600160701b038916610f268684611be6565b81610f2d57fe5b046001600160701b038916610f428685611be6565b81610f4957fe5b04612210565b98505b60008911610f915760405162461bcd60e51b81526004018080602001828103825260278152602001806125176027913960400191505060405180910390fd5b610f9b8a8a612185565b610fa786868a8a611c88565b8115610fd157600354610fcd906001600160701b0380821691600160701b900416611be6565b6006555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a25050600160075550949695505050505050565b60096020526000908152604090205481565b60065481565b600c6020526000908152604090205481565b600080600754600114611095576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b60006007819055806110a5610b79565b50600154600254604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561110157600080fd5b505afa158015611115573d6000803e3d6000fd5b505050506040513d602081101561112b57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d60208110156111a357600080fd5b5051306000908152600960205260408120549192506111c28888611f6f565b600854909150806111d38487611be6565b816111da57fe5b049a50806111e88486611be6565b816111ef57fe5b04995060008b118015611202575060008a115b61123d5760405162461bcd60e51b81526004018080602001828103825260278152602001806124886027913960400191505060405180910390fd5b6112473084612227565b611252878d8d611a34565b61125d868d8c611a34565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156112a357600080fd5b505afa1580156112b7573d6000803e3d6000fd5b505050506040513d60208110156112cd57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561131957600080fd5b505afa15801561132d573d6000803e3d6000fd5b505050506040513d602081101561134357600080fd5b5051935061135385858b8b611c88565b811561137d57600354611379906001600160701b0380821691600160701b900416611be6565b6006555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600781905550915091565b6040518060400160405280600481526020017f484d44580000000000000000000000000000000000000000000000000000000081525081565b6000610bb0338484611ec1565b6001546000906001600160a01b0384811691161480159061145057506002546001600160a01b03848116911614155b8061146457506003546001600160701b0316155b8061147f5750600354600160701b90046001600160701b0316155b1561148c57506000610bb4565b6001546001600160a01b03848116911614156114d5576003546114ce906001600160701b03808216916114c891600160701b9091041685611be6565b906122b8565b9050610bb4565b6003546114ce906001600160701b03600160701b82048116916114c8911685611be6565b6103e881565b600754600114611549576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600755600154600254600354604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926115f292859287926115ed926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156115bb57600080fd5b505afa1580156115cf573d6000803e3d6000fd5b505050506040513d60208110156115e557600080fd5b505190611c46565b611a34565b61166681846115ed6003600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156115bb57600080fd5b5050600160075550565b6000546001600160a01b031681565b6002546001600160a01b031681565b428410156116e3576040805162461bcd60e51b815260206004820152601160248201527f4d646578537761703a2045585049524544000000000000000000000000000000604482015290519081900360640190fd5b600b546001600160a01b038089166000818152600c602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611819573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061184f5750886001600160a01b0316816001600160a01b0316145b6118a0576040805162461bcd60e51b815260206004820152601b60248201527f4d646578537761703a20494e56414c49445f5349474e41545552450000000000604482015290519081900360640190fd5b6118ab898989611e5f565b505050505050505050565b600a60209081526000928352604080842090915290825290205481565b60075460011461191d576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600755600154604080516370a0823160e01b81523060048201529051611a2d926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561196e57600080fd5b505afa158015611982573d6000803e3d6000fd5b505050506040513d602081101561199857600080fd5b5051600254604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156119e557600080fd5b505afa1580156119f9573d6000803e3d6000fd5b505050506040513d6020811015611a0f57600080fd5b50516003546001600160701b0380821691600160701b900416611c88565b6001600755565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017815292518151600094859489169392918291908083835b60208310611af95780518252601f199092019160209182019101611ada565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b5b576040519150601f19603f3d011682016040523d82523d6000602084013e611b60565b606091505b5091509150818015611b8e575080511580611b8e5750808060200190516020811015611b8b57600080fd5b50515b611bdf576040805162461bcd60e51b815260206004820152601960248201527f4d646578537761703a205452414e534645525f4641494c454400000000000000604482015290519081900360640190fd5b5050505050565b600082611bf557506000610bb4565b82820282848281611c0257fe5b0414611c3f5760405162461bcd60e51b81526004018080602001828103825260218152602001806124d36021913960400191505060405180910390fd5b9392505050565b6000611c3f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506122fa565b6001600160701b038411801590611ca657506001600160701b038311155b611cf7576040805162461bcd60e51b815260206004820152601260248201527f4d646578537761703a204f564552464c4f570000000000000000000000000000604482015290519081900360640190fd5b60035463ffffffff42811691600160e01b90048116820390811615801590611d2757506001600160701b03841615155b8015611d3b57506001600160701b03831615155b15611da6578063ffffffff16611d6385611d5486612391565b6001600160e01b0316906123a3565b600480546001600160e01b03929092169290920201905563ffffffff8116611d8e84611d5487612391565b600580546001600160e01b0392909216929092020190555b600380546dffffffffffffffffffffffffffff19166001600160701b03888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b038084166000818152600a6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260096020526040902054611ee49082611c46565b6001600160a01b038085166000908152600960205260408082209390935590841681522054611f1390826123c8565b6001600160a01b0380841660008181526009602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008054604080517f017e7e58000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163017e7e58916004808301926020929190829003018186803b158015611fcd57600080fd5b505afa158015611fe1573d6000803e3d6000fd5b505050506040513d6020811015611ff757600080fd5b50516006546001600160a01b03821615801594509192509061211f57801561211a576000612034610ef66001600160701b03888116908816611be6565b9050600061204183612133565b90508082111561211757600061206361205a8484611c46565b60085490611be6565b905060006120f3836120ed60008054906101000a90046001600160a01b03166001600160a01b031663deba86e36040518163ffffffff1660e01b815260040160206040518083038186803b1580156120ba57600080fd5b505afa1580156120ce573d6000803e3d6000fd5b505050506040513d60208110156120e457600080fd5b50518790611be6565b906123c8565b9050600081838161210057fe5b0490508015612113576121138782612185565b5050505b50505b61212b565b801561212b5760006006555b505092915050565b60006003821115612176575080600160028204015b818110156121705780915060028182858161215f57fe5b04018161216857fe5b049050612148565b50612180565b8115612180575060015b919050565b60085461219290826123c8565b6008556001600160a01b0382166000908152600960205260409020546121b890826123c8565b6001600160a01b03831660008181526009602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818311156122205781611c3f565b5090919050565b6001600160a01b03821660009081526009602052604090205461224a9082611c46565b6001600160a01b0383166000908152600960205260409020556008546122709082611c46565b6008556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000611c3f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612422565b600081848411156123895760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561234e578181015183820152602001612336565b50505050905090810190601f16801561237b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816123c057fe5b049392505050565b600082820183811015611c3f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081836124715760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561234e578181015183820152602001612336565b50600083858161247d57fe5b049594505050505056fe4d646578537761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444d646578537761703a20494e53554646494349454e545f4f55545055545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d646578537761703a20494e53554646494349454e545f494e5055545f414d4f554e544d646578537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220898f25e34c62f15dc00cb0ac01aac5294131079a217c681f93e51606484f4bba64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063a2e74af6116100cd578063d52bb6f411610081578063deba86e311610066578063deba86e314610525578063e6a439051461052d578063f46901ed1461055b57610151565b8063d52bb6f4146104d6578063db4c545e1461051d57610151565b8063b5e4aa72116100b2578063b5e4aa72146103e1578063c9c65396146103fe578063d06ca61f1461042c57610151565b8063a2e74af614610390578063ad615dec146103b857610151565b80631f00ca7411610124578063574f2ba311610109578063574f2ba31461033157806385f8c2591461033957806396ed28f91461036257610151565b80631f00ca74146101da578063544caa56146102d457610151565b8063017e7e5814610156578063054d50d41461017a578063094b7415146101b55780631e3dd18b146101bd575b600080fd5b61015e610581565b604080516001600160a01b039092168252519081900360200190f35b6101a36004803603606081101561019057600080fd5b5080359060208101359060400135610590565b60408051918252519081900360200190f35b61015e610668565b61015e600480360360208110156101d357600080fd5b5035610677565b610284600480360360408110156101f057600080fd5b8135919081019060408101602082013564010000000081111561021257600080fd5b82018360208201111561022457600080fd5b8035906020019184602083028401116401000000008311171561024657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106a1945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c05781810151838201526020016102a8565b505050509050019250505060405180910390f35b610302600480360360408110156102ea57600080fd5b506001600160a01b03813581169160200135166107ec565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390f35b6101a36108ca565b6101a36004803603606081101561034f57600080fd5b50803590602081013590604001356108d0565b61015e6004803603604081101561037857600080fd5b506001600160a01b03813581169160200135166109a8565b6103b6600480360360208110156103a657600080fd5b50356001600160a01b0316610a55565b005b6101a3600480360360608110156103ce57600080fd5b5080359060208101359060400135610b28565b6103b6600480360360208110156103f757600080fd5b5035610bce565b61015e6004803603604081101561041457600080fd5b506001600160a01b0381358116916020013516610c7d565b6102846004803603604081101561044257600080fd5b8135919081019060408101602082013564010000000081111561046457600080fd5b82018360208201111561047657600080fd5b8035906020019184602083028401116401000000008311171561049857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610fa6945050505050565b610504600480360360408110156104ec57600080fd5b506001600160a01b03813581169160200135166110dc565b6040805192835260208301919091528051918290030190f35b6101a36111a8565b6101a36111ae565b61015e6004803603604081101561054357600080fd5b506001600160a01b03813581169160200135166111b4565b6103b66004803603602081101561057157600080fd5b50356001600160a01b03166111da565b6000546001600160a01b031681565b60008084116105d05760405162461bcd60e51b815260040180806020018281038252602a815260200180613ab0602a913960400191505060405180910390fd5b6000831180156105e05750600082115b61061b5760405162461bcd60e51b8152600401808060200182810382526027815260200180613ada6027913960400191505060405180910390fd5b6000610629856103e5611268565b905060006106378285611268565b905060006106518361064b886103e8611268565b906112ca565b905080828161065c57fe5b04979650505050505050565b6001546001600160a01b031681565b6005818154811061068757600080fd5b6000918252602090912001546001600160a01b0316905081565b60606002825110156106fa576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561071257600080fd5b5060405190808252806020026020018201604052801561073c578160200160208202803683370190505b509050828160018351038151811061075057fe5b60209081029190910101528151600019015b80156107e55760008061079e85600185038151811061077d57fe5b602002602001015186858151811061079157fe5b60200260200101516110dc565b915091506107c08484815181106107b157fe5b602002602001015183836108d0565b8460018503815181106107cf57fe5b6020908102919091010152505060001901610762565b5092915050565b600080826001600160a01b0316846001600160a01b031614156108405760405162461bcd60e51b8152600401808060200182810382526024815260200180613b976024913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610610860578284610863565b83835b90925090506001600160a01b0382166108c3576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b9250929050565b60055490565b60008084116109105760405162461bcd60e51b815260040180806020018281038252602b815260200180613a85602b913960400191505060405180910390fd5b6000831180156109205750600082115b61095b5760405162461bcd60e51b8152600401808060200182810382526027815260200180613ada6027913960400191505060405180910390fd5b60006109736103e861096d8688611268565b90611268565b905060006109876103e561096d8689611324565b905061099e600182848161099757fe5b04906112ca565b9695505050505050565b60008060006109b785856107ec565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b166034820152815160288183030181526048820183528051908401206003547fff0000000000000000000000000000000000000000000000000000000000000060688401523090951b6069830152607d820152609d808201949094528151808203909401845260bd019052815191012095945050505050565b6001546001600160a01b03163314610ab4576040805162461bcd60e51b815260206004820152601a60248201527f4d64657853776170466163746f72793a20464f5242494444454e000000000000604482015290519081900360640190fd5b6001600160a01b038116610af95760405162461bcd60e51b815260040180806020018281038252602c815260200180613b01602c913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000808411610b685760405162461bcd60e51b8152600401808060200182810382526024815260200180613b2d6024913960400191505060405180910390fd5b600083118015610b785750600082115b610bb35760405162461bcd60e51b8152600401808060200182810382526027815260200180613ada6027913960400191505060405180910390fd5b82610bbe8584611268565b81610bc557fe5b04949350505050565b6001546001600160a01b03163314610c2d576040805162461bcd60e51b815260206004820152601a60248201527f4d64657853776170466163746f72793a20464f5242494444454e000000000000604482015290519081900360640190fd5b60008111610c6c5760405162461bcd60e51b8152600401808060200182810382526025815260200180613b726025913960400191505060405180910390fd5b610c77816001611324565b60025550565b6000816001600160a01b0316836001600160a01b03161415610cd05760405162461bcd60e51b8152600401808060200182810382526024815260200180613b976024913960400191505060405180910390fd5b600080836001600160a01b0316856001600160a01b031610610cf3578385610cf6565b84845b90925090506001600160a01b038216610d56576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615610dd0576040805162461bcd60e51b815260206004820152601c60248201527f4d64657853776170466163746f72793a20504149525f45584953545300000000604482015290519081900360640190fd5b600060405180602001610de2906113f8565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015610eaf57600080fd5b505af1158015610ec3573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d1673ffffffffffffffffffffffffffffffffffffffff1998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b6060600282511015610fff576040805162461bcd60e51b815260206004820152601d60248201527f4d64657853776170466163746f72793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561101757600080fd5b50604051908082528060200260200182016040528015611041578160200160208202803683370190505b509050828160008151811061105257fe5b60200260200101818152505060005b60018351038110156107e55760008061109685848151811061107f57fe5b602002602001015186856001018151811061079157fe5b915091506110b88484815181106110a957fe5b60200260200101518383610590565b8484600101815181106110c757fe5b60209081029190910101525050600101611061565b60008060006110eb85856107ec565b5090506000806110fb87876109a8565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d606081101561115d57600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b038781169084161461119757808261119a565b81815b909890975095505050505050565b60035481565b60025481565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314611239576040805162461bcd60e51b815260206004820152601a60248201527f4d64657853776170466163746f72793a20464f5242494444454e000000000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600082611277575060006112c4565b8282028284828161128457fe5b04146112c15760405162461bcd60e51b8152600401808060200182810382526021815260200180613b516021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156112c1576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006112c183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156113f05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113b557818101518382015260200161139d565b50505050905090810190601f1680156113e25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b61267f806114068339019056fe6080604052600160075534801561001557600080fd5b50604080518082018252600e81526d2429bbb0b8102628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f87dad95daa867d5e0494900019e929bdf17f889d19a25c4156e2329f51c7c345818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600b55600080546001600160a01b031916331790556125738061010c6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a71461057b578063d505accf14610583578063dd62ed3e146105d4578063fff6cae914610602576101c4565b8063ba9a7a5614610545578063bc25cf771461054d578063c45a015514610573576101c4565b806389afcb44116100d357806389afcb44146104a657806395d89b41146104e5578063a9059cbb146104ed578063ad9b802414610519576101c4565b806370a08231146104525780637464fc3d146104785780637ecebe0014610480576101c4565b806330adf81f11610166578063485cc95511610140578063485cc955146103ee5780635909c0d51461041c5780635a3d5493146104245780636a6278421461042c576101c4565b806330adf81f146103c0578063313ce567146103c85780633644e515146103e6576101c4565b8063095ea7b3116101a2578063095ea7b31461030c5780630dfe16811461034c57806318160ddd1461037057806323b872dd1461038a576101c4565b8063022c0d9f146101c957806306fdde03146102575780630902f1ac146102d4575b600080fd5b610255600480360360808110156101df57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561021657600080fd5b82018360208201111561022857600080fd5b8035906020019184600183028401116401000000008311171561024a57600080fd5b50909250905061060a565b005b61025f610b40565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610299578181015183820152602001610281565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102dc610b79565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103386004803603604081101561032257600080fd5b506001600160a01b038135169060200135610ba3565b604080519115158252519081900360200190f35b610354610bba565b604080516001600160a01b039092168252519081900360200190f35b610378610bc9565b60408051918252519081900360200190f35b610338600480360360608110156103a057600080fd5b506001600160a01b03813581169160208101359091169060400135610bcf565b610378610c63565b6103d0610c87565b6040805160ff9092168252519081900360200190f35b610378610c8c565b6102556004803603604081101561040457600080fd5b506001600160a01b0381358116916020013516610c92565b610378610d37565b610378610d3d565b6103786004803603602081101561044257600080fd5b50356001600160a01b0316610d43565b6103786004803603602081101561046857600080fd5b50356001600160a01b031661101e565b610378611030565b6103786004803603602081101561049657600080fd5b50356001600160a01b0316611036565b6104cc600480360360208110156104bc57600080fd5b50356001600160a01b0316611048565b6040805192835260208301919091528051918290030190f35b61025f6113db565b6103386004803603604081101561050357600080fd5b506001600160a01b038135169060200135611414565b6103786004803603604081101561052f57600080fd5b506001600160a01b038135169060200135611421565b6103786114f9565b6102556004803603602081101561056357600080fd5b50356001600160a01b03166114ff565b610354611670565b61035461167f565b610255600480360360e081101561059957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561168e565b610378600480360360408110156105ea57600080fd5b506001600160a01b03813581169160200135166118b6565b6102556118d3565b600754600114610654576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600755841515806106675750600084115b6106a25760405162461bcd60e51b81526004018080602001828103825260248152602001806124af6024913960400191505060405180910390fd5b6000806106ad610b79565b5091509150816001600160701b0316871080156106d25750806001600160701b031686105b610723576040805162461bcd60e51b815260206004820181905260248201527f4d646578537761703a20494e53554646494349454e545f4c4951554944495459604482015290519081900360640190fd5b60015460025460009182916001600160a01b039182169190811690891682148015906107615750806001600160a01b0316896001600160a01b031614155b6107b2576040805162461bcd60e51b815260206004820152601460248201527f4d646578537761703a20494e56414c49445f544f000000000000000000000000604482015290519081900360640190fd5b8a156107c3576107c3828a8d611a34565b89156107d4576107d4818a8c611a34565b861561088657886001600160a01b031663226dc882338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561086d57600080fd5b505af1158015610881573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d60208110156108f657600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561094257600080fd5b505afa158015610956573d6000803e3d6000fd5b505050506040513d602081101561096c57600080fd5b5051925060009150506001600160701b0385168a9003831161098f57600061099e565b89856001600160701b03160383035b9050600089856001600160701b03160383116109bb5760006109ca565b89856001600160701b03160383035b905060008211806109db5750600081115b610a165760405162461bcd60e51b81526004018080602001828103825260238152602001806124f46023913960400191505060405180910390fd5b6000610a38610a26846003611be6565b610a32876103e8611be6565b90611c46565b90506000610a4a610a26846003611be6565b9050610a6f620f4240610a696001600160701b038b8116908b16611be6565b90611be6565b610a798383611be6565b1015610acc576040805162461bcd60e51b815260206004820152600b60248201527f4d646578537761703a204b000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610ada84848888611c88565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600755505050505050505050565b6040518060400160405280600e81526020017f4853776170204c5020546f6b656e00000000000000000000000000000000000081525081565b6003546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610bb0338484611e5f565b5060015b92915050565b6001546001600160a01b031681565b60085481565b6001600160a01b0383166000908152600a6020908152604080832033845290915281205460001914610c4e576001600160a01b0384166000908152600a60209081526040808320338452909152902054610c299083611c46565b6001600160a01b0385166000908152600a602090815260408083203384529091529020555b610c59848484611ec1565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600b5481565b6000546001600160a01b03163314610cf1576040805162461bcd60e51b815260206004820152601360248201527f4d646578537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600180546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560028054929093169116179055565b60045481565b60055481565b6000600754600114610d8f576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600781905580610d9f610b79565b50600154604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610df357600080fd5b505afa158015610e07573d6000803e3d6000fd5b505050506040513d6020811015610e1d57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e7057600080fd5b505afa158015610e84573d6000803e3d6000fd5b505050506040513d6020811015610e9a57600080fd5b505190506000610eb3836001600160701b038716611c46565b90506000610eca836001600160701b038716611c46565b90506000610ed88787611f6f565b60085490915080610f0f57610efb6103e8610a32610ef68787611be6565b612133565b9850610f0a60006103e8612185565b610f52565b610f4f6001600160701b038916610f268684611be6565b81610f2d57fe5b046001600160701b038916610f428685611be6565b81610f4957fe5b04612210565b98505b60008911610f915760405162461bcd60e51b81526004018080602001828103825260278152602001806125176027913960400191505060405180910390fd5b610f9b8a8a612185565b610fa786868a8a611c88565b8115610fd157600354610fcd906001600160701b0380821691600160701b900416611be6565b6006555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a25050600160075550949695505050505050565b60096020526000908152604090205481565b60065481565b600c6020526000908152604090205481565b600080600754600114611095576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b60006007819055806110a5610b79565b50600154600254604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561110157600080fd5b505afa158015611115573d6000803e3d6000fd5b505050506040513d602081101561112b57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d60208110156111a357600080fd5b5051306000908152600960205260408120549192506111c28888611f6f565b600854909150806111d38487611be6565b816111da57fe5b049a50806111e88486611be6565b816111ef57fe5b04995060008b118015611202575060008a115b61123d5760405162461bcd60e51b81526004018080602001828103825260278152602001806124886027913960400191505060405180910390fd5b6112473084612227565b611252878d8d611a34565b61125d868d8c611a34565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156112a357600080fd5b505afa1580156112b7573d6000803e3d6000fd5b505050506040513d60208110156112cd57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561131957600080fd5b505afa15801561132d573d6000803e3d6000fd5b505050506040513d602081101561134357600080fd5b5051935061135385858b8b611c88565b811561137d57600354611379906001600160701b0380821691600160701b900416611be6565b6006555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600781905550915091565b6040518060400160405280600481526020017f484d44580000000000000000000000000000000000000000000000000000000081525081565b6000610bb0338484611ec1565b6001546000906001600160a01b0384811691161480159061145057506002546001600160a01b03848116911614155b8061146457506003546001600160701b0316155b8061147f5750600354600160701b90046001600160701b0316155b1561148c57506000610bb4565b6001546001600160a01b03848116911614156114d5576003546114ce906001600160701b03808216916114c891600160701b9091041685611be6565b906122b8565b9050610bb4565b6003546114ce906001600160701b03600160701b82048116916114c8911685611be6565b6103e881565b600754600114611549576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600755600154600254600354604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926115f292859287926115ed926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156115bb57600080fd5b505afa1580156115cf573d6000803e3d6000fd5b505050506040513d60208110156115e557600080fd5b505190611c46565b611a34565b61166681846115ed6003600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156115bb57600080fd5b5050600160075550565b6000546001600160a01b031681565b6002546001600160a01b031681565b428410156116e3576040805162461bcd60e51b815260206004820152601160248201527f4d646578537761703a2045585049524544000000000000000000000000000000604482015290519081900360640190fd5b600b546001600160a01b038089166000818152600c602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611819573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061184f5750886001600160a01b0316816001600160a01b0316145b6118a0576040805162461bcd60e51b815260206004820152601b60248201527f4d646578537761703a20494e56414c49445f5349474e41545552450000000000604482015290519081900360640190fd5b6118ab898989611e5f565b505050505050505050565b600a60209081526000928352604080842090915290825290205481565b60075460011461191d576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600755600154604080516370a0823160e01b81523060048201529051611a2d926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561196e57600080fd5b505afa158015611982573d6000803e3d6000fd5b505050506040513d602081101561199857600080fd5b5051600254604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156119e557600080fd5b505afa1580156119f9573d6000803e3d6000fd5b505050506040513d6020811015611a0f57600080fd5b50516003546001600160701b0380821691600160701b900416611c88565b6001600755565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017815292518151600094859489169392918291908083835b60208310611af95780518252601f199092019160209182019101611ada565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b5b576040519150601f19603f3d011682016040523d82523d6000602084013e611b60565b606091505b5091509150818015611b8e575080511580611b8e5750808060200190516020811015611b8b57600080fd5b50515b611bdf576040805162461bcd60e51b815260206004820152601960248201527f4d646578537761703a205452414e534645525f4641494c454400000000000000604482015290519081900360640190fd5b5050505050565b600082611bf557506000610bb4565b82820282848281611c0257fe5b0414611c3f5760405162461bcd60e51b81526004018080602001828103825260218152602001806124d36021913960400191505060405180910390fd5b9392505050565b6000611c3f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506122fa565b6001600160701b038411801590611ca657506001600160701b038311155b611cf7576040805162461bcd60e51b815260206004820152601260248201527f4d646578537761703a204f564552464c4f570000000000000000000000000000604482015290519081900360640190fd5b60035463ffffffff42811691600160e01b90048116820390811615801590611d2757506001600160701b03841615155b8015611d3b57506001600160701b03831615155b15611da6578063ffffffff16611d6385611d5486612391565b6001600160e01b0316906123a3565b600480546001600160e01b03929092169290920201905563ffffffff8116611d8e84611d5487612391565b600580546001600160e01b0392909216929092020190555b600380546dffffffffffffffffffffffffffff19166001600160701b03888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b038084166000818152600a6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260096020526040902054611ee49082611c46565b6001600160a01b038085166000908152600960205260408082209390935590841681522054611f1390826123c8565b6001600160a01b0380841660008181526009602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008054604080517f017e7e58000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163017e7e58916004808301926020929190829003018186803b158015611fcd57600080fd5b505afa158015611fe1573d6000803e3d6000fd5b505050506040513d6020811015611ff757600080fd5b50516006546001600160a01b03821615801594509192509061211f57801561211a576000612034610ef66001600160701b03888116908816611be6565b9050600061204183612133565b90508082111561211757600061206361205a8484611c46565b60085490611be6565b905060006120f3836120ed60008054906101000a90046001600160a01b03166001600160a01b031663deba86e36040518163ffffffff1660e01b815260040160206040518083038186803b1580156120ba57600080fd5b505afa1580156120ce573d6000803e3d6000fd5b505050506040513d60208110156120e457600080fd5b50518790611be6565b906123c8565b9050600081838161210057fe5b0490508015612113576121138782612185565b5050505b50505b61212b565b801561212b5760006006555b505092915050565b60006003821115612176575080600160028204015b818110156121705780915060028182858161215f57fe5b04018161216857fe5b049050612148565b50612180565b8115612180575060015b919050565b60085461219290826123c8565b6008556001600160a01b0382166000908152600960205260409020546121b890826123c8565b6001600160a01b03831660008181526009602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818311156122205781611c3f565b5090919050565b6001600160a01b03821660009081526009602052604090205461224a9082611c46565b6001600160a01b0383166000908152600960205260409020556008546122709082611c46565b6008556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000611c3f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612422565b600081848411156123895760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561234e578181015183820152602001612336565b50505050905090810190601f16801561237b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816123c057fe5b049392505050565b600082820183811015611c3f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081836124715760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561234e578181015183820152602001612336565b50600083858161247d57fe5b049594505050505056fe4d646578537761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444d646578537761703a20494e53554646494349454e545f4f55545055545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d646578537761703a20494e53554646494349454e545f494e5055545f414d4f554e544d646578537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220898f25e34c62f15dc00cb0ac01aac5294131079a217c681f93e51606484f4bba64736f6c634300070600334d64657853776170466163746f72793a20494e53554646494349454e545f4f55545055545f414d4f554e544d64657853776170466163746f72793a20494e53554646494349454e545f494e5055545f414d4f554e544d64657853776170466163746f72793a20494e53554646494349454e545f4c49515549444954594d64657853776170466163746f72793a20466565546f536574746572206973207a65726f20616464726573734d64657853776170466163746f72793a20494e53554646494349454e545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d64657853776170466163746f72793a204645455f544f5f524154455f4f564552464c4f574d64657853776170466163746f72793a204944454e544943414c5f414444524553534553a2646970667358221220a09babf5a29382ea0027914c4fda31fc10815e152bbbdef1a212c8da6ddd7e3d64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25003,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25006,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 25009,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "feeToRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25011,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "initCodeHash",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 25018,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 25022,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}