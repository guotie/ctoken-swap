{
  "address": "0xAFae2ac364f281268ee000b81B067cE379e82112",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setFeeToRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x556d22f97174c358b62cc9bdc993be08f2794658d57b4133f51c381b4181fd72",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0xAFae2ac364f281268ee000b81B067cE379e82112",
    "transactionIndex": 0,
    "gasUsed": "5071482",
    "logsBloom": "0x
    "blockHash": "0x5921fa7e6aab9985f5b6093046723b80749c7e8c9128eef5fef28f9a077ec135",
    "transactionHash": "0x556d22f97174c358b62cc9bdc993be08f2794658d57b4133f51c381b4181fd72",
    "logs": [],
    "blockNumber": 4606804,
    "cumulativeGasUsed": "5071482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "0x93ccAEA48e76B672D82F8e19c49d6eD59a621aA8"
  ],
  "solcInputHash": "1e67a5903a1c0d559885880473465e48",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setFeeToRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/heco/Factory.sol\":\"MdexFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/common/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\n\\r\\ncontract CTokenStorage {\\r\\n    /**\\r\\n     * @dev Guard variable for re-entrancy checks\\r\\n     */\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token name for this token\\r\\n     */\\r\\n    string public name;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token symbol for this token\\r\\n     */\\r\\n    string public symbol;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token decimals for this token\\r\\n     */\\r\\n    uint8 public decimals;\\r\\n\\r\\n    /*\\r\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\r\\n     */\\r\\n\\r\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\r\\n\\r\\n    /*\\r\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\r\\n     */\\r\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\r\\n\\r\\n    /**\\r\\n     * @notice Administrator for this contract\\r\\n     */\\r\\n    address payable public admin;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending administrator for this contract\\r\\n     */\\r\\n    address payable public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract which oversees inter-cToken operations\\r\\n     */\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /**\\r\\n     * @notice Model which tells what the current interest rate should be\\r\\n     */\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    /*\\r\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\r\\n     */\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Fraction of interest currently set aside for reserves\\r\\n     */\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Block number that interest was last accrued at\\r\\n     */\\r\\n    uint public accrualBlockNumber;\\r\\n\\r\\n    /**\\r\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n     */\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\r\\n     */\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of reserves of the underlying held in this market\\r\\n     */\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /**\\r\\n     * @notice Total number of tokens in circulation\\r\\n     */\\r\\n    uint public totalSupply;\\r\\n\\r\\n    /*\\r\\n     * @notice Official record of token balances for each account\\r\\n     */\\r\\n    mapping (address => uint) internal accountTokens;\\r\\n\\r\\n    /*\\r\\n     * @notice Approved token transfer amounts on behalf of others\\r\\n     */\\r\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Mapping of account addresses to outstanding borrow balances\\r\\n     */\\r\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n}\\r\\n\\r\\nabstract contract CTokenInterface is CTokenStorage {\\r\\n    /**\\r\\n     * @notice Indicator that this is a CToken contract (for inspection)\\r\\n     */\\r\\n    bool public constant isCToken = true;\\r\\n\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interest is accrued\\r\\n     */\\r\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are minted\\r\\n     */\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are redeemed\\r\\n     */\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when underlying is borrowed\\r\\n     */\\r\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is repaid\\r\\n     */\\r\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is liquidated\\r\\n     */\\r\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\r\\n\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is changed\\r\\n     */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\r\\n     */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when comptroller is changed\\r\\n     */\\r\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interestRateModel is changed\\r\\n     */\\r\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserve factor is changed\\r\\n     */\\r\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are added\\r\\n     */\\r\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are reduced\\r\\n     */\\r\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Transfer event\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Approval event\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Failure event\\r\\n     */\\r\\n    // event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) virtual external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\\r\\n    function approve(address spender, uint amount) virtual external returns (bool);\\r\\n    function allowance(address owner, address spender) virtual external view returns (uint);\\r\\n    function balanceOf(address owner) virtual external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) virtual external returns (uint);\\r\\n    function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() virtual external view returns (uint);\\r\\n    function supplyRatePerBlock() virtual external view returns (uint);\\r\\n    function totalBorrowsCurrent() virtual external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) virtual external returns (uint);\\r\\n    function borrowBalanceStored(address account) virtual public view returns (uint);\\r\\n    function exchangeRateCurrent() virtual public returns (uint);\\r\\n    function exchangeRateStored() virtual public view returns (uint);\\r\\n    function getCash() virtual external view returns (uint);\\r\\n    function accrueInterest() virtual public returns (uint);\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingAdmin(address payable newPendingAdmin) virtual external returns (uint);\\r\\n    function _acceptAdmin() virtual external returns (uint);\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) virtual public returns (uint);\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) virtual external returns (uint);\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual public returns (uint);\\r\\n}\\r\\n\\r\\ncontract CErc20Storage {\\r\\n    /**\\r\\n     * @notice Underlying asset for this CToken\\r\\n     */\\r\\n    address public underlying;\\r\\n}\\r\\n\\r\\nabstract contract CErc20Interface is CErc20Storage {\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) virtual external returns (uint);\\r\\n    function redeem(uint redeemTokens) virtual external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\\r\\n    function borrow(uint borrowAmount) virtual external returns (uint);\\r\\n    function repayBorrow(uint repayAmount) virtual external returns (uint);\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _addReserves(uint addAmount) virtual external returns (uint);\\r\\n}\\r\\n\\r\\ncontract CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Implementation address for this contract\\r\\n     */\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\nabstract contract CDelegatorInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Emitted when implementation is changed\\r\\n     */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) virtual public;\\r\\n}\\r\\n\\r\\nabstract contract CDelegateInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) virtual public;\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n     */\\r\\n    function _resignImplementation() virtual public;\\r\\n}\\r\\n\",\"keccak256\":\"0xc4bb987882401b0956f3c5dece2b37860f772dd55b58cb69682ec335103a1d29\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nabstract contract ComptrollerInterface {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\r\\n    function exitMarket(address cToken) virtual external returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\r\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\r\\n\\r\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\r\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\r\\n\\r\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\r\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount) virtual external returns (uint);\\r\\n    function repayBorrowVerify(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex) virtual external;\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount) virtual external returns (uint);\\r\\n    function liquidateBorrowVerify(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens) virtual external;\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) virtual external returns (uint);\\r\\n    function seizeVerify(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) virtual external;\\r\\n\\r\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\r\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        uint repayAmount) virtual external view returns (uint, uint);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * \\u6839\\u636e token \\u5730\\u5740\\u67e5\\u627e cToken \\u5730\\u5740\\r\\n     * \\u5982\\u679c\\u662fETH/HT/BNB, \\u5e94\\u8be5\\u5148\\u53d8\\u6210\\u5bf9\\u5e94\\u7684 wrapped ETH/HT/BNB\\r\\n     */\\r\\n    function getCTokenAddress(address token) virtual external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x684c416cade958bc8022ac0aae0b5567e5ccb9a4d86ac168a79827aed1d253a1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\n/**\\r\\n  * @title LendHub's InterestRateModel Interface\\r\\n  * @author LendHub\\r\\n  */\\r\\nabstract contract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current borrow interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual external view returns (uint);\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current supply interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @param reserveFactorMantissa The current reserve factor the market has\\r\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual external view returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xd03a658d6c0c36f02c99d3a3845b9e28627473aa209d294699c21a5775c7424b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/heco/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport \\\"../library/SafeMath.sol\\\";\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"../interface/IMdexFactory.sol\\\";\\r\\nimport \\\"../interface/IMdexPair.sol\\\";\\r\\n\\r\\nimport \\\"../../common/ComptrollerInterface.sol\\\";\\r\\nimport \\\"../../common/CTokenInterfaces.sol\\\";\\r\\n\\r\\ninterface IHswapV2Callee {\\r\\n    function hswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface IMdexERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\\r\\n\\r\\ncontract MdexERC20 is IMdexERC20 {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    string public constant override name = 'HSwap LP Token';\\r\\n    // function name() override external pure returns (string memory) {\\r\\n    //     return \\\"HSwap LP Token\\\";\\r\\n    // }\\r\\n    string public constant override symbol = 'HMDX';\\r\\n    uint8 public constant override decimals = 18;\\r\\n    uint  public override totalSupply;\\r\\n    mapping(address => uint) public override balanceOf;\\r\\n    mapping(address => mapping(address => uint)) public override allowance;\\r\\n\\r\\n    bytes32 public override DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint) public override nonces;\\r\\n\\r\\n    // event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    // event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    constructor() {\\r\\n        uint chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes('1')),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint value) internal {\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint value) internal {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint value) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint value) private {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint value) override external returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint value) override external returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) override external returns (bool) {\\r\\n        if (allowance[from][msg.sender] != uint(- 1)) {\\r\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override external {\\r\\n        require(deadline >= block.timestamp, 'MdexSwap: EXPIRED');\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                '\\\\x19\\\\x01',\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'MdexSwap: INVALID_SIGNATURE');\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MdexPair is IMdexERC20, IMdexPair {\\r\\n    using SafeMath  for uint;\\r\\n    using UQ112x112 for uint224;\\r\\n\\r\\n    uint public constant override MINIMUM_LIQUIDITY = 10 ** 3;\\r\\n    bytes4 private constant _SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n\\r\\n    address public override factory;\\r\\n    address public override token0;\\r\\n    address public override token1;\\r\\n\\r\\n    // \\u5b58\\u5230lend\\u6c60\\u4e2d\\u7684 ctoken0 amount\\r\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\r\\n    // \\u5b58\\u5230lend\\u6c60\\u4e2d\\u7684 ctoken1 amount\\r\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\r\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\r\\n\\r\\n    address public cToken0;              // \\u5bf9\\u5e94 token0 \\u5728 lend \\u6c60\\u4e2d\\u7684 cToken\\r\\n    address public cToken1;              // \\u5bf9\\u5e94 token1 \\u5728 lend \\u6c60\\u4e2d\\u7684 cToken\\r\\n    uint112 public vReserve0;           // \\u865a\\u62df\\u7684 token0 \\u6570\\u91cf, \\u56e0\\u4e3a\\u5b9e\\u9645\\u4e0a token0 \\u5df2\\u7ecf\\u5b58\\u5165 ctoken \\u5408\\u7ea6\\u4e2d\\r\\n    uint112 public vReserve1;           // \\u865a\\u62df\\u7684 token1 \\u6570\\u91cf, \\u56e0\\u4e3a\\u5b9e\\u9645\\u4e0a token1 \\u5df2\\u7ecf\\u5b58\\u5165 ctoken \\u5408\\u7ea6\\u4e2d\\r\\n\\r\\n    uint public override price0CumulativeLast;\\r\\n    uint public override price1CumulativeLast;\\r\\n    uint public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\r\\n\\r\\n    uint private _unlocked = 1;\\r\\n    modifier lock() {\\r\\n        require(_unlocked == 1, 'MdexSwap: LOCKED');\\r\\n        _unlocked = 0;\\r\\n        _;\\r\\n        _unlocked = 1;\\r\\n    }\\r\\n    // using SafeMath for uint;\\r\\n\\r\\n    string public constant override(IMdexERC20, IMdexPair) name = 'LP Token';\\r\\n    string public constant override(IMdexERC20, IMdexPair) symbol = 'HMDX';\\r\\n    uint8 public constant override(IMdexERC20, IMdexPair) decimals = 18;\\r\\n    uint  public override(IMdexERC20, IMdexPair) totalSupply;\\r\\n    mapping(address => uint) public override(IMdexERC20, IMdexPair) balanceOf;\\r\\n    mapping(address => mapping(address => uint)) public override(IMdexERC20, IMdexPair) allowance;\\r\\n\\r\\n    bytes32 public override(IMdexERC20, IMdexPair) DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant override(IMdexERC20, IMdexPair) PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint) public override(IMdexERC20, IMdexPair) nonces;\\r\\n\\r\\n    // event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    // event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    constructor() {\\r\\n        uint chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes('1')),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint value) internal {\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint value) internal {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint value) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint value) private {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint value) override(IMdexERC20, IMdexPair) external returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint value) override(IMdexERC20, IMdexPair) external returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) override(IMdexERC20, IMdexPair) external returns (bool) {\\r\\n        if (allowance[from][msg.sender] != uint(- 1)) {\\r\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline,\\r\\n                    uint8 v, bytes32 r, bytes32 s) override(IMdexERC20, IMdexPair) external {\\r\\n        require(deadline >= block.timestamp, 'Swap: EXPIRED');\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                '\\\\x19\\\\x01',\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Swap: INVALID_SIGNATURE');\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n    ///////////////////////////////////////////////////////////////\\r\\n\\r\\n    function getReserves() override public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\r\\n        _reserve0 = reserve0;\\r\\n        _reserve1 = reserve1;\\r\\n        _blockTimestampLast = blockTimestampLast;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token, address to, uint value) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(_SELECTOR, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Swap: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    // event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    // event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    // event Swap(\\r\\n    //     address indexed sender,\\r\\n    //     uint amount0In,\\r\\n    //     uint amount1In,\\r\\n    //     uint amount0Out,\\r\\n    //     uint amount1Out,\\r\\n    //     address indexed to\\r\\n    // );\\r\\n    // event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    // constructor() public {\\r\\n    //     factory = msg.sender;\\r\\n    // }\\r\\n\\r\\n    // called once by the factory at time of deployment\\r\\n    function initialize(address _token0, address _token1) override external {\\r\\n        require(msg.sender == factory, 'MdexSwap: FORBIDDEN');\\r\\n        // sufficient check\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n    }\\r\\n\\r\\n    // called once by the factory at time of deployment\\r\\n    function initializeCTokenAddress(address _token0, address _token1) override external {\\r\\n        require(msg.sender == factory, 'MdexSwap: FORBIDDEN');\\r\\n        // sufficient check\\r\\n        cToken0 = _token0;\\r\\n        cToken1 = _token1;\\r\\n    }\\r\\n\\r\\n    // update reserves and, on the first call per block, price accumulators\\r\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\r\\n        require(balance0 <= uint112(- 1) && balance1 <= uint112(- 1), 'MdexSwap: OVERFLOW');\\r\\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\r\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n        // overflow is desired\\r\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n            // * never overflows, and + overflow is desired\\r\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\r\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\r\\n        }\\r\\n        reserve0 = uint112(balance0);\\r\\n        reserve1 = uint112(balance1);\\r\\n        blockTimestampLast = blockTimestamp;\\r\\n        emit Sync(reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    // update reserves and, on the first call per block, price accumulators\\r\\n    function _addVreserve(uint balance0, uint balance1) private {\\r\\n        require(balance0 <= uint112(- 1) && balance1 <= uint112(- 1), 'MdexSwap: OVERFLOW');\\r\\n        // uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\r\\n        // uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n        // // overflow is desired\\r\\n        // if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n        //     // * never overflows, and + overflow is desired\\r\\n        //     price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\r\\n        //     price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\r\\n        // }\\r\\n        vReserve0 += uint112(balance0);\\r\\n        vReserve1 += uint112(balance1);\\r\\n        // blockTimestampLast = blockTimestamp;\\r\\n        // emit Sync(reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    function _delVreserve(uint balance0, uint balance1) private {\\r\\n        require(balance0 <= vReserve0, \\\"Swap: NOT ENOUGHT\\\");\\r\\n        require(balance1 <= vReserve1, \\\"Swap: NOT ENOUGHT\\\");\\r\\n        \\r\\n        vReserve0 -= uint112(balance0);\\r\\n        vReserve1 -= uint112(balance1);\\r\\n    }\\r\\n\\r\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\r\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\r\\n        address feeTo = IMdexFactory(factory).feeTo();\\r\\n        feeOn = feeTo != address(0);\\r\\n        uint _kLast = kLast;\\r\\n        // gas savings\\r\\n        if (feeOn) {\\r\\n            if (_kLast != 0) {\\r\\n                uint rootK = SafeMath.sqrt(uint(_reserve0).mul(_reserve1));\\r\\n                uint rootKLast = SafeMath.sqrt(_kLast);\\r\\n                if (rootK > rootKLast) {\\r\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\r\\n                    uint denominator = rootK.mul(IMdexFactory(factory).feeToRate()).add(rootKLast);\\r\\n                    uint liquidity = numerator / denominator;\\r\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\r\\n                }\\r\\n            }\\r\\n        } else if (_kLast != 0) {\\r\\n            kLast = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintCToken(address to) override external lock returns (uint liquidity) {\\r\\n\\r\\n    }\\r\\n\\r\\n    // ETH/HT/BNB \\u4e0d\\u80fd\\u76f4\\u63a5 mint\\r\\n    // \\u5b58\\u5165\\u7684\\u662f token \\u800c\\u4e0d\\u662f ctoken; \\u5982\\u679c\\u5b58\\u5165\\u7684\\u662f ctoken \\u6216\\u4e0d\\u786e\\u5b9a, \\u8c03\\u7528 mintCToken\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function mint(address to) override external lock returns (uint liquidity) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\r\\n        // gas savings\\r\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        // uint amount0 = balance0.sub(_reserve0);\\r\\n        // uint amount1 = balance1.sub(_reserve1);\\r\\n\\r\\n        // guotie\\r\\n        // \\u5206\\u522b\\u5c06 token0 token1 transer \\u5230 lend \\u6c60, \\u83b7\\u53d6 ctoken0 ctoken1 \\u7684 amount0 amount1\\r\\n        //\\r\\n        uint cBalanceBefore0 = IERC20(cToken0).balanceOf(address(this));\\r\\n        uint cBalanceBefore1 = IERC20(cToken1).balanceOf(address(this));\\r\\n        // approve, mint ctoken0\\r\\n        IERC20(cToken0).approve(cToken0, balance0);\\r\\n        CErc20Interface(cToken0).mint(balance0);\\r\\n        IERC20(cToken0).approve(cToken0, 0);\\r\\n\\r\\n        // approve, mint ctoken1\\r\\n        IERC20(cToken1).approve(cToken1, balance1);\\r\\n        CErc20Interface(cToken1).mint(balance1);\\r\\n        IERC20(cToken1).approve(cToken1, 0);\\r\\n        uint cBalanceAfter0 = IERC20(cToken0).balanceOf(address(this));\\r\\n        uint cBalanceAfter1 = IERC20(cToken1).balanceOf(address(this));\\r\\n\\r\\n        // amount0 amount1 \\u5747\\u4e3a\\u5b58\\u5165 lend \\u6c60\\u540e\\u5f97\\u5230\\u7684 ctoken \\u7684\\u6570\\u91cf\\r\\n        uint amount0 = cBalanceBefore0.sub(cBalanceAfter0); // .sub(_reserve0);\\r\\n        uint amount1 = cBalanceBefore1.sub(cBalanceAfter1); // .sub(_reserve1);\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply;\\r\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity = SafeMath.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\r\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\r\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n        } else {\\r\\n            liquidity = SafeMath.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\r\\n        }\\r\\n        require(liquidity > 0, 'MdexSwap: INSUFFICIENT_LIQUIDITY_MINTED');\\r\\n        _mint(to, liquidity);\\r\\n\\r\\n        _update(cBalanceAfter0, cBalanceAfter1, _reserve0, _reserve1);\\r\\n        // _addVreserve(balance0, balance1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1);\\r\\n        // reserve0 and reserve1 are up-to-date\\r\\n        emit Mint(msg.sender, amount0, amount1);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function burn(address to) override external lock returns (uint amount0, uint amount1) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\r\\n        // gas savings\\r\\n        // address _token0 = token0;\\r\\n        // gas savings\\r\\n        // address _token1 = token1;\\r\\n        // gas savings\\r\\n        address _ctoken0 = cToken0;\\r\\n        // gas savings\\r\\n        address _ctoken1 = cToken1;\\r\\n        // gas savings\\r\\n        // uint balance0 = IERC20(_token0).balanceOf(address(this));  // \\u5e94\\u8be5\\u662f0 \\u56e0\\u4e3atoken \\u90fd\\u5b58\\u5728 lend \\u6c60\\u4e2d\\r\\n        // uint balance1 = IERC20(_token1).balanceOf(address(this));  // \\u5e94\\u8be5\\u662f0 \\u56e0\\u4e3atoken \\u90fd\\u5b58\\u5728 lend \\u6c60\\u4e2d\\r\\n        uint cbalance0 = IERC20(_ctoken0).balanceOf(address(this));  // ctoken0 \\u6570\\u91cf\\r\\n        uint cbalance1 = IERC20(_ctoken1).balanceOf(address(this));  // ctoken1 \\u6570\\u91cf\\r\\n        uint liquidity = balanceOf[address(this)];  // \\u7528\\u6237\\u64cd\\u4f5c burn \\u4e4b\\u524d\\u8f6c\\u5165\\u7684 LP \\u4ee3\\u5e01\\u6570\\u91cf\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply;\\r\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        uint camount0 = liquidity.mul(cbalance0) / _totalSupply;\\r\\n        // using balances ensures pro-rata distribution\\r\\n        uint camount1 = liquidity.mul(cbalance1) / _totalSupply;\\r\\n        // using balances ensures pro-rata distribution\\r\\n        require(camount0 > 0 && camount1 > 0, 'MdexSwap: INSUFFICIENT_LIQUIDITY_BURNED');\\r\\n        _burn(address(this), liquidity);\\r\\n\\r\\n        // \\u5148\\u628a ctoken \\u8f6c\\u7ed9 pair\\r\\n        _redeemOrTransfer(to, _ctoken0, token0, camount0);\\r\\n        _redeemOrTransfer(to, _ctoken1, token1, camount1);\\r\\n        // _safeTransfer(_ctoken0, address(this), camount0);\\r\\n        // _safeTransfer(_ctoken1, address(this), camount1);\\r\\n        cbalance0 = IERC20(_ctoken0).balanceOf(address(this));\\r\\n        cbalance1 = IERC20(_ctoken1).balanceOf(address(this));\\r\\n\\r\\n        _update(cbalance0, cbalance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1);\\r\\n        // reserve0 and reserve1 are up-to-date\\r\\n        emit Burn(msg.sender, amount0, amount1, to);\\r\\n    }\\r\\n\\r\\n    // \\u4ece lend \\u6c60\\u4e2d\\u628a token \\u8d4e\\u56de, camount \\u4e3a ctoken \\u6570\\u91cf\\r\\n    // \\u8d4e\\u56de token, \\u5982\\u679c\\u8d4e\\u56de\\u6210\\u529f, \\u5c06 token \\u8f6c\\u7ed9 to; \\u5426\\u5219, \\u5c06 ctoken \\u8f6c\\u7ed9 to\\r\\n    function _redeemOrTransfer(address to, address ctoken, address token, uint camount) private {\\r\\n        uint ret;\\r\\n\\r\\n        ret = CErc20Interface(ctoken).redeem(camount);\\r\\n        if (ret == 0) {\\r\\n            // success\\r\\n            // \\u5c06\\u8d4e\\u56de\\u7684 token \\u5168\\u90e8\\u8f6c\\u7ed9 to\\r\\n            _safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\\r\\n        } else {\\r\\n            // failed\\r\\n            IERC20(ctoken).transfer(to, camount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // \\u4ece lend \\u6c60\\u4e2d\\u628a token \\u8d4e\\u56de, amount \\u4e3a\\u5f85\\u8d4e\\u56de\\u7684 token \\u6570\\u91cf\\r\\n    // \\u8d4e\\u56de token, \\u5982\\u679c\\u8d4e\\u56de\\u6210\\u529f, \\u5c06 token \\u8f6c\\u7ed9 to; \\u5426\\u5219, \\u5c06 ctoken \\u8f6c\\u7ed9 to\\r\\n    function _redeemUnderlyingOrTransfer(address to, address ctoken, address token, uint amount) private {\\r\\n        uint ret;\\r\\n\\r\\n        ret = CErc20Interface(ctoken).redeemUnderlying(amount);\\r\\n        if (ret == 0) {\\r\\n            // success\\r\\n            // \\u5c06\\u8d4e\\u56de\\u7684 token \\u5168\\u90e8\\u8f6c\\u7ed9 to\\r\\n            _safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\\r\\n        } else {\\r\\n            // failed\\r\\n            // \\u8f6c\\u591a\\u5c11\\u5462? \\u8fd9\\u91cc\\u9700\\u8981\\u83b7\\u53d6 ctoken \\u548c token \\u7684\\u6bd4\\u4f8b\\u5173\\u7cfb, \\u83b7\\u53d6\\u6700\\u65b0\\u7684 exchangeRate\\r\\n            //\\r\\n            uint camount = amount / CTokenInterface(ctoken).exchangeRateCurrent();\\r\\n            IERC20(ctoken).transfer(to, camount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) override external lock {\\r\\n        require(amount0Out > 0 || amount1Out > 0, 'Swap: INVALID_AMOUNT');\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\r\\n        // gas savings\\r\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Swap: INSUFFICIENT_LIQUIDITY');\\r\\n\\r\\n        uint balance0;\\r\\n        uint balance1;\\r\\n        {// scope for _token{0,1}, avoids stack too deep errors\\r\\n            address _token0 = token0;\\r\\n            address _token1 = token1;\\r\\n            require(to != _token0 && to != _token1, 'Swap: INVALID_TO');\\r\\n            require(to != cToken0 && to != cToken1, 'Swap: INVALID_TO');\\r\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\\r\\n            // optimistically transfer tokens\\r\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\\r\\n            // optimistically transfer tokens\\r\\n            if (data.length > 0) IHswapV2Callee(to).hswapV2Call(msg.sender, amount0Out, amount1Out, data);\\r\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        }\\r\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\r\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\r\\n        require(amount0In > 0 || amount1In > 0, 'Swap: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        {// scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\r\\n            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\r\\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000 ** 2), 'Swap: K');\\r\\n        }\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\r\\n    }\\r\\n\\r\\n    struct TokenLocalVars {\\r\\n        uint balance;\\r\\n        // uint balance0Adjusted;  // cToken: x1 - 0.003xin\\r\\n        address token;\\r\\n        address ctoken;\\r\\n        uint amountIn;\\r\\n        uint cAmountIn;\\r\\n        uint cAmountOut;\\r\\n    }\\r\\n    // amount0Out: \\u9884\\u8ba1\\u5f97\\u5230\\u7684 token0 \\u7684\\u6570\\u91cf, \\u5728\\u5916\\u56f4\\u5408\\u7ea6\\u4e2d\\u8ba1\\u7b97\\u597d, \\u8ba1\\u7b97\\u65f6\\u9700\\u8981\\u8003\\u8651 exchangeRate \\u5151\\u6362\\u6bd4\\u4f8b\\r\\n    // amount1Out: \\u9884\\u8ba1\\u5f97\\u5230\\u7684 token1 \\u7684\\u6570\\u91cf, \\u5728\\u5916\\u56f4\\u5408\\u7ea6\\u4e2d\\u8ba1\\u7b97\\u597d, \\u8ba1\\u7b97\\u65f6\\u9700\\u8981\\u8003\\u8651 exchangeRate \\u5151\\u6362\\u6bd4\\u4f8b\\r\\n    // \\u8f6c\\u5165\\u7684\\u5e01\\u5e94\\u8be5\\u662f token \\u800c\\u4e0d\\u662f ctoken\\r\\n    function swap2x(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\r\\n        require(amount0Out > 0 || amount1Out > 0, 'Swap: INVALID_AMOUNT');\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\r\\n        // gas savings\\r\\n        // \\u4e0d\\u80fd\\u6bd4\\u8f83 \\u56e0\\u4e3a _reserve0 \\u662f ctoken0 \\u7684\\u6570\\u91cf\\r\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Swap: INSUFFICIENT_LIQUIDITY');\\r\\n        TokenLocalVars memory vars0;\\r\\n        TokenLocalVars memory vars1;\\r\\n\\r\\n        // \\u8fd9\\u91cc\\u8bb0\\u5f55\\u8f6c\\u5165\\u7684 token \\u6570\\u91cf\\r\\n        vars0.token = token0;\\r\\n        vars1.token = token1;\\r\\n        vars0.ctoken = cToken0;\\r\\n        vars1.ctoken = cToken1;\\r\\n\\r\\n        // uint balance0;\\r\\n        // uint balance1;\\r\\n        // \\u8fd9\\u91cc\\u8bb0\\u5f55\\u8f6c\\u5165\\u7684 token \\u6570\\u91cf\\r\\n        // uint amount0In; // = IERC20(_token0).balanceOf(address(this));\\r\\n        // uint amount1In; // = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n        // uint camount0In; // = IERC20(_token0).balanceOf(address(this));\\r\\n        // uint camount1In; // = IERC20(_token1).balanceOf(address(this));\\r\\n        {// scope for _token{0,1}, avoids stack too deep errors\\r\\n            // address _ctoken0 = cToken0;\\r\\n            // address _ctoken1 = cToken1;\\r\\n            require(to != vars0.token && to != vars1.token, 'Swap: INVALID_TO');\\r\\n            require(to != vars0.ctoken && to != vars1.ctoken, 'Swap: INVALID_TO');\\r\\n            if (amount0Out > 0) {\\r\\n                vars0.cAmountOut = amount0Out / CTokenInterface(vars0.ctoken).exchangeRateCurrent();\\r\\n                _redeemUnderlyingOrTransfer(to, vars0.ctoken, vars0.token, amount0Out);\\r\\n            } // _safeTransfer(_token0, to, amount0Out);\\r\\n            // optimistically transfer tokens\\r\\n            if (amount1Out > 0) {\\r\\n                vars1.cAmountOut = amount1Out / CTokenInterface(vars1.ctoken).exchangeRateCurrent();\\r\\n                _redeemUnderlyingOrTransfer(to, vars1.ctoken, vars1.token, amount1Out);\\r\\n            } // _safeTransfer(_token1, to, amount1Out);\\r\\n            // optimistically transfer tokens\\r\\n            if (data.length > 0) IHswapV2Callee(to).hswapV2Call(msg.sender, amount0Out, amount1Out, data);\\r\\n\\r\\n            // \\u8fd9\\u91cc mint cToken\\r\\n            // todo \\u6536\\u624b\\u7eed\\u8d39\\r\\n            vars0.amountIn = IERC20(vars0.token).balanceOf(address(this));\\r\\n            vars1.amountIn = IERC20(vars1.token).balanceOf(address(this));\\r\\n            require(vars0.amountIn > 0 || vars1.amountIn > 0, 'Swap: INSUFFICIENT_INPUT_AMOUNT');\\r\\n            if (vars0.amountIn > 0) {\\r\\n                // \\u5c06\\u8f6c\\u5165\\u7684 token0 \\u5b58\\u5165\\u501f\\u8d37\\u6c60\\r\\n                CErc20Interface(vars0.ctoken).mint(vars0.amountIn);\\r\\n            }\\r\\n            if (vars1.amountIn > 0) {\\r\\n                // \\u5c06\\u8f6c\\u5165\\u7684 token1 \\u5b58\\u5165\\u501f\\u8d37\\u6c60\\r\\n                CErc20Interface(vars1.ctoken).mint(vars1.amountIn);\\r\\n            }\\r\\n\\r\\n            vars0.balance = IERC20(vars0.ctoken).balanceOf(address(this));\\r\\n            vars1.balance = IERC20(vars1.ctoken).balanceOf(address(this));\\r\\n        }\\r\\n        // \\u6ce8\\u610f: x * y = K \\u662f\\u4e24\\u4e2a cToken \\u4e4b\\u95f4\\u7684\\u5173\\u7cfb\\r\\n        vars0.cAmountIn = vars0.balance > _reserve0 - vars0.cAmountOut ? vars0.balance - (_reserve0 - vars0.cAmountOut) : 0;\\r\\n        vars1.cAmountIn = vars1.balance > _reserve1 - vars1.cAmountOut ? vars1.balance - (_reserve1 - vars1.cAmountOut) : 0;\\r\\n        // uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\r\\n        {// scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n            uint balance0Adjusted = vars0.balance.mul(1000).sub(vars0.cAmountIn.mul(3));\\r\\n            uint balance1Adjusted = vars1.balance.mul(1000).sub(vars1.cAmountIn.mul(3));\\r\\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000 ** 2), 'Swap: K');\\r\\n        }\\r\\n\\r\\n        _update(vars0.balance, vars1.balance, _reserve0, _reserve1);\\r\\n        emit Swap(msg.sender, vars0.amountIn, vars1.amountIn, amount0Out, amount1Out, to);\\r\\n    }\\r\\n\\r\\n    // force balances to match reserves\\r\\n    function skim(address to) override external lock {\\r\\n        address _token0 = token0;\\r\\n        // gas savings\\r\\n        address _token1 = token1;\\r\\n        // gas savings\\r\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\r\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() override external lock {\\r\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    function price(address token, uint256 baseDecimal) override public view returns (uint256) {\\r\\n        if ((token0 != token && token1 != token) || 0 == reserve0 || 0 == reserve1) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (token0 == token) {\\r\\n            return uint256(reserve1).mul(baseDecimal).div(uint256(reserve0));\\r\\n        } else {\\r\\n            return uint256(reserve0).mul(baseDecimal).div(uint256(reserve1));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MdexFactory is IMdexFactory {\\r\\n    using SafeMath for uint256;\\r\\n    address public override feeTo;\\r\\n    address public override feeToSetter;\\r\\n    uint256 public override feeToRate;\\r\\n    bytes32 public initCodeHash;\\r\\n\\r\\n    // lend controller address. should be unitroller address, which is proxy of comptroller\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public override getPair;\\r\\n    address[] public override allPairs;\\r\\n\\r\\n    // event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    // \\u521b\\u5efa\\u65f6\\u9700\\u8981\\u8bbe\\u7f6e comptroller \\u5730\\u5740\\r\\n    constructor(address _feeToSetter, address _comptroller) {\\r\\n        feeToSetter = _feeToSetter;\\r\\n        comptroller = ComptrollerInterface(_comptroller);\\r\\n        initCodeHash = keccak256(abi.encodePacked(type(MdexPair).creationCode));\\r\\n    }\\r\\n\\r\\n    function allPairsLength() external view override returns (uint) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    // \\u521b\\u5efa\\u4ea4\\u6613\\u5bf9\\r\\n    // tokenA tokenB \\u90fd\\u4e0d\\u80fd\\u662f cToken\\r\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\r\\n        require(tokenA != tokenB, 'SwapFactory: IDENTICAL_ADDRESSES');\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'SwapFactory: ZERO_ADDRESS');\\r\\n        require(getPair[token0][token1] == address(0), 'SwapFactory: PAIR_EXISTS');\\r\\n        \\r\\n        // guotie\\r\\n        // token0 token1 \\u4e0d\\u80fd\\u662f cToken\\r\\n        (address ctoken0, address ctoken1) = _checkTokenIsNotCToken(token0, token1);\\r\\n\\r\\n        // single check is sufficient\\r\\n        bytes memory bytecode = type(MdexPair).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\r\\n        assembly {\\r\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n        IMdexPair(pair).initialize(token0, token1);\\r\\n\\r\\n        // guotie\\r\\n        // set compound ctoken address\\r\\n        IMdexPair(pair).initializeCTokenAddress(ctoken0, ctoken1);\\r\\n\\r\\n        getPair[token0][token1] = pair;\\r\\n        getPair[token1][token0] = pair;\\r\\n        // populate mapping in the reverse direction\\r\\n        allPairs.push(pair);\\r\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\r\\n    }\\r\\n\\r\\n    function setFeeTo(address _feeTo) external override {\\r\\n        require(msg.sender == feeToSetter, 'SwapFactory: FORBIDDEN');\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function setFeeToSetter(address _feeToSetter) external override {\\r\\n        require(msg.sender == feeToSetter, 'SwapFactory: FORBIDDEN');\\r\\n        require(_feeToSetter != address(0), \\\"MdexSwapFactory: FeeToSetter is zero address\\\");\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n\\r\\n    function setFeeToRate(uint256 _rate) external override {\\r\\n        require(msg.sender == feeToSetter, 'SwapFactory: FORBIDDEN');\\r\\n        require(_rate > 0, \\\"MdexSwapFactory: FEE_TO_RATE_OVERFLOW\\\");\\r\\n        feeToRate = _rate.sub(1);\\r\\n    }\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) public pure override returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'SwapFactory: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'SwapFactory: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // guotie\\r\\n    // \\u68c0\\u67e5 token \\u4e0d\\u662f cToken\\r\\n    function _checkTokenIsNotCToken(address token0, address token1) private view returns (address ctoken0, address ctoken1) {\\r\\n        ctoken0 = comptroller.getCTokenAddress(token0);\\r\\n        require(ctoken0 != token0, 'SwapFactory: cToken');\\r\\n        ctoken1 = comptroller.getCTokenAddress(token1);\\r\\n        require(ctoken1 != token1, 'SwapFactory: cToken');\\r\\n\\r\\n        require(ctoken0 != ctoken1, 'SwapFactory: Dup cToken');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address tokenA, address tokenB) public view override returns (address pair) {\\r\\n        // guotie \\u8fd9\\u91cc\\u4e0d\\u5173\\u5fc3\\u987a\\u5e8f\\r\\n        _checkTokenIsNotCToken(tokenA, tokenB);\\r\\n\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                address(this),\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                initCodeHash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address tokenA, address tokenB) public view override returns (uint reserveA, uint reserveB) {\\r\\n        (address token0,) = sortTokens(tokenA, tokenB);\\r\\n        (uint reserve0, uint reserve1,) = IMdexPair(pairFor(tokenA, tokenB)).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure override returns (uint amountB) {\\r\\n        require(amountA > 0, 'SwapFactory: INSUFFICIENT_AMOUNT');\\r\\n        require(reserveA > 0 && reserveB > 0, 'SwapFactory: INSUFFICIENT_LIQUIDITY');\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure override returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'SwapFactory: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'SwapFactory: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure override returns (uint amountIn) {\\r\\n        require(amountOut > 0, 'SwapFactory: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'SwapFactory: INSUFFICIENT_LIQUIDITY');\\r\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(uint amountIn, address[] memory path) public view override returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, 'SwapFactory: INVALID_PATH');\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i], path[i + 1]);\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(uint amountOut, address[] memory path) public view override returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, 'SwapFactory: INVALID_PATH');\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint i = path.length - 1; i > 0; i--) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i - 1], path[i]);\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary UQ112x112 {\\r\\n    uint224 constant Q112 = 2 ** 112;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\r\\n        z = uint224(y) * Q112;\\r\\n        // never overflows\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\r\\n        z = x / uint224(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa588c28e3b2da39a33855a25ae4c0ca3ac252cf8be967196d695b196431fe31a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity =0.7.6;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x0801bec55b476b394f7fd1d587a3f5559dbf682e0b66b9acd9e6a01d88d0e234\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/interface/IMdexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity =0.7.6;\\r\\n\\r\\ninterface IMdexFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function feeToRate() external view returns (uint256);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n\\r\\n    function setFeeToRate(uint256) external;\\r\\n\\r\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\r\\n\\r\\n    function pairFor(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\\r\\n\\r\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0xb3b7724351f7a9f047108da4bf16e98b43e1bb5cbf2b4c6b4bf6859dc7f41d3e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/interface/IMdexPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity =0.7.6;\\r\\n\\r\\ninterface IMdexPair {\\r\\n    // event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    // event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function mintCToken(address to) external returns (uint liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function price(address token, uint256 baseDecimal) external view returns (uint256);\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n    // initialize ctoken address\\r\\n    function initializeCTokenAddress(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc236bd739c5e8bee697a82267c26210bcdf0c9eb240bcb1550b6966f09e909cc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/library/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant WAD = 10 ** 18;\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb94b87915ba28c24f7a8f8742d94ac7f80dd5ea24cf93cce834b0fa70f47f984\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162009125380380620091258339818101604052604081101561003557600080fd5b508051602091820151600180546001600160a01b038085166001600160a01b0319928316179092556004805492841692909116919091179055604051919290919061008190820161010f565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106100c75780518252601f1990920191602091820191016100a8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120600381905550505061011d565b613b6580620055c083390190565b615493806200012d6000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063a2e74af6116100cd578063d52bb6f411610081578063deba86e311610066578063deba86e314610548578063e6a4390514610550578063f46901ed1461057e5761016c565b8063d52bb6f4146104f9578063db4c545e146105405761016c565b8063b5e4aa72116100b2578063b5e4aa7214610404578063c9c6539614610421578063d06ca61f1461044f5761016c565b8063a2e74af6146103b3578063ad615dec146103db5761016c565b8063544caa56116101245780635fe3b567116101095780635fe3b5671461035457806385f8c2591461035c57806396ed28f9146103855761016c565b8063544caa56146102ef578063574f2ba31461034c5761016c565b8063094b741511610155578063094b7415146101d05780631e3dd18b146101d85780631f00ca74146101f55761016c565b8063017e7e5814610171578063054d50d414610195575b600080fd5b6101796105a4565b604080516001600160a01b039092168252519081900360200190f35b6101be600480360360608110156101ab57600080fd5b50803590602081013590604001356105b3565b60408051918252519081900360200190f35b61017961068b565b610179600480360360208110156101ee57600080fd5b503561069a565b61029f6004803603604081101561020b57600080fd5b8135919081019060408101602082013564010000000081111561022d57600080fd5b82018360208201111561023f57600080fd5b8035906020019184602083028401116401000000008311171561026157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106c4945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102db5781810151838201526020016102c3565b505050509050019250505060405180910390f35b61031d6004803603604081101561030557600080fd5b506001600160a01b038135811691602001351661080f565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390f35b6101be610903565b610179610909565b6101be6004803603606081101561037257600080fd5b5080359060208101359060400135610918565b6101796004803603604081101561039b57600080fd5b506001600160a01b03813581169160200135166109f0565b6103d9600480360360208110156103c957600080fd5b50356001600160a01b0316610aa9565b005b6101be600480360360608110156103f157600080fd5b5080359060208101359060400135610b7c565b6103d96004803603602081101561041a57600080fd5b5035610c38565b6101796004803603604081101561043757600080fd5b506001600160a01b0381358116916020013516610ce7565b61029f6004803603604081101561046557600080fd5b8135919081019060408101602082013564010000000081111561048757600080fd5b82018360208201111561049957600080fd5b803590602001918460208302840111640100000000831117156104bb57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611160945050505050565b6105276004803603604081101561050f57600080fd5b506001600160a01b0381358116916020013516611296565b6040805192835260208301919091528051918290030190f35b6101be611362565b6101be611368565b6101796004803603604081101561056657600080fd5b506001600160a01b038135811691602001351661136e565b6103d96004803603602081101561059457600080fd5b50356001600160a01b0316611394565b6000546001600160a01b031681565b60008084116105f35760405162461bcd60e51b815260040180806020018281038252602681526020018061537c6026913960400191505060405180910390fd5b6000831180156106035750600082115b61063e5760405162461bcd60e51b815260040180806020018281038252602381526020018061543b6023913960400191505060405180910390fd5b600061064c856103e5611422565b9050600061065a8285611422565b905060006106748361066e886103e8611422565b90611484565b905080828161067f57fe5b04979650505050505050565b6001546001600160a01b031681565b600681815481106106aa57600080fd5b6000918252602090912001546001600160a01b0316905081565b606060028251101561071d576040805162461bcd60e51b815260206004820152601960248201527f53776170466163746f72793a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561073557600080fd5b5060405190808252806020026020018201604052801561075f578160200160208202803683370190505b509050828160018351038151811061077357fe5b60209081029190910101528151600019015b8015610808576000806107c18560018503815181106107a057fe5b60200260200101518685815181106107b457fe5b6020026020010151611296565b915091506107e38484815181106107d457fe5b60200260200101518383610918565b8460018503815181106107f257fe5b6020908102919091010152505060001901610785565b5092915050565b600080826001600160a01b0316846001600160a01b03161415610879576040805162461bcd60e51b815260206004820181905260248201527f53776170466163746f72793a204944454e544943414c5f414444524553534553604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b03161061089957828461089c565b83835b90925090506001600160a01b0382166108fc576040805162461bcd60e51b815260206004820152601960248201527f53776170466163746f72793a205a45524f5f4144445245535300000000000000604482015290519081900360640190fd5b9250929050565b60065490565b6004546001600160a01b031681565b60008084116109585760405162461bcd60e51b81526004018080602001828103825260278152602001806153a26027913960400191505060405180910390fd5b6000831180156109685750600082115b6109a35760405162461bcd60e51b815260040180806020018281038252602381526020018061543b6023913960400191505060405180910390fd5b60006109bb6103e86109b58688611422565b90611422565b905060006109cf6103e56109b586896114de565b90506109e660018284816109df57fe5b0490611484565b9695505050505050565b60006109fc8383611520565b5050600080610a0b858561080f565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b166034820152815160288183030181526048820183528051908401206003547fff0000000000000000000000000000000000000000000000000000000000000060688401523090951b6069830152607d820152609d808201949094528151808203909401845260bd019052815191012095945050505050565b6001546001600160a01b03163314610b08576040805162461bcd60e51b815260206004820152601660248201527f53776170466163746f72793a20464f5242494444454e00000000000000000000604482015290519081900360640190fd5b6001600160a01b038116610b4d5760405162461bcd60e51b815260040180806020018281038252602c8152602001806153c9602c913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000808411610bd2576040805162461bcd60e51b815260206004820181905260248201527f53776170466163746f72793a20494e53554646494349454e545f414d4f554e54604482015290519081900360640190fd5b600083118015610be25750600082115b610c1d5760405162461bcd60e51b815260040180806020018281038252602381526020018061543b6023913960400191505060405180910390fd5b82610c288584611422565b81610c2f57fe5b04949350505050565b6001546001600160a01b03163314610c97576040805162461bcd60e51b815260206004820152601660248201527f53776170466163746f72793a20464f5242494444454e00000000000000000000604482015290519081900360640190fd5b60008111610cd65760405162461bcd60e51b81526004018080602001828103825260258152602001806154166025913960400191505060405180910390fd5b610ce18160016114de565b60025550565b6000816001600160a01b0316836001600160a01b03161415610d50576040805162461bcd60e51b815260206004820181905260248201527f53776170466163746f72793a204944454e544943414c5f414444524553534553604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b031610610d73578385610d76565b84845b90925090506001600160a01b038216610dd6576040805162461bcd60e51b815260206004820152601960248201527f53776170466163746f72793a205a45524f5f4144445245535300000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260056020908152604080832085851684529091529020541615610e50576040805162461bcd60e51b815260206004820152601860248201527f53776170466163746f72793a20504149525f4558495354530000000000000000604482015290519081900360640190fd5b600080610e5d8484611520565b91509150600060405180602001610e7390611809565b6020820181038252601f19601f8201166040525090506000858560405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59650866001600160a01b031663485cc95587876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015610f4057600080fd5b505af1158015610f54573d6000803e3d6000fd5b50505050866001600160a01b031663d8cbd6ae85856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015610fb857600080fd5b505af1158015610fcc573d6000803e3d6000fd5b505050508660056000886001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508660056000876001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506006879080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b03160217905550846001600160a01b0316866001600160a01b03167f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e98960068054905060405180836001600160a01b031681526020018281526020019250505060405180910390a350505050505092915050565b60606002825110156111b9576040805162461bcd60e51b815260206004820152601960248201527f53776170466163746f72793a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b815167ffffffffffffffff811180156111d157600080fd5b506040519080825280602002602001820160405280156111fb578160200160208202803683370190505b509050828160008151811061120c57fe5b60200260200101818152505060005b60018351038110156108085760008061125085848151811061123957fe5b60200260200101518685600101815181106107b457fe5b9150915061127284848151811061126357fe5b602002602001015183836105b3565b84846001018151811061128157fe5b6020908102919091010152505060010161121b565b60008060006112a5858561080f565b5090506000806112b587876109f0565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156112ed57600080fd5b505afa158015611301573d6000803e3d6000fd5b505050506040513d606081101561131757600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b0387811690841614611351578082611354565b81815b909890975095505050505050565b60035481565b60025481565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b031633146113f3576040805162461bcd60e51b815260206004820152601660248201527f53776170466163746f72793a20464f5242494444454e00000000000000000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000826114315750600061147e565b8282028284828161143e57fe5b041461147b5760405162461bcd60e51b81526004018080602001828103825260218152602001806153f56021913960400191505060405180910390fd5b90505b92915050565b60008282018381101561147b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061147b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611772565b60048054604080517f26c7bd930000000000000000000000000000000000000000000000000000000081526001600160a01b03868116948201949094529051600093849316916326c7bd93916024808301926020929190829003018186803b15801561158b57600080fd5b505afa15801561159f573d6000803e3d6000fd5b505050506040513d60208110156115b557600080fd5b505191506001600160a01b03808316908516141561161a576040805162461bcd60e51b815260206004820152601360248201527f53776170466163746f72793a2063546f6b656e00000000000000000000000000604482015290519081900360640190fd5b600460009054906101000a90046001600160a01b03166001600160a01b03166326c7bd93846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561167c57600080fd5b505afa158015611690573d6000803e3d6000fd5b505050506040513d60208110156116a657600080fd5b505190506001600160a01b03808216908416141561170b576040805162461bcd60e51b815260206004820152601360248201527f53776170466163746f72793a2063546f6b656e00000000000000000000000000604482015290519081900360640190fd5b806001600160a01b0316826001600160a01b031614156108fc576040805162461bcd60e51b815260206004820152601760248201527f53776170466163746f72793a204475702063546f6b656e000000000000000000604482015290519081900360640190fd5b600081848411156118015760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156117c65781810151838201526020016117ae565b50505050905090810190601f1680156117f35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b613b65806118178339019056fe60806040526001600a5534801561001557600080fd5b5060408051808201825260088152672628102a37b5b2b760c11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc285f7cfebd35a59cb5c0c032add67fdc80dcde2f8127cb94e4b49a72469ed02818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600e55600080546001600160a01b03191633179055613a5f806101066000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c806370a0823111610145578063ba9a7a56116100bd578063d505accf1161008c578063d939fa8a11610071578063d939fa8a14610765578063dd62ed3e1461076d578063fff6cae91461079b57610241565b8063d505accf146106e6578063d8cbd6ae1461073757610241565b8063ba9a7a56146106a8578063bc25cf77146106b0578063c45a0155146106d6578063d21220a7146106de57610241565b806389afcb441161011457806395d89b41116100f957806395d89b4114610648578063a9059cbb14610650578063ad9b80241461067c57610241565b806389afcb4414610601578063948023ab1461064057610241565b806370a08231146105a55780637464fc3d146105cb5780637ecebe00146105d35780637ee60012146105f957610241565b806330adf81f116101d8578063569023a8116101a75780635a3d54931161018c5780635a3d5493146104eb5780636705a9c1146104f35780636a6278421461057f57610241565b8063569023a8146104bd5780635909c0d5146104e357610241565b806330adf81f14610461578063313ce567146104695780633644e51514610487578063485cc9551461048f57610241565b8063095ea7b311610214578063095ea7b3146103ad5780630dfe1681146103ed57806318160ddd1461041157806323b872dd1461042b57610241565b8063022c0d9f146102465780630559a35c146102d457806306fdde03146102f85780630902f1ac14610375575b600080fd5b6102d26004803603608081101561025c57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561029357600080fd5b8201836020820111156102a557600080fd5b803590602001918460018302840111640100000000831117156102c757600080fd5b5090925090506107a3565b005b6102dc610d52565b604080516001600160701b039092168252519081900360200190f35b610300610d68565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561033a578181015183820152602001610322565b50505050905090810190601f1680156103675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61037d610da1565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103d9600480360360408110156103c357600080fd5b506001600160a01b038135169060200135610dcb565b604080519115158252519081900360200190f35b6103f5610de2565b604080516001600160a01b039092168252519081900360200190f35b610419610df1565b60408051918252519081900360200190f35b6103d96004803603606081101561044157600080fd5b506001600160a01b03813581169160208101359091169060400135610df7565b610419610e8b565b610471610eaf565b6040805160ff9092168252519081900360200190f35b610419610eb4565b6102d2600480360360408110156104a557600080fd5b506001600160a01b0381358116916020013516610eba565b610419600480360360208110156104d357600080fd5b50356001600160a01b0316610f54565b610419610faa565b610419610fb0565b6102d26004803603608081101561050957600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561054057600080fd5b82018360208201111561055257600080fd5b8035906020019184600183028401116401000000008311171561057457600080fd5b509092509050610fb6565b6104196004803603602081101561059557600080fd5b50356001600160a01b03166118f8565b610419600480360360208110156105bb57600080fd5b50356001600160a01b03166120b7565b6104196120c9565b610419600480360360208110156105e957600080fd5b50356001600160a01b03166120cf565b6102dc6120e1565b6106276004803603602081101561061757600080fd5b50356001600160a01b03166120f0565b6040805192835260208301919091528051918290030190f35b6103f56124b5565b6103006124c4565b6103d96004803603604081101561066657600080fd5b506001600160a01b0381351690602001356124fd565b6104196004803603604081101561069257600080fd5b506001600160a01b03813516906020013561250a565b6104196125e2565b6102d2600480360360208110156106c657600080fd5b50356001600160a01b03166125e8565b6103f5612759565b6103f5612768565b6102d2600480360360e08110156106fc57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612777565b6102d26004803603604081101561074d57600080fd5b506001600160a01b038135811691602001351661299f565b6103f5612a39565b6104196004803603604081101561078357600080fd5b506001600160a01b0381358116916020013516612a48565b6102d2612a65565b600a546001146107ed576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55841515806108005750600084115b610851576040805162461bcd60e51b815260206004820152601460248201527f537761703a20494e56414c49445f414d4f554e54000000000000000000000000604482015290519081900360640190fd5b60008061085c610da1565b5091509150816001600160701b0316871080156108815750806001600160701b031686105b6108d2576040805162461bcd60e51b815260206004820152601c60248201527f537761703a20494e53554646494349454e545f4c495155494449545900000000604482015290519081900360640190fd5b60015460025460009182916001600160a01b039182169190811690891682148015906109105750806001600160a01b0316896001600160a01b031614155b610954576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b6004546001600160a01b038a811691161480159061098057506005546001600160a01b038a8116911614155b6109c4576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b8a156109d5576109d5828a8d612bc6565b89156109e6576109e6818a8c612bc6565b8615610a9857886001600160a01b031663226dc882338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610ade57600080fd5b505afa158015610af2573d6000803e3d6000fd5b505050506040513d6020811015610b0857600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015610b5457600080fd5b505afa158015610b68573d6000803e3d6000fd5b505050506040513d6020811015610b7e57600080fd5b5051925060009150506001600160701b0385168a90038311610ba1576000610bb0565b89856001600160701b03160383035b9050600089856001600160701b0316038311610bcd576000610bdc565b89856001600160701b03160383035b90506000821180610bed5750600081115b610c3e576040805162461bcd60e51b815260206004820152601f60248201527f537761703a20494e53554646494349454e545f494e5055545f414d4f554e5400604482015290519081900360640190fd5b6000610c60610c4e846003612d78565b610c5a876103e8612d78565b90612dd8565b90506000610c72610c4e846003612d78565b9050610c97620f4240610c916001600160701b038b8116908b16612d78565b90612d78565b610ca18383612d78565b1015610cde576040805162461bcd60e51b8152602060048201526007602482015266537761703a204b60c81b604482015290519081900360640190fd5b5050610cec84848888612e1a565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600a55505050505050505050565b600654600160701b90046001600160701b031681565b6040518060400160405280600881526020017f4c5020546f6b656e00000000000000000000000000000000000000000000000081525081565b6003546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610dd8338484612ff1565b5060015b92915050565b6001546001600160a01b031681565b600b5481565b6001600160a01b0383166000908152600d6020908152604080832033845290915281205460001914610e76576001600160a01b0384166000908152600d60209081526040808320338452909152902054610e519083612dd8565b6001600160a01b0385166000908152600d602090815260408083203384529091529020555b610e81848484613053565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600e5481565b6000546001600160a01b03163314610f19576040805162461bcd60e51b815260206004820152601360248201527f4d646578537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560028054929093169116179055565b6000600a54600114610fa0576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6001600a55919050565b60075481565b60085481565b600a54600114611000576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55841515806110135750600084115b611064576040805162461bcd60e51b815260206004820152601460248201527f537761703a20494e56414c49445f414d4f554e54000000000000000000000000604482015290519081900360640190fd5b60008061106f610da1565b5091509150816001600160701b0316871080156110945750806001600160701b031686105b6110e5576040805162461bcd60e51b815260206004820152601c60248201527f537761703a20494e53554646494349454e545f4c495155494449545900000000604482015290519081900360640190fd5b6110ed613972565b6110f5613972565b6001546001600160a01b039081166020808501918252600254831690840152600454821660408086019190915260055483169084015251888216911614801590611155575080602001516001600160a01b0316876001600160a01b031614155b611199576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b81604001516001600160a01b0316876001600160a01b0316141580156111d5575080604001516001600160a01b0316876001600160a01b031614155b611219576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b88156112ae5781604001516001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561125e57600080fd5b505af1158015611272573d6000803e3d6000fd5b505050506040513d602081101561128857600080fd5b5051898161129257fe5b0460a0830152604082015160208301516112ae9189918c613101565b87156113435780604001516001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156112f357600080fd5b505af1158015611307573d6000803e3d6000fd5b505050506040513d602081101561131d57600080fd5b5051888161132757fe5b0460a0820152604081015160208201516113439189918b613101565b84156113f557866001600160a01b031663226dc882338b8b8a8a6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156113dc57600080fd5b505af11580156113f0573d6000803e3d6000fd5b505050505b602080830151604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d602081101561146757600080fd5b50516060830152602081810151604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b1580156114b657600080fd5b505afa1580156114ca573d6000803e3d6000fd5b505050506040513d60208110156114e057600080fd5b50516060808301919091528201511515806114ff575060008160600151115b611550576040805162461bcd60e51b815260206004820152601f60248201527f537761703a20494e53554646494349454e545f494e5055545f414d4f554e5400604482015290519081900360640190fd5b6060820151156115d55781604001516001600160a01b031663a0712d6883606001516040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156115a857600080fd5b505af11580156115bc573d6000803e3d6000fd5b505050506040513d60208110156115d257600080fd5b50505b60608101511561165a5780604001516001600160a01b031663a0712d6882606001516040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561162d57600080fd5b505af1158015611641573d6000803e3d6000fd5b505050506040513d602081101561165757600080fd5b50505b81604001516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116ab57600080fd5b505afa1580156116bf573d6000803e3d6000fd5b505050506040513d60208110156116d557600080fd5b5051825260408082015181516370a0823160e01b815230600482015291516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561172457600080fd5b505afa158015611738573d6000803e3d6000fd5b505050506040513d602081101561174e57600080fd5b5051815260a082015182516001600160701b038616919091031061177357600061178a565b8160a00151846001600160701b0316038260000151035b608083015260a081015181516001600160701b03851691909103106117b05760006117c7565b8060a00151836001600160701b0316038160000151035b6080808301919091528201516000906117f3906117e5906003612d78565b8451610c5a906103e8612d78565b905060006118126117e560038560800151612d7890919063ffffffff16565b9050611831620f4240610c916001600160701b03898116908916612d78565b61183b8383612d78565b1015611878576040805162461bcd60e51b8152602060048201526007602482015266537761703a204b60c81b604482015290519081900360640190fd5b50508151815161188a91908686612e1a565b606080830151828201516040805192835260208301919091528181018c90529181018a905290516001600160a01b0389169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600a5550505050505050565b6000600a54600114611944576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a81905580611954610da1565b50600154604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156119a857600080fd5b505afa1580156119bc573d6000803e3d6000fd5b505050506040513d60208110156119d257600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611a2557600080fd5b505afa158015611a39573d6000803e3d6000fd5b505050506040513d6020811015611a4f57600080fd5b505160048054604080516370a0823160e01b81523093810193909352519293506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015611aa357600080fd5b505afa158015611ab7573d6000803e3d6000fd5b505050506040513d6020811015611acd57600080fd5b5051600554604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611b2057600080fd5b505afa158015611b34573d6000803e3d6000fd5b505050506040513d6020811015611b4a57600080fd5b5051600480546040805163095ea7b360e01b81526001600160a01b039092169282018390526024820188905251929350909163095ea7b3916044808201926020929091908290030181600087803b158015611ba457600080fd5b505af1158015611bb8573d6000803e3d6000fd5b505050506040513d6020811015611bce57600080fd5b5050600480546040805163140e25ad60e31b8152928301879052516001600160a01b039091169163a0712d689160248083019260209291908290030181600087803b158015611c1c57600080fd5b505af1158015611c30573d6000803e3d6000fd5b505050506040513d6020811015611c4657600080fd5b5050600480546040805163095ea7b360e01b81526001600160a01b03909216928201839052600060248301819052905163095ea7b3926044808201936020939283900390910190829087803b158015611c9e57600080fd5b505af1158015611cb2573d6000803e3d6000fd5b505050506040513d6020811015611cc857600080fd5b50506005546040805163095ea7b360e01b81526001600160a01b0390921660048301819052602483018690529051909163095ea7b39160448083019260209291908290030181600087803b158015611d1f57600080fd5b505af1158015611d33573d6000803e3d6000fd5b505050506040513d6020811015611d4957600080fd5b50506005546040805163140e25ad60e31b81526004810186905290516001600160a01b039092169163a0712d68916024808201926020929091908290030181600087803b158015611d9957600080fd5b505af1158015611dad573d6000803e3d6000fd5b505050506040513d6020811015611dc357600080fd5b50506005546040805163095ea7b360e01b81526001600160a01b03909216600483018190526000602484018190529151909263095ea7b39260448083019360209390929083900390910190829087803b158015611e1f57600080fd5b505af1158015611e33573d6000803e3d6000fd5b505050506040513d6020811015611e4957600080fd5b505060048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015611e9a57600080fd5b505afa158015611eae573d6000803e3d6000fd5b505050506040513d6020811015611ec457600080fd5b5051600554604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611f1757600080fd5b505afa158015611f2b573d6000803e3d6000fd5b505050506040513d6020811015611f4157600080fd5b505190506000611f518584612dd8565b90506000611f5f8584612dd8565b90506000611f6d8b8b613303565b600b5490915080611fa457611f906103e8610c5a611f8b8787612d78565b6134c7565b9c50611f9f60006103e8613519565b611fe7565b611fe46001600160701b038d16611fbb8684612d78565b81611fc257fe5b046001600160701b038d16611fd78685612d78565b81611fde57fe5b046135a4565b9c505b60008d116120265760405162461bcd60e51b8152600401808060200182810382526027815260200180613a036027913960400191505060405180910390fd5b6120308e8e613519565b61203c86868e8e612e1a565b811561206657600354612062906001600160701b0380821691600160701b900416612d78565b6009555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600a5550989a9950505050505050505050565b600c6020526000908152604090205481565b60095481565b600f6020526000908152604090205481565b6006546001600160701b031681565b600080600a5460011461213d576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a8190558061214d610da1565b5060048054600554604080516370a0823160e01b81523094810194909452519496509294506001600160a01b039081169392169160009184916370a0823191602480820192602092909190829003018186803b1580156121ac57600080fd5b505afa1580156121c0573d6000803e3d6000fd5b505050506040513d60208110156121d657600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561222457600080fd5b505afa158015612238573d6000803e3d6000fd5b505050506040513d602081101561224e57600080fd5b5051306000908152600c602052604081205491925061226d8888613303565b600b549091506000816122808588612d78565b8161228757fe5b0490506000826122978688612d78565b8161229e57fe5b0490506000821180156122b15750600081115b6122ec5760405162461bcd60e51b81526004018080602001828103825260278152602001806139bb6027913960400191505060405180910390fd5b6122f630866135bb565b600154612310908f908b906001600160a01b03168561364c565b60025461232a908f908a906001600160a01b03168461364c565b604080516370a0823160e01b815230600482015290516001600160a01b038b16916370a08231916024808301926020929190829003018186803b15801561237057600080fd5b505afa158015612384573d6000803e3d6000fd5b505050506040513d602081101561239a57600080fd5b5051604080516370a0823160e01b815230600482015290519198506001600160a01b038a16916370a0823191602480820192602092909190829003018186803b1580156123e657600080fd5b505afa1580156123fa573d6000803e3d6000fd5b505050506040513d602081101561241057600080fd5b5051955061242087878d8d612e1a565b831561244a57600354612446906001600160701b0380821691600160701b900416612d78565b6009555b8d6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968f8f604051808381526020018281526020019250505060405180910390a350505050505050505050506001600a81905550915091565b6004546001600160a01b031681565b6040518060400160405280600481526020017f484d44580000000000000000000000000000000000000000000000000000000081525081565b6000610dd8338484613053565b6001546000906001600160a01b0384811691161480159061253957506002546001600160a01b03848116911614155b8061254d57506003546001600160701b0316155b806125685750600354600160701b90046001600160701b0316155b1561257557506000610ddc565b6001546001600160a01b03848116911614156125be576003546125b7906001600160701b03808216916125b191600160701b9091041685612d78565b906137a3565b9050610ddc565b6003546125b7906001600160701b03600160701b82048116916125b1911685612d78565b6103e881565b600a54600114612632576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55600154600254600354604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926126db92859287926126d6926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156126a457600080fd5b505afa1580156126b8573d6000803e3d6000fd5b505050506040513d60208110156126ce57600080fd5b505190612dd8565b612bc6565b61274f81846126d66003600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156126a457600080fd5b50506001600a5550565b6000546001600160a01b031681565b6002546001600160a01b031681565b428410156127cc576040805162461bcd60e51b815260206004820152600d60248201527f537761703a204558504952454400000000000000000000000000000000000000604482015290519081900360640190fd5b600e546001600160a01b038089166000818152600f602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015612902573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906129385750886001600160a01b0316816001600160a01b0316145b612989576040805162461bcd60e51b815260206004820152601760248201527f537761703a20494e56414c49445f5349474e4154555245000000000000000000604482015290519081900360640190fd5b612994898989612ff1565b505050505050505050565b6000546001600160a01b031633146129fe576040805162461bcd60e51b815260206004820152601360248201527f4d646578537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600480546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560058054929093169116179055565b6005546001600160a01b031681565b600d60209081526000928352604080842090915290825290205481565b600a54600114612aaf576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55600154604080516370a0823160e01b81523060048201529051612bbf926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612b0057600080fd5b505afa158015612b14573d6000803e3d6000fd5b505050506040513d6020811015612b2a57600080fd5b5051600254604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612b7757600080fd5b505afa158015612b8b573d6000803e3d6000fd5b505050506040513d6020811015612ba157600080fd5b50516003546001600160701b0380821691600160701b900416612e1a565b6001600a55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017815292518151600094859489169392918291908083835b60208310612c8b5780518252601f199092019160209182019101612c6c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612ced576040519150601f19603f3d011682016040523d82523d6000602084013e612cf2565b606091505b5091509150818015612d20575080511580612d205750808060200190516020811015612d1d57600080fd5b50515b612d71576040805162461bcd60e51b815260206004820152601560248201527f537761703a205452414e534645525f4641494c45440000000000000000000000604482015290519081900360640190fd5b5050505050565b600082612d8757506000610ddc565b82820282848281612d9457fe5b0414612dd15760405162461bcd60e51b81526004018080602001828103825260218152602001806139e26021913960400191505060405180910390fd5b9392505050565b6000612dd183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506137e5565b6001600160701b038411801590612e3857506001600160701b038311155b612e89576040805162461bcd60e51b815260206004820152601260248201527f4d646578537761703a204f564552464c4f570000000000000000000000000000604482015290519081900360640190fd5b60035463ffffffff42811691600160e01b90048116820390811615801590612eb957506001600160701b03841615155b8015612ecd57506001600160701b03831615155b15612f38578063ffffffff16612ef585612ee68661387c565b6001600160e01b03169061388e565b600780546001600160e01b03929092169290920201905563ffffffff8116612f2084612ee68761387c565b600880546001600160e01b0392909216929092020190555b600380546dffffffffffffffffffffffffffff19166001600160701b03888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b038084166000818152600d6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600c60205260409020546130769082612dd8565b6001600160a01b038085166000908152600c602052604080822093909355908416815220546130a590826138b3565b6001600160a01b038084166000818152600c602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000836001600160a01b031663852a12e3836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561314957600080fd5b505af115801561315d573d6000803e3d6000fd5b505050506040513d602081101561317357600080fd5b5051905080613204576131ff8386856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156131ce57600080fd5b505afa1580156131e2573d6000803e3d6000fd5b505050506040513d60208110156131f857600080fd5b5051612bc6565b612d71565b6000846001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561324157600080fd5b505af1158015613255573d6000803e3d6000fd5b505050506040513d602081101561326b57600080fd5b5051838161327557fe5b049050846001600160a01b031663a9059cbb87836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156132cf57600080fd5b505af11580156132e3573d6000803e3d6000fd5b505050506040513d60208110156132f957600080fd5b5050505050505050565b60008054604080517f017e7e58000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163017e7e58916004808301926020929190829003018186803b15801561336157600080fd5b505afa158015613375573d6000803e3d6000fd5b505050506040513d602081101561338b57600080fd5b50516009546001600160a01b0382161580159450919250906134b35780156134ae5760006133c8611f8b6001600160701b03888116908816612d78565b905060006133d5836134c7565b9050808211156134ab5760006133f76133ee8484612dd8565b600b5490612d78565b905060006134878361348160008054906101000a90046001600160a01b03166001600160a01b031663deba86e36040518163ffffffff1660e01b815260040160206040518083038186803b15801561344e57600080fd5b505afa158015613462573d6000803e3d6000fd5b505050506040513d602081101561347857600080fd5b50518790612d78565b906138b3565b9050600081838161349457fe5b04905080156134a7576134a78782613519565b5050505b50505b6134bf565b80156134bf5760006009555b505092915050565b6000600382111561350a575080600160028204015b81811015613504578091506002818285816134f357fe5b0401816134fc57fe5b0490506134dc565b50613514565b8115613514575060015b919050565b600b5461352690826138b3565b600b556001600160a01b0382166000908152600c602052604090205461354c90826138b3565b6001600160a01b0383166000818152600c602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818311156135b45781612dd1565b5090919050565b6001600160a01b0382166000908152600c60205260409020546135de9082612dd8565b6001600160a01b0383166000908152600c6020526040902055600b546136049082612dd8565b600b556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000836001600160a01b031663db006a75836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561369457600080fd5b505af11580156136a8573d6000803e3d6000fd5b505050506040513d60208110156136be57600080fd5b5051905080613719576131ff8386856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156131ce57600080fd5b836001600160a01b031663a9059cbb86846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561377057600080fd5b505af1158015613784573d6000803e3d6000fd5b505050506040513d602081101561379a57600080fd5b50505050505050565b6000612dd183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061390d565b600081848411156138745760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613839578181015183820152602001613821565b50505050905090810190601f1680156138665780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816138ab57fe5b049392505050565b600082820183811015612dd1576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818361395c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613839578181015183820152602001613821565b50600083858161396857fe5b0495945050505050565b6040518060c001604052806000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152509056fe4d646578537761703a20494e53554646494349454e545f4c49515549444954595f4255524e4544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d646578537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220db0671eb1e4f69020341a8bb55393d0d0d1a5f65ba4b91df461f7db4107bf66764736f6c6343000706003353776170466163746f72793a20494e53554646494349454e545f494e5055545f414d4f554e5453776170466163746f72793a20494e53554646494349454e545f4f55545055545f414d4f554e544d64657853776170466163746f72793a20466565546f536574746572206973207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d64657853776170466163746f72793a204645455f544f5f524154455f4f564552464c4f5753776170466163746f72793a20494e53554646494349454e545f4c4951554944495459a2646970667358221220b196dfbb3af2352c0265198cac33f75be899d5fad79fd9c91ff272c329fc89c664736f6c6343000706003360806040526001600a5534801561001557600080fd5b5060408051808201825260088152672628102a37b5b2b760c11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc285f7cfebd35a59cb5c0c032add67fdc80dcde2f8127cb94e4b49a72469ed02818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600e55600080546001600160a01b03191633179055613a5f806101066000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c806370a0823111610145578063ba9a7a56116100bd578063d505accf1161008c578063d939fa8a11610071578063d939fa8a14610765578063dd62ed3e1461076d578063fff6cae91461079b57610241565b8063d505accf146106e6578063d8cbd6ae1461073757610241565b8063ba9a7a56146106a8578063bc25cf77146106b0578063c45a0155146106d6578063d21220a7146106de57610241565b806389afcb441161011457806395d89b41116100f957806395d89b4114610648578063a9059cbb14610650578063ad9b80241461067c57610241565b806389afcb4414610601578063948023ab1461064057610241565b806370a08231146105a55780637464fc3d146105cb5780637ecebe00146105d35780637ee60012146105f957610241565b806330adf81f116101d8578063569023a8116101a75780635a3d54931161018c5780635a3d5493146104eb5780636705a9c1146104f35780636a6278421461057f57610241565b8063569023a8146104bd5780635909c0d5146104e357610241565b806330adf81f14610461578063313ce567146104695780633644e51514610487578063485cc9551461048f57610241565b8063095ea7b311610214578063095ea7b3146103ad5780630dfe1681146103ed57806318160ddd1461041157806323b872dd1461042b57610241565b8063022c0d9f146102465780630559a35c146102d457806306fdde03146102f85780630902f1ac14610375575b600080fd5b6102d26004803603608081101561025c57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561029357600080fd5b8201836020820111156102a557600080fd5b803590602001918460018302840111640100000000831117156102c757600080fd5b5090925090506107a3565b005b6102dc610d52565b604080516001600160701b039092168252519081900360200190f35b610300610d68565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561033a578181015183820152602001610322565b50505050905090810190601f1680156103675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61037d610da1565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103d9600480360360408110156103c357600080fd5b506001600160a01b038135169060200135610dcb565b604080519115158252519081900360200190f35b6103f5610de2565b604080516001600160a01b039092168252519081900360200190f35b610419610df1565b60408051918252519081900360200190f35b6103d96004803603606081101561044157600080fd5b506001600160a01b03813581169160208101359091169060400135610df7565b610419610e8b565b610471610eaf565b6040805160ff9092168252519081900360200190f35b610419610eb4565b6102d2600480360360408110156104a557600080fd5b506001600160a01b0381358116916020013516610eba565b610419600480360360208110156104d357600080fd5b50356001600160a01b0316610f54565b610419610faa565b610419610fb0565b6102d26004803603608081101561050957600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561054057600080fd5b82018360208201111561055257600080fd5b8035906020019184600183028401116401000000008311171561057457600080fd5b509092509050610fb6565b6104196004803603602081101561059557600080fd5b50356001600160a01b03166118f8565b610419600480360360208110156105bb57600080fd5b50356001600160a01b03166120b7565b6104196120c9565b610419600480360360208110156105e957600080fd5b50356001600160a01b03166120cf565b6102dc6120e1565b6106276004803603602081101561061757600080fd5b50356001600160a01b03166120f0565b6040805192835260208301919091528051918290030190f35b6103f56124b5565b6103006124c4565b6103d96004803603604081101561066657600080fd5b506001600160a01b0381351690602001356124fd565b6104196004803603604081101561069257600080fd5b506001600160a01b03813516906020013561250a565b6104196125e2565b6102d2600480360360208110156106c657600080fd5b50356001600160a01b03166125e8565b6103f5612759565b6103f5612768565b6102d2600480360360e08110156106fc57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612777565b6102d26004803603604081101561074d57600080fd5b506001600160a01b038135811691602001351661299f565b6103f5612a39565b6104196004803603604081101561078357600080fd5b506001600160a01b0381358116916020013516612a48565b6102d2612a65565b600a546001146107ed576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55841515806108005750600084115b610851576040805162461bcd60e51b815260206004820152601460248201527f537761703a20494e56414c49445f414d4f554e54000000000000000000000000604482015290519081900360640190fd5b60008061085c610da1565b5091509150816001600160701b0316871080156108815750806001600160701b031686105b6108d2576040805162461bcd60e51b815260206004820152601c60248201527f537761703a20494e53554646494349454e545f4c495155494449545900000000604482015290519081900360640190fd5b60015460025460009182916001600160a01b039182169190811690891682148015906109105750806001600160a01b0316896001600160a01b031614155b610954576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b6004546001600160a01b038a811691161480159061098057506005546001600160a01b038a8116911614155b6109c4576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b8a156109d5576109d5828a8d612bc6565b89156109e6576109e6818a8c612bc6565b8615610a9857886001600160a01b031663226dc882338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610ade57600080fd5b505afa158015610af2573d6000803e3d6000fd5b505050506040513d6020811015610b0857600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015610b5457600080fd5b505afa158015610b68573d6000803e3d6000fd5b505050506040513d6020811015610b7e57600080fd5b5051925060009150506001600160701b0385168a90038311610ba1576000610bb0565b89856001600160701b03160383035b9050600089856001600160701b0316038311610bcd576000610bdc565b89856001600160701b03160383035b90506000821180610bed5750600081115b610c3e576040805162461bcd60e51b815260206004820152601f60248201527f537761703a20494e53554646494349454e545f494e5055545f414d4f554e5400604482015290519081900360640190fd5b6000610c60610c4e846003612d78565b610c5a876103e8612d78565b90612dd8565b90506000610c72610c4e846003612d78565b9050610c97620f4240610c916001600160701b038b8116908b16612d78565b90612d78565b610ca18383612d78565b1015610cde576040805162461bcd60e51b8152602060048201526007602482015266537761703a204b60c81b604482015290519081900360640190fd5b5050610cec84848888612e1a565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600a55505050505050505050565b600654600160701b90046001600160701b031681565b6040518060400160405280600881526020017f4c5020546f6b656e00000000000000000000000000000000000000000000000081525081565b6003546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610dd8338484612ff1565b5060015b92915050565b6001546001600160a01b031681565b600b5481565b6001600160a01b0383166000908152600d6020908152604080832033845290915281205460001914610e76576001600160a01b0384166000908152600d60209081526040808320338452909152902054610e519083612dd8565b6001600160a01b0385166000908152600d602090815260408083203384529091529020555b610e81848484613053565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600e5481565b6000546001600160a01b03163314610f19576040805162461bcd60e51b815260206004820152601360248201527f4d646578537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560028054929093169116179055565b6000600a54600114610fa0576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6001600a55919050565b60075481565b60085481565b600a54600114611000576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55841515806110135750600084115b611064576040805162461bcd60e51b815260206004820152601460248201527f537761703a20494e56414c49445f414d4f554e54000000000000000000000000604482015290519081900360640190fd5b60008061106f610da1565b5091509150816001600160701b0316871080156110945750806001600160701b031686105b6110e5576040805162461bcd60e51b815260206004820152601c60248201527f537761703a20494e53554646494349454e545f4c495155494449545900000000604482015290519081900360640190fd5b6110ed613972565b6110f5613972565b6001546001600160a01b039081166020808501918252600254831690840152600454821660408086019190915260055483169084015251888216911614801590611155575080602001516001600160a01b0316876001600160a01b031614155b611199576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b81604001516001600160a01b0316876001600160a01b0316141580156111d5575080604001516001600160a01b0316876001600160a01b031614155b611219576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b88156112ae5781604001516001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561125e57600080fd5b505af1158015611272573d6000803e3d6000fd5b505050506040513d602081101561128857600080fd5b5051898161129257fe5b0460a0830152604082015160208301516112ae9189918c613101565b87156113435780604001516001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156112f357600080fd5b505af1158015611307573d6000803e3d6000fd5b505050506040513d602081101561131d57600080fd5b5051888161132757fe5b0460a0820152604081015160208201516113439189918b613101565b84156113f557866001600160a01b031663226dc882338b8b8a8a6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156113dc57600080fd5b505af11580156113f0573d6000803e3d6000fd5b505050505b602080830151604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d602081101561146757600080fd5b50516060830152602081810151604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b1580156114b657600080fd5b505afa1580156114ca573d6000803e3d6000fd5b505050506040513d60208110156114e057600080fd5b50516060808301919091528201511515806114ff575060008160600151115b611550576040805162461bcd60e51b815260206004820152601f60248201527f537761703a20494e53554646494349454e545f494e5055545f414d4f554e5400604482015290519081900360640190fd5b6060820151156115d55781604001516001600160a01b031663a0712d6883606001516040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156115a857600080fd5b505af11580156115bc573d6000803e3d6000fd5b505050506040513d60208110156115d257600080fd5b50505b60608101511561165a5780604001516001600160a01b031663a0712d6882606001516040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561162d57600080fd5b505af1158015611641573d6000803e3d6000fd5b505050506040513d602081101561165757600080fd5b50505b81604001516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116ab57600080fd5b505afa1580156116bf573d6000803e3d6000fd5b505050506040513d60208110156116d557600080fd5b5051825260408082015181516370a0823160e01b815230600482015291516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561172457600080fd5b505afa158015611738573d6000803e3d6000fd5b505050506040513d602081101561174e57600080fd5b5051815260a082015182516001600160701b038616919091031061177357600061178a565b8160a00151846001600160701b0316038260000151035b608083015260a081015181516001600160701b03851691909103106117b05760006117c7565b8060a00151836001600160701b0316038160000151035b6080808301919091528201516000906117f3906117e5906003612d78565b8451610c5a906103e8612d78565b905060006118126117e560038560800151612d7890919063ffffffff16565b9050611831620f4240610c916001600160701b03898116908916612d78565b61183b8383612d78565b1015611878576040805162461bcd60e51b8152602060048201526007602482015266537761703a204b60c81b604482015290519081900360640190fd5b50508151815161188a91908686612e1a565b606080830151828201516040805192835260208301919091528181018c90529181018a905290516001600160a01b0389169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600a5550505050505050565b6000600a54600114611944576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a81905580611954610da1565b50600154604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156119a857600080fd5b505afa1580156119bc573d6000803e3d6000fd5b505050506040513d60208110156119d257600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611a2557600080fd5b505afa158015611a39573d6000803e3d6000fd5b505050506040513d6020811015611a4f57600080fd5b505160048054604080516370a0823160e01b81523093810193909352519293506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015611aa357600080fd5b505afa158015611ab7573d6000803e3d6000fd5b505050506040513d6020811015611acd57600080fd5b5051600554604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611b2057600080fd5b505afa158015611b34573d6000803e3d6000fd5b505050506040513d6020811015611b4a57600080fd5b5051600480546040805163095ea7b360e01b81526001600160a01b039092169282018390526024820188905251929350909163095ea7b3916044808201926020929091908290030181600087803b158015611ba457600080fd5b505af1158015611bb8573d6000803e3d6000fd5b505050506040513d6020811015611bce57600080fd5b5050600480546040805163140e25ad60e31b8152928301879052516001600160a01b039091169163a0712d689160248083019260209291908290030181600087803b158015611c1c57600080fd5b505af1158015611c30573d6000803e3d6000fd5b505050506040513d6020811015611c4657600080fd5b5050600480546040805163095ea7b360e01b81526001600160a01b03909216928201839052600060248301819052905163095ea7b3926044808201936020939283900390910190829087803b158015611c9e57600080fd5b505af1158015611cb2573d6000803e3d6000fd5b505050506040513d6020811015611cc857600080fd5b50506005546040805163095ea7b360e01b81526001600160a01b0390921660048301819052602483018690529051909163095ea7b39160448083019260209291908290030181600087803b158015611d1f57600080fd5b505af1158015611d33573d6000803e3d6000fd5b505050506040513d6020811015611d4957600080fd5b50506005546040805163140e25ad60e31b81526004810186905290516001600160a01b039092169163a0712d68916024808201926020929091908290030181600087803b158015611d9957600080fd5b505af1158015611dad573d6000803e3d6000fd5b505050506040513d6020811015611dc357600080fd5b50506005546040805163095ea7b360e01b81526001600160a01b03909216600483018190526000602484018190529151909263095ea7b39260448083019360209390929083900390910190829087803b158015611e1f57600080fd5b505af1158015611e33573d6000803e3d6000fd5b505050506040513d6020811015611e4957600080fd5b505060048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015611e9a57600080fd5b505afa158015611eae573d6000803e3d6000fd5b505050506040513d6020811015611ec457600080fd5b5051600554604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611f1757600080fd5b505afa158015611f2b573d6000803e3d6000fd5b505050506040513d6020811015611f4157600080fd5b505190506000611f518584612dd8565b90506000611f5f8584612dd8565b90506000611f6d8b8b613303565b600b5490915080611fa457611f906103e8610c5a611f8b8787612d78565b6134c7565b9c50611f9f60006103e8613519565b611fe7565b611fe46001600160701b038d16611fbb8684612d78565b81611fc257fe5b046001600160701b038d16611fd78685612d78565b81611fde57fe5b046135a4565b9c505b60008d116120265760405162461bcd60e51b8152600401808060200182810382526027815260200180613a036027913960400191505060405180910390fd5b6120308e8e613519565b61203c86868e8e612e1a565b811561206657600354612062906001600160701b0380821691600160701b900416612d78565b6009555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600a5550989a9950505050505050505050565b600c6020526000908152604090205481565b60095481565b600f6020526000908152604090205481565b6006546001600160701b031681565b600080600a5460011461213d576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a8190558061214d610da1565b5060048054600554604080516370a0823160e01b81523094810194909452519496509294506001600160a01b039081169392169160009184916370a0823191602480820192602092909190829003018186803b1580156121ac57600080fd5b505afa1580156121c0573d6000803e3d6000fd5b505050506040513d60208110156121d657600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561222457600080fd5b505afa158015612238573d6000803e3d6000fd5b505050506040513d602081101561224e57600080fd5b5051306000908152600c602052604081205491925061226d8888613303565b600b549091506000816122808588612d78565b8161228757fe5b0490506000826122978688612d78565b8161229e57fe5b0490506000821180156122b15750600081115b6122ec5760405162461bcd60e51b81526004018080602001828103825260278152602001806139bb6027913960400191505060405180910390fd5b6122f630866135bb565b600154612310908f908b906001600160a01b03168561364c565b60025461232a908f908a906001600160a01b03168461364c565b604080516370a0823160e01b815230600482015290516001600160a01b038b16916370a08231916024808301926020929190829003018186803b15801561237057600080fd5b505afa158015612384573d6000803e3d6000fd5b505050506040513d602081101561239a57600080fd5b5051604080516370a0823160e01b815230600482015290519198506001600160a01b038a16916370a0823191602480820192602092909190829003018186803b1580156123e657600080fd5b505afa1580156123fa573d6000803e3d6000fd5b505050506040513d602081101561241057600080fd5b5051955061242087878d8d612e1a565b831561244a57600354612446906001600160701b0380821691600160701b900416612d78565b6009555b8d6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968f8f604051808381526020018281526020019250505060405180910390a350505050505050505050506001600a81905550915091565b6004546001600160a01b031681565b6040518060400160405280600481526020017f484d44580000000000000000000000000000000000000000000000000000000081525081565b6000610dd8338484613053565b6001546000906001600160a01b0384811691161480159061253957506002546001600160a01b03848116911614155b8061254d57506003546001600160701b0316155b806125685750600354600160701b90046001600160701b0316155b1561257557506000610ddc565b6001546001600160a01b03848116911614156125be576003546125b7906001600160701b03808216916125b191600160701b9091041685612d78565b906137a3565b9050610ddc565b6003546125b7906001600160701b03600160701b82048116916125b1911685612d78565b6103e881565b600a54600114612632576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55600154600254600354604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926126db92859287926126d6926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156126a457600080fd5b505afa1580156126b8573d6000803e3d6000fd5b505050506040513d60208110156126ce57600080fd5b505190612dd8565b612bc6565b61274f81846126d66003600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156126a457600080fd5b50506001600a5550565b6000546001600160a01b031681565b6002546001600160a01b031681565b428410156127cc576040805162461bcd60e51b815260206004820152600d60248201527f537761703a204558504952454400000000000000000000000000000000000000604482015290519081900360640190fd5b600e546001600160a01b038089166000818152600f602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015612902573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906129385750886001600160a01b0316816001600160a01b0316145b612989576040805162461bcd60e51b815260206004820152601760248201527f537761703a20494e56414c49445f5349474e4154555245000000000000000000604482015290519081900360640190fd5b612994898989612ff1565b505050505050505050565b6000546001600160a01b031633146129fe576040805162461bcd60e51b815260206004820152601360248201527f4d646578537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600480546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560058054929093169116179055565b6005546001600160a01b031681565b600d60209081526000928352604080842090915290825290205481565b600a54600114612aaf576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55600154604080516370a0823160e01b81523060048201529051612bbf926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612b0057600080fd5b505afa158015612b14573d6000803e3d6000fd5b505050506040513d6020811015612b2a57600080fd5b5051600254604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612b7757600080fd5b505afa158015612b8b573d6000803e3d6000fd5b505050506040513d6020811015612ba157600080fd5b50516003546001600160701b0380821691600160701b900416612e1a565b6001600a55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017815292518151600094859489169392918291908083835b60208310612c8b5780518252601f199092019160209182019101612c6c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612ced576040519150601f19603f3d011682016040523d82523d6000602084013e612cf2565b606091505b5091509150818015612d20575080511580612d205750808060200190516020811015612d1d57600080fd5b50515b612d71576040805162461bcd60e51b815260206004820152601560248201527f537761703a205452414e534645525f4641494c45440000000000000000000000604482015290519081900360640190fd5b5050505050565b600082612d8757506000610ddc565b82820282848281612d9457fe5b0414612dd15760405162461bcd60e51b81526004018080602001828103825260218152602001806139e26021913960400191505060405180910390fd5b9392505050565b6000612dd183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506137e5565b6001600160701b038411801590612e3857506001600160701b038311155b612e89576040805162461bcd60e51b815260206004820152601260248201527f4d646578537761703a204f564552464c4f570000000000000000000000000000604482015290519081900360640190fd5b60035463ffffffff42811691600160e01b90048116820390811615801590612eb957506001600160701b03841615155b8015612ecd57506001600160701b03831615155b15612f38578063ffffffff16612ef585612ee68661387c565b6001600160e01b03169061388e565b600780546001600160e01b03929092169290920201905563ffffffff8116612f2084612ee68761387c565b600880546001600160e01b0392909216929092020190555b600380546dffffffffffffffffffffffffffff19166001600160701b03888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b038084166000818152600d6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600c60205260409020546130769082612dd8565b6001600160a01b038085166000908152600c602052604080822093909355908416815220546130a590826138b3565b6001600160a01b038084166000818152600c602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000836001600160a01b031663852a12e3836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561314957600080fd5b505af115801561315d573d6000803e3d6000fd5b505050506040513d602081101561317357600080fd5b5051905080613204576131ff8386856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156131ce57600080fd5b505afa1580156131e2573d6000803e3d6000fd5b505050506040513d60208110156131f857600080fd5b5051612bc6565b612d71565b6000846001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561324157600080fd5b505af1158015613255573d6000803e3d6000fd5b505050506040513d602081101561326b57600080fd5b5051838161327557fe5b049050846001600160a01b031663a9059cbb87836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156132cf57600080fd5b505af11580156132e3573d6000803e3d6000fd5b505050506040513d60208110156132f957600080fd5b5050505050505050565b60008054604080517f017e7e58000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163017e7e58916004808301926020929190829003018186803b15801561336157600080fd5b505afa158015613375573d6000803e3d6000fd5b505050506040513d602081101561338b57600080fd5b50516009546001600160a01b0382161580159450919250906134b35780156134ae5760006133c8611f8b6001600160701b03888116908816612d78565b905060006133d5836134c7565b9050808211156134ab5760006133f76133ee8484612dd8565b600b5490612d78565b905060006134878361348160008054906101000a90046001600160a01b03166001600160a01b031663deba86e36040518163ffffffff1660e01b815260040160206040518083038186803b15801561344e57600080fd5b505afa158015613462573d6000803e3d6000fd5b505050506040513d602081101561347857600080fd5b50518790612d78565b906138b3565b9050600081838161349457fe5b04905080156134a7576134a78782613519565b5050505b50505b6134bf565b80156134bf5760006009555b505092915050565b6000600382111561350a575080600160028204015b81811015613504578091506002818285816134f357fe5b0401816134fc57fe5b0490506134dc565b50613514565b8115613514575060015b919050565b600b5461352690826138b3565b600b556001600160a01b0382166000908152600c602052604090205461354c90826138b3565b6001600160a01b0383166000818152600c602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818311156135b45781612dd1565b5090919050565b6001600160a01b0382166000908152600c60205260409020546135de9082612dd8565b6001600160a01b0383166000908152600c6020526040902055600b546136049082612dd8565b600b556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000836001600160a01b031663db006a75836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561369457600080fd5b505af11580156136a8573d6000803e3d6000fd5b505050506040513d60208110156136be57600080fd5b5051905080613719576131ff8386856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156131ce57600080fd5b836001600160a01b031663a9059cbb86846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561377057600080fd5b505af1158015613784573d6000803e3d6000fd5b505050506040513d602081101561379a57600080fd5b50505050505050565b6000612dd183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061390d565b600081848411156138745760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613839578181015183820152602001613821565b50505050905090810190601f1680156138665780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816138ab57fe5b049392505050565b600082820183811015612dd1576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818361395c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613839578181015183820152602001613821565b50600083858161396857fe5b0495945050505050565b6040518060c001604052806000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152509056fe4d646578537761703a20494e53554646494349454e545f4c49515549444954595f4255524e4544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d646578537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220db0671eb1e4f69020341a8bb55393d0d0d1a5f65ba4b91df461f7db4107bf66764736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c8063a2e74af6116100cd578063d52bb6f411610081578063deba86e311610066578063deba86e314610548578063e6a4390514610550578063f46901ed1461057e5761016c565b8063d52bb6f4146104f9578063db4c545e146105405761016c565b8063b5e4aa72116100b2578063b5e4aa7214610404578063c9c6539614610421578063d06ca61f1461044f5761016c565b8063a2e74af6146103b3578063ad615dec146103db5761016c565b8063544caa56116101245780635fe3b567116101095780635fe3b5671461035457806385f8c2591461035c57806396ed28f9146103855761016c565b8063544caa56146102ef578063574f2ba31461034c5761016c565b8063094b741511610155578063094b7415146101d05780631e3dd18b146101d85780631f00ca74146101f55761016c565b8063017e7e5814610171578063054d50d414610195575b600080fd5b6101796105a4565b604080516001600160a01b039092168252519081900360200190f35b6101be600480360360608110156101ab57600080fd5b50803590602081013590604001356105b3565b60408051918252519081900360200190f35b61017961068b565b610179600480360360208110156101ee57600080fd5b503561069a565b61029f6004803603604081101561020b57600080fd5b8135919081019060408101602082013564010000000081111561022d57600080fd5b82018360208201111561023f57600080fd5b8035906020019184602083028401116401000000008311171561026157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106c4945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102db5781810151838201526020016102c3565b505050509050019250505060405180910390f35b61031d6004803603604081101561030557600080fd5b506001600160a01b038135811691602001351661080f565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390f35b6101be610903565b610179610909565b6101be6004803603606081101561037257600080fd5b5080359060208101359060400135610918565b6101796004803603604081101561039b57600080fd5b506001600160a01b03813581169160200135166109f0565b6103d9600480360360208110156103c957600080fd5b50356001600160a01b0316610aa9565b005b6101be600480360360608110156103f157600080fd5b5080359060208101359060400135610b7c565b6103d96004803603602081101561041a57600080fd5b5035610c38565b6101796004803603604081101561043757600080fd5b506001600160a01b0381358116916020013516610ce7565b61029f6004803603604081101561046557600080fd5b8135919081019060408101602082013564010000000081111561048757600080fd5b82018360208201111561049957600080fd5b803590602001918460208302840111640100000000831117156104bb57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611160945050505050565b6105276004803603604081101561050f57600080fd5b506001600160a01b0381358116916020013516611296565b6040805192835260208301919091528051918290030190f35b6101be611362565b6101be611368565b6101796004803603604081101561056657600080fd5b506001600160a01b038135811691602001351661136e565b6103d96004803603602081101561059457600080fd5b50356001600160a01b0316611394565b6000546001600160a01b031681565b60008084116105f35760405162461bcd60e51b815260040180806020018281038252602681526020018061537c6026913960400191505060405180910390fd5b6000831180156106035750600082115b61063e5760405162461bcd60e51b815260040180806020018281038252602381526020018061543b6023913960400191505060405180910390fd5b600061064c856103e5611422565b9050600061065a8285611422565b905060006106748361066e886103e8611422565b90611484565b905080828161067f57fe5b04979650505050505050565b6001546001600160a01b031681565b600681815481106106aa57600080fd5b6000918252602090912001546001600160a01b0316905081565b606060028251101561071d576040805162461bcd60e51b815260206004820152601960248201527f53776170466163746f72793a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561073557600080fd5b5060405190808252806020026020018201604052801561075f578160200160208202803683370190505b509050828160018351038151811061077357fe5b60209081029190910101528151600019015b8015610808576000806107c18560018503815181106107a057fe5b60200260200101518685815181106107b457fe5b6020026020010151611296565b915091506107e38484815181106107d457fe5b60200260200101518383610918565b8460018503815181106107f257fe5b6020908102919091010152505060001901610785565b5092915050565b600080826001600160a01b0316846001600160a01b03161415610879576040805162461bcd60e51b815260206004820181905260248201527f53776170466163746f72793a204944454e544943414c5f414444524553534553604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b03161061089957828461089c565b83835b90925090506001600160a01b0382166108fc576040805162461bcd60e51b815260206004820152601960248201527f53776170466163746f72793a205a45524f5f4144445245535300000000000000604482015290519081900360640190fd5b9250929050565b60065490565b6004546001600160a01b031681565b60008084116109585760405162461bcd60e51b81526004018080602001828103825260278152602001806153a26027913960400191505060405180910390fd5b6000831180156109685750600082115b6109a35760405162461bcd60e51b815260040180806020018281038252602381526020018061543b6023913960400191505060405180910390fd5b60006109bb6103e86109b58688611422565b90611422565b905060006109cf6103e56109b586896114de565b90506109e660018284816109df57fe5b0490611484565b9695505050505050565b60006109fc8383611520565b5050600080610a0b858561080f565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b166034820152815160288183030181526048820183528051908401206003547fff0000000000000000000000000000000000000000000000000000000000000060688401523090951b6069830152607d820152609d808201949094528151808203909401845260bd019052815191012095945050505050565b6001546001600160a01b03163314610b08576040805162461bcd60e51b815260206004820152601660248201527f53776170466163746f72793a20464f5242494444454e00000000000000000000604482015290519081900360640190fd5b6001600160a01b038116610b4d5760405162461bcd60e51b815260040180806020018281038252602c8152602001806153c9602c913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000808411610bd2576040805162461bcd60e51b815260206004820181905260248201527f53776170466163746f72793a20494e53554646494349454e545f414d4f554e54604482015290519081900360640190fd5b600083118015610be25750600082115b610c1d5760405162461bcd60e51b815260040180806020018281038252602381526020018061543b6023913960400191505060405180910390fd5b82610c288584611422565b81610c2f57fe5b04949350505050565b6001546001600160a01b03163314610c97576040805162461bcd60e51b815260206004820152601660248201527f53776170466163746f72793a20464f5242494444454e00000000000000000000604482015290519081900360640190fd5b60008111610cd65760405162461bcd60e51b81526004018080602001828103825260258152602001806154166025913960400191505060405180910390fd5b610ce18160016114de565b60025550565b6000816001600160a01b0316836001600160a01b03161415610d50576040805162461bcd60e51b815260206004820181905260248201527f53776170466163746f72793a204944454e544943414c5f414444524553534553604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b031610610d73578385610d76565b84845b90925090506001600160a01b038216610dd6576040805162461bcd60e51b815260206004820152601960248201527f53776170466163746f72793a205a45524f5f4144445245535300000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260056020908152604080832085851684529091529020541615610e50576040805162461bcd60e51b815260206004820152601860248201527f53776170466163746f72793a20504149525f4558495354530000000000000000604482015290519081900360640190fd5b600080610e5d8484611520565b91509150600060405180602001610e7390611809565b6020820181038252601f19601f8201166040525090506000858560405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59650866001600160a01b031663485cc95587876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015610f4057600080fd5b505af1158015610f54573d6000803e3d6000fd5b50505050866001600160a01b031663d8cbd6ae85856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015610fb857600080fd5b505af1158015610fcc573d6000803e3d6000fd5b505050508660056000886001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508660056000876001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506006879080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b03160217905550846001600160a01b0316866001600160a01b03167f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e98960068054905060405180836001600160a01b031681526020018281526020019250505060405180910390a350505050505092915050565b60606002825110156111b9576040805162461bcd60e51b815260206004820152601960248201527f53776170466163746f72793a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b815167ffffffffffffffff811180156111d157600080fd5b506040519080825280602002602001820160405280156111fb578160200160208202803683370190505b509050828160008151811061120c57fe5b60200260200101818152505060005b60018351038110156108085760008061125085848151811061123957fe5b60200260200101518685600101815181106107b457fe5b9150915061127284848151811061126357fe5b602002602001015183836105b3565b84846001018151811061128157fe5b6020908102919091010152505060010161121b565b60008060006112a5858561080f565b5090506000806112b587876109f0565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156112ed57600080fd5b505afa158015611301573d6000803e3d6000fd5b505050506040513d606081101561131757600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b0387811690841614611351578082611354565b81815b909890975095505050505050565b60035481565b60025481565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b031633146113f3576040805162461bcd60e51b815260206004820152601660248201527f53776170466163746f72793a20464f5242494444454e00000000000000000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000826114315750600061147e565b8282028284828161143e57fe5b041461147b5760405162461bcd60e51b81526004018080602001828103825260218152602001806153f56021913960400191505060405180910390fd5b90505b92915050565b60008282018381101561147b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061147b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611772565b60048054604080517f26c7bd930000000000000000000000000000000000000000000000000000000081526001600160a01b03868116948201949094529051600093849316916326c7bd93916024808301926020929190829003018186803b15801561158b57600080fd5b505afa15801561159f573d6000803e3d6000fd5b505050506040513d60208110156115b557600080fd5b505191506001600160a01b03808316908516141561161a576040805162461bcd60e51b815260206004820152601360248201527f53776170466163746f72793a2063546f6b656e00000000000000000000000000604482015290519081900360640190fd5b600460009054906101000a90046001600160a01b03166001600160a01b03166326c7bd93846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561167c57600080fd5b505afa158015611690573d6000803e3d6000fd5b505050506040513d60208110156116a657600080fd5b505190506001600160a01b03808216908416141561170b576040805162461bcd60e51b815260206004820152601360248201527f53776170466163746f72793a2063546f6b656e00000000000000000000000000604482015290519081900360640190fd5b806001600160a01b0316826001600160a01b031614156108fc576040805162461bcd60e51b815260206004820152601760248201527f53776170466163746f72793a204475702063546f6b656e000000000000000000604482015290519081900360640190fd5b600081848411156118015760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156117c65781810151838201526020016117ae565b50505050905090810190601f1680156117f35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b613b65806118178339019056fe60806040526001600a5534801561001557600080fd5b5060408051808201825260088152672628102a37b5b2b760c11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc285f7cfebd35a59cb5c0c032add67fdc80dcde2f8127cb94e4b49a72469ed02818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600e55600080546001600160a01b03191633179055613a5f806101066000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c806370a0823111610145578063ba9a7a56116100bd578063d505accf1161008c578063d939fa8a11610071578063d939fa8a14610765578063dd62ed3e1461076d578063fff6cae91461079b57610241565b8063d505accf146106e6578063d8cbd6ae1461073757610241565b8063ba9a7a56146106a8578063bc25cf77146106b0578063c45a0155146106d6578063d21220a7146106de57610241565b806389afcb441161011457806395d89b41116100f957806395d89b4114610648578063a9059cbb14610650578063ad9b80241461067c57610241565b806389afcb4414610601578063948023ab1461064057610241565b806370a08231146105a55780637464fc3d146105cb5780637ecebe00146105d35780637ee60012146105f957610241565b806330adf81f116101d8578063569023a8116101a75780635a3d54931161018c5780635a3d5493146104eb5780636705a9c1146104f35780636a6278421461057f57610241565b8063569023a8146104bd5780635909c0d5146104e357610241565b806330adf81f14610461578063313ce567146104695780633644e51514610487578063485cc9551461048f57610241565b8063095ea7b311610214578063095ea7b3146103ad5780630dfe1681146103ed57806318160ddd1461041157806323b872dd1461042b57610241565b8063022c0d9f146102465780630559a35c146102d457806306fdde03146102f85780630902f1ac14610375575b600080fd5b6102d26004803603608081101561025c57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561029357600080fd5b8201836020820111156102a557600080fd5b803590602001918460018302840111640100000000831117156102c757600080fd5b5090925090506107a3565b005b6102dc610d52565b604080516001600160701b039092168252519081900360200190f35b610300610d68565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561033a578181015183820152602001610322565b50505050905090810190601f1680156103675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61037d610da1565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103d9600480360360408110156103c357600080fd5b506001600160a01b038135169060200135610dcb565b604080519115158252519081900360200190f35b6103f5610de2565b604080516001600160a01b039092168252519081900360200190f35b610419610df1565b60408051918252519081900360200190f35b6103d96004803603606081101561044157600080fd5b506001600160a01b03813581169160208101359091169060400135610df7565b610419610e8b565b610471610eaf565b6040805160ff9092168252519081900360200190f35b610419610eb4565b6102d2600480360360408110156104a557600080fd5b506001600160a01b0381358116916020013516610eba565b610419600480360360208110156104d357600080fd5b50356001600160a01b0316610f54565b610419610faa565b610419610fb0565b6102d26004803603608081101561050957600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561054057600080fd5b82018360208201111561055257600080fd5b8035906020019184600183028401116401000000008311171561057457600080fd5b509092509050610fb6565b6104196004803603602081101561059557600080fd5b50356001600160a01b03166118f8565b610419600480360360208110156105bb57600080fd5b50356001600160a01b03166120b7565b6104196120c9565b610419600480360360208110156105e957600080fd5b50356001600160a01b03166120cf565b6102dc6120e1565b6106276004803603602081101561061757600080fd5b50356001600160a01b03166120f0565b6040805192835260208301919091528051918290030190f35b6103f56124b5565b6103006124c4565b6103d96004803603604081101561066657600080fd5b506001600160a01b0381351690602001356124fd565b6104196004803603604081101561069257600080fd5b506001600160a01b03813516906020013561250a565b6104196125e2565b6102d2600480360360208110156106c657600080fd5b50356001600160a01b03166125e8565b6103f5612759565b6103f5612768565b6102d2600480360360e08110156106fc57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612777565b6102d26004803603604081101561074d57600080fd5b506001600160a01b038135811691602001351661299f565b6103f5612a39565b6104196004803603604081101561078357600080fd5b506001600160a01b0381358116916020013516612a48565b6102d2612a65565b600a546001146107ed576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55841515806108005750600084115b610851576040805162461bcd60e51b815260206004820152601460248201527f537761703a20494e56414c49445f414d4f554e54000000000000000000000000604482015290519081900360640190fd5b60008061085c610da1565b5091509150816001600160701b0316871080156108815750806001600160701b031686105b6108d2576040805162461bcd60e51b815260206004820152601c60248201527f537761703a20494e53554646494349454e545f4c495155494449545900000000604482015290519081900360640190fd5b60015460025460009182916001600160a01b039182169190811690891682148015906109105750806001600160a01b0316896001600160a01b031614155b610954576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b6004546001600160a01b038a811691161480159061098057506005546001600160a01b038a8116911614155b6109c4576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b8a156109d5576109d5828a8d612bc6565b89156109e6576109e6818a8c612bc6565b8615610a9857886001600160a01b031663226dc882338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610ade57600080fd5b505afa158015610af2573d6000803e3d6000fd5b505050506040513d6020811015610b0857600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015610b5457600080fd5b505afa158015610b68573d6000803e3d6000fd5b505050506040513d6020811015610b7e57600080fd5b5051925060009150506001600160701b0385168a90038311610ba1576000610bb0565b89856001600160701b03160383035b9050600089856001600160701b0316038311610bcd576000610bdc565b89856001600160701b03160383035b90506000821180610bed5750600081115b610c3e576040805162461bcd60e51b815260206004820152601f60248201527f537761703a20494e53554646494349454e545f494e5055545f414d4f554e5400604482015290519081900360640190fd5b6000610c60610c4e846003612d78565b610c5a876103e8612d78565b90612dd8565b90506000610c72610c4e846003612d78565b9050610c97620f4240610c916001600160701b038b8116908b16612d78565b90612d78565b610ca18383612d78565b1015610cde576040805162461bcd60e51b8152602060048201526007602482015266537761703a204b60c81b604482015290519081900360640190fd5b5050610cec84848888612e1a565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600a55505050505050505050565b600654600160701b90046001600160701b031681565b6040518060400160405280600881526020017f4c5020546f6b656e00000000000000000000000000000000000000000000000081525081565b6003546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610dd8338484612ff1565b5060015b92915050565b6001546001600160a01b031681565b600b5481565b6001600160a01b0383166000908152600d6020908152604080832033845290915281205460001914610e76576001600160a01b0384166000908152600d60209081526040808320338452909152902054610e519083612dd8565b6001600160a01b0385166000908152600d602090815260408083203384529091529020555b610e81848484613053565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600e5481565b6000546001600160a01b03163314610f19576040805162461bcd60e51b815260206004820152601360248201527f4d646578537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560028054929093169116179055565b6000600a54600114610fa0576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6001600a55919050565b60075481565b60085481565b600a54600114611000576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55841515806110135750600084115b611064576040805162461bcd60e51b815260206004820152601460248201527f537761703a20494e56414c49445f414d4f554e54000000000000000000000000604482015290519081900360640190fd5b60008061106f610da1565b5091509150816001600160701b0316871080156110945750806001600160701b031686105b6110e5576040805162461bcd60e51b815260206004820152601c60248201527f537761703a20494e53554646494349454e545f4c495155494449545900000000604482015290519081900360640190fd5b6110ed613972565b6110f5613972565b6001546001600160a01b039081166020808501918252600254831690840152600454821660408086019190915260055483169084015251888216911614801590611155575080602001516001600160a01b0316876001600160a01b031614155b611199576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b81604001516001600160a01b0316876001600160a01b0316141580156111d5575080604001516001600160a01b0316876001600160a01b031614155b611219576040805162461bcd60e51b815260206004820152601060248201526f537761703a20494e56414c49445f544f60801b604482015290519081900360640190fd5b88156112ae5781604001516001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561125e57600080fd5b505af1158015611272573d6000803e3d6000fd5b505050506040513d602081101561128857600080fd5b5051898161129257fe5b0460a0830152604082015160208301516112ae9189918c613101565b87156113435780604001516001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156112f357600080fd5b505af1158015611307573d6000803e3d6000fd5b505050506040513d602081101561131d57600080fd5b5051888161132757fe5b0460a0820152604081015160208201516113439189918b613101565b84156113f557866001600160a01b031663226dc882338b8b8a8a6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156113dc57600080fd5b505af11580156113f0573d6000803e3d6000fd5b505050505b602080830151604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d602081101561146757600080fd5b50516060830152602081810151604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b1580156114b657600080fd5b505afa1580156114ca573d6000803e3d6000fd5b505050506040513d60208110156114e057600080fd5b50516060808301919091528201511515806114ff575060008160600151115b611550576040805162461bcd60e51b815260206004820152601f60248201527f537761703a20494e53554646494349454e545f494e5055545f414d4f554e5400604482015290519081900360640190fd5b6060820151156115d55781604001516001600160a01b031663a0712d6883606001516040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156115a857600080fd5b505af11580156115bc573d6000803e3d6000fd5b505050506040513d60208110156115d257600080fd5b50505b60608101511561165a5780604001516001600160a01b031663a0712d6882606001516040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561162d57600080fd5b505af1158015611641573d6000803e3d6000fd5b505050506040513d602081101561165757600080fd5b50505b81604001516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116ab57600080fd5b505afa1580156116bf573d6000803e3d6000fd5b505050506040513d60208110156116d557600080fd5b5051825260408082015181516370a0823160e01b815230600482015291516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561172457600080fd5b505afa158015611738573d6000803e3d6000fd5b505050506040513d602081101561174e57600080fd5b5051815260a082015182516001600160701b038616919091031061177357600061178a565b8160a00151846001600160701b0316038260000151035b608083015260a081015181516001600160701b03851691909103106117b05760006117c7565b8060a00151836001600160701b0316038160000151035b6080808301919091528201516000906117f3906117e5906003612d78565b8451610c5a906103e8612d78565b905060006118126117e560038560800151612d7890919063ffffffff16565b9050611831620f4240610c916001600160701b03898116908916612d78565b61183b8383612d78565b1015611878576040805162461bcd60e51b8152602060048201526007602482015266537761703a204b60c81b604482015290519081900360640190fd5b50508151815161188a91908686612e1a565b606080830151828201516040805192835260208301919091528181018c90529181018a905290516001600160a01b0389169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600a5550505050505050565b6000600a54600114611944576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a81905580611954610da1565b50600154604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156119a857600080fd5b505afa1580156119bc573d6000803e3d6000fd5b505050506040513d60208110156119d257600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611a2557600080fd5b505afa158015611a39573d6000803e3d6000fd5b505050506040513d6020811015611a4f57600080fd5b505160048054604080516370a0823160e01b81523093810193909352519293506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015611aa357600080fd5b505afa158015611ab7573d6000803e3d6000fd5b505050506040513d6020811015611acd57600080fd5b5051600554604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611b2057600080fd5b505afa158015611b34573d6000803e3d6000fd5b505050506040513d6020811015611b4a57600080fd5b5051600480546040805163095ea7b360e01b81526001600160a01b039092169282018390526024820188905251929350909163095ea7b3916044808201926020929091908290030181600087803b158015611ba457600080fd5b505af1158015611bb8573d6000803e3d6000fd5b505050506040513d6020811015611bce57600080fd5b5050600480546040805163140e25ad60e31b8152928301879052516001600160a01b039091169163a0712d689160248083019260209291908290030181600087803b158015611c1c57600080fd5b505af1158015611c30573d6000803e3d6000fd5b505050506040513d6020811015611c4657600080fd5b5050600480546040805163095ea7b360e01b81526001600160a01b03909216928201839052600060248301819052905163095ea7b3926044808201936020939283900390910190829087803b158015611c9e57600080fd5b505af1158015611cb2573d6000803e3d6000fd5b505050506040513d6020811015611cc857600080fd5b50506005546040805163095ea7b360e01b81526001600160a01b0390921660048301819052602483018690529051909163095ea7b39160448083019260209291908290030181600087803b158015611d1f57600080fd5b505af1158015611d33573d6000803e3d6000fd5b505050506040513d6020811015611d4957600080fd5b50506005546040805163140e25ad60e31b81526004810186905290516001600160a01b039092169163a0712d68916024808201926020929091908290030181600087803b158015611d9957600080fd5b505af1158015611dad573d6000803e3d6000fd5b505050506040513d6020811015611dc357600080fd5b50506005546040805163095ea7b360e01b81526001600160a01b03909216600483018190526000602484018190529151909263095ea7b39260448083019360209390929083900390910190829087803b158015611e1f57600080fd5b505af1158015611e33573d6000803e3d6000fd5b505050506040513d6020811015611e4957600080fd5b505060048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015611e9a57600080fd5b505afa158015611eae573d6000803e3d6000fd5b505050506040513d6020811015611ec457600080fd5b5051600554604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611f1757600080fd5b505afa158015611f2b573d6000803e3d6000fd5b505050506040513d6020811015611f4157600080fd5b505190506000611f518584612dd8565b90506000611f5f8584612dd8565b90506000611f6d8b8b613303565b600b5490915080611fa457611f906103e8610c5a611f8b8787612d78565b6134c7565b9c50611f9f60006103e8613519565b611fe7565b611fe46001600160701b038d16611fbb8684612d78565b81611fc257fe5b046001600160701b038d16611fd78685612d78565b81611fde57fe5b046135a4565b9c505b60008d116120265760405162461bcd60e51b8152600401808060200182810382526027815260200180613a036027913960400191505060405180910390fd5b6120308e8e613519565b61203c86868e8e612e1a565b811561206657600354612062906001600160701b0380821691600160701b900416612d78565b6009555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600a5550989a9950505050505050505050565b600c6020526000908152604090205481565b60095481565b600f6020526000908152604090205481565b6006546001600160701b031681565b600080600a5460011461213d576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a8190558061214d610da1565b5060048054600554604080516370a0823160e01b81523094810194909452519496509294506001600160a01b039081169392169160009184916370a0823191602480820192602092909190829003018186803b1580156121ac57600080fd5b505afa1580156121c0573d6000803e3d6000fd5b505050506040513d60208110156121d657600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561222457600080fd5b505afa158015612238573d6000803e3d6000fd5b505050506040513d602081101561224e57600080fd5b5051306000908152600c602052604081205491925061226d8888613303565b600b549091506000816122808588612d78565b8161228757fe5b0490506000826122978688612d78565b8161229e57fe5b0490506000821180156122b15750600081115b6122ec5760405162461bcd60e51b81526004018080602001828103825260278152602001806139bb6027913960400191505060405180910390fd5b6122f630866135bb565b600154612310908f908b906001600160a01b03168561364c565b60025461232a908f908a906001600160a01b03168461364c565b604080516370a0823160e01b815230600482015290516001600160a01b038b16916370a08231916024808301926020929190829003018186803b15801561237057600080fd5b505afa158015612384573d6000803e3d6000fd5b505050506040513d602081101561239a57600080fd5b5051604080516370a0823160e01b815230600482015290519198506001600160a01b038a16916370a0823191602480820192602092909190829003018186803b1580156123e657600080fd5b505afa1580156123fa573d6000803e3d6000fd5b505050506040513d602081101561241057600080fd5b5051955061242087878d8d612e1a565b831561244a57600354612446906001600160701b0380821691600160701b900416612d78565b6009555b8d6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968f8f604051808381526020018281526020019250505060405180910390a350505050505050505050506001600a81905550915091565b6004546001600160a01b031681565b6040518060400160405280600481526020017f484d44580000000000000000000000000000000000000000000000000000000081525081565b6000610dd8338484613053565b6001546000906001600160a01b0384811691161480159061253957506002546001600160a01b03848116911614155b8061254d57506003546001600160701b0316155b806125685750600354600160701b90046001600160701b0316155b1561257557506000610ddc565b6001546001600160a01b03848116911614156125be576003546125b7906001600160701b03808216916125b191600160701b9091041685612d78565b906137a3565b9050610ddc565b6003546125b7906001600160701b03600160701b82048116916125b1911685612d78565b6103e881565b600a54600114612632576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55600154600254600354604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926126db92859287926126d6926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156126a457600080fd5b505afa1580156126b8573d6000803e3d6000fd5b505050506040513d60208110156126ce57600080fd5b505190612dd8565b612bc6565b61274f81846126d66003600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156126a457600080fd5b50506001600a5550565b6000546001600160a01b031681565b6002546001600160a01b031681565b428410156127cc576040805162461bcd60e51b815260206004820152600d60248201527f537761703a204558504952454400000000000000000000000000000000000000604482015290519081900360640190fd5b600e546001600160a01b038089166000818152600f602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015612902573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906129385750886001600160a01b0316816001600160a01b0316145b612989576040805162461bcd60e51b815260206004820152601760248201527f537761703a20494e56414c49445f5349474e4154555245000000000000000000604482015290519081900360640190fd5b612994898989612ff1565b505050505050505050565b6000546001600160a01b031633146129fe576040805162461bcd60e51b815260206004820152601360248201527f4d646578537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600480546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560058054929093169116179055565b6005546001600160a01b031681565b600d60209081526000928352604080842090915290825290205481565b600a54600114612aaf576040805162461bcd60e51b815260206004820152601060248201526f1359195e14ddd85c0e881313d0d2d15160821b604482015290519081900360640190fd5b6000600a55600154604080516370a0823160e01b81523060048201529051612bbf926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612b0057600080fd5b505afa158015612b14573d6000803e3d6000fd5b505050506040513d6020811015612b2a57600080fd5b5051600254604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612b7757600080fd5b505afa158015612b8b573d6000803e3d6000fd5b505050506040513d6020811015612ba157600080fd5b50516003546001600160701b0380821691600160701b900416612e1a565b6001600a55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017815292518151600094859489169392918291908083835b60208310612c8b5780518252601f199092019160209182019101612c6c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612ced576040519150601f19603f3d011682016040523d82523d6000602084013e612cf2565b606091505b5091509150818015612d20575080511580612d205750808060200190516020811015612d1d57600080fd5b50515b612d71576040805162461bcd60e51b815260206004820152601560248201527f537761703a205452414e534645525f4641494c45440000000000000000000000604482015290519081900360640190fd5b5050505050565b600082612d8757506000610ddc565b82820282848281612d9457fe5b0414612dd15760405162461bcd60e51b81526004018080602001828103825260218152602001806139e26021913960400191505060405180910390fd5b9392505050565b6000612dd183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506137e5565b6001600160701b038411801590612e3857506001600160701b038311155b612e89576040805162461bcd60e51b815260206004820152601260248201527f4d646578537761703a204f564552464c4f570000000000000000000000000000604482015290519081900360640190fd5b60035463ffffffff42811691600160e01b90048116820390811615801590612eb957506001600160701b03841615155b8015612ecd57506001600160701b03831615155b15612f38578063ffffffff16612ef585612ee68661387c565b6001600160e01b03169061388e565b600780546001600160e01b03929092169290920201905563ffffffff8116612f2084612ee68761387c565b600880546001600160e01b0392909216929092020190555b600380546dffffffffffffffffffffffffffff19166001600160701b03888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b038084166000818152600d6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600c60205260409020546130769082612dd8565b6001600160a01b038085166000908152600c602052604080822093909355908416815220546130a590826138b3565b6001600160a01b038084166000818152600c602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000836001600160a01b031663852a12e3836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561314957600080fd5b505af115801561315d573d6000803e3d6000fd5b505050506040513d602081101561317357600080fd5b5051905080613204576131ff8386856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156131ce57600080fd5b505afa1580156131e2573d6000803e3d6000fd5b505050506040513d60208110156131f857600080fd5b5051612bc6565b612d71565b6000846001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561324157600080fd5b505af1158015613255573d6000803e3d6000fd5b505050506040513d602081101561326b57600080fd5b5051838161327557fe5b049050846001600160a01b031663a9059cbb87836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156132cf57600080fd5b505af11580156132e3573d6000803e3d6000fd5b505050506040513d60208110156132f957600080fd5b5050505050505050565b60008054604080517f017e7e58000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163017e7e58916004808301926020929190829003018186803b15801561336157600080fd5b505afa158015613375573d6000803e3d6000fd5b505050506040513d602081101561338b57600080fd5b50516009546001600160a01b0382161580159450919250906134b35780156134ae5760006133c8611f8b6001600160701b03888116908816612d78565b905060006133d5836134c7565b9050808211156134ab5760006133f76133ee8484612dd8565b600b5490612d78565b905060006134878361348160008054906101000a90046001600160a01b03166001600160a01b031663deba86e36040518163ffffffff1660e01b815260040160206040518083038186803b15801561344e57600080fd5b505afa158015613462573d6000803e3d6000fd5b505050506040513d602081101561347857600080fd5b50518790612d78565b906138b3565b9050600081838161349457fe5b04905080156134a7576134a78782613519565b5050505b50505b6134bf565b80156134bf5760006009555b505092915050565b6000600382111561350a575080600160028204015b81811015613504578091506002818285816134f357fe5b0401816134fc57fe5b0490506134dc565b50613514565b8115613514575060015b919050565b600b5461352690826138b3565b600b556001600160a01b0382166000908152600c602052604090205461354c90826138b3565b6001600160a01b0383166000818152600c602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818311156135b45781612dd1565b5090919050565b6001600160a01b0382166000908152600c60205260409020546135de9082612dd8565b6001600160a01b0383166000908152600c6020526040902055600b546136049082612dd8565b600b556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000836001600160a01b031663db006a75836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561369457600080fd5b505af11580156136a8573d6000803e3d6000fd5b505050506040513d60208110156136be57600080fd5b5051905080613719576131ff8386856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156131ce57600080fd5b836001600160a01b031663a9059cbb86846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561377057600080fd5b505af1158015613784573d6000803e3d6000fd5b505050506040513d602081101561379a57600080fd5b50505050505050565b6000612dd183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061390d565b600081848411156138745760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613839578181015183820152602001613821565b50505050905090810190601f1680156138665780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816138ab57fe5b049392505050565b600082820183811015612dd1576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818361395c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613839578181015183820152602001613821565b50600083858161396857fe5b0495945050505050565b6040518060c001604052806000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152509056fe4d646578537761703a20494e53554646494349454e545f4c49515549444954595f4255524e4544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d646578537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220db0671eb1e4f69020341a8bb55393d0d0d1a5f65ba4b91df461f7db4107bf66764736f6c6343000706003353776170466163746f72793a20494e53554646494349454e545f494e5055545f414d4f554e5453776170466163746f72793a20494e53554646494349454e545f4f55545055545f414d4f554e544d64657853776170466163746f72793a20466565546f536574746572206973207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d64657853776170466163746f72793a204645455f544f5f524154455f4f564552464c4f5753776170466163746f72793a20494e53554646494349454e545f4c4951554944495459a2646970667358221220b196dfbb3af2352c0265198cac33f75be899d5fad79fd9c91ff272c329fc89c664736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25336,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25339,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 25342,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "feeToRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25344,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "initCodeHash",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 25346,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "comptroller",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ComptrollerInterface)2775"
      },
      {
        "astId": 25353,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 25357,
        "contract": "contracts/swap/heco/Factory.sol:MdexFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ComptrollerInterface)2775": {
        "encoding": "inplace",
        "label": "contract ComptrollerInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}