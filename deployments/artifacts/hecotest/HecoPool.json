{
  "address": "0xeAdA2da088f2655fCf2A01b9B408AE9F9A5D3C66",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEbe",
          "name": "_ebe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ebePerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LpOfPid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_addLP",
          "type": "address"
        }
      ],
      "name": "addMultLP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ebe",
      "outputs": [
        {
          "internalType": "contract IEbe",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ebePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lastRewardBlock",
          "type": "uint256"
        }
      ],
      "name": "getEbeBlockReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getMultLPAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getMultLPLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "halvingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_lp",
          "type": "address"
        }
      ],
      "name": "isMultLP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "multLpChef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "multLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "phase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolCorrespond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accEbePerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accMultLpPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_multLpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multLpChef",
          "type": "address"
        }
      ],
      "name": "replaceMultLP",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "reward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setEbePerBlock",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "setHalvingPeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_multLpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multLpChef",
          "type": "address"
        }
      ],
      "name": "setMultLP",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sid",
          "type": "uint256"
        }
      ],
      "name": "setPoolCorr",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multLpRewardDebt",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6abbbab9fc4274d4524d9c7717ec3e22eb95d40b7a287a334dae01848c71217",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0xeAdA2da088f2655fCf2A01b9B408AE9F9A5D3C66",
    "transactionIndex": 0,
    "gasUsed": "3063103",
    "logsBloom": "0x
    "blockHash": "0x66f6c6f7ff6b7348bc779729b39e23c389ce6f3baf713db9edde9608d2fbe55b",
    "transactionHash": "0xe6abbbab9fc4274d4524d9c7717ec3e22eb95d40b7a287a334dae01848c71217",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7204536,
        "transactionHash": "0xe6abbbab9fc4274d4524d9c7717ec3e22eb95d40b7a287a334dae01848c71217",
        "address": "0xeAdA2da088f2655fCf2A01b9B408AE9F9A5D3C66",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049d531908840fddac744543d57cb21b91c3d9094"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x66f6c6f7ff6b7348bc779729b39e23c389ce6f3baf713db9edde9608d2fbe55b"
      }
    ],
    "blockNumber": 7204536,
    "cumulativeGasUsed": "3063103",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfb1A388c9762f954Ff7D50f2B2327c2089305462",
    "10000000000000000000",
    0
  ],
  "solcInputHash": "3830b5e682f7bdd3efed1ea23eba8446",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEbe\",\"name\":\"_ebe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ebePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LpOfPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addLP\",\"type\":\"address\"}],\"name\":\"addMultLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ebe\",\"outputs\":[{\"internalType\":\"contract IEbe\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ebePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"getEbeBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getMultLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMultLPLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halvingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"isMultLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multLpChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolCorrespond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEbePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMultLpPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multLpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multLpChef\",\"type\":\"address\"}],\"name\":\"replaceMultLP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPerBlock\",\"type\":\"uint256\"}],\"name\":\"setEbePerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setHalvingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multLpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multLpChef\",\"type\":\"address\"}],\"name\":\"setMultLP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sid\",\"type\":\"uint256\"}],\"name\":\"setPoolCorr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multLpRewardDebt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/swap/heco/HecoPool.sol\":\"HecoPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * As of v2.5.0, only `address` sets are supported.\\n *\\n * Include with `using EnumerableSet for EnumerableSet.AddressSet;`.\\n *\\n * _Available since v2.5.0._\\n *\\n * @author Alberto Cuesta Ca\\u00f1ada\\n */\\nlibrary EnumerableSet {\\n\\n    struct AddressSet {\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (address => uint256) index;\\n        address[] values;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        if (!contains(set, value)){\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        if (contains(set, value)){\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\\n            if (lastIndex != toDeleteIndex) {\\n                address lastValue = set.values[lastIndex];\\n\\n                // Move the last value to the index where the deleted value is\\n                set.values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the index entry for the deleted value\\n            delete set.index[value];\\n\\n            // Delete the old entry for the moved value\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array with all values in the set. O(N).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(AddressSet storage set)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory output = new address[](set.values.length);\\n        for (uint256 i; i < set.values.length; i++){\\n            output[i] = set.values[i];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements on the set. O(1).\\n     */\\n    function length(AddressSet storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return set.values.length;\\n    }\\n\\n   /** @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function get(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return set.values[index];\\n    }\\n}\\n\",\"keccak256\":\"0xcce1d35afae7905e2fd76ff67c3fe866091e223c50133527c302a31ffce9a5d7\"},\"contracts/swap/heco/HecoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../interface/IEbe.sol\\\";\\r\\n\\r\\ninterface IMasterChefHeco {\\r\\n    function pending(uint256 pid, address user) external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256 pid, uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 pid, uint256 amount) external;\\r\\n\\r\\n    function emergencyWithdraw(uint256 pid) external;\\r\\n}\\r\\n\\r\\ncontract HecoPool is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    EnumerableSet.AddressSet private _multLP;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;     // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt.\\r\\n        uint256 multLpRewardDebt; //multLp Reward debt.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken;           // Address of LP token contract.\\r\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. EBEs to distribute per block.\\r\\n        uint256 lastRewardBlock;  // Last block number that EBEs distribution occurs.\\r\\n        uint256 accEbePerShare; // Accumulated EBEs per share, times 1e12.\\r\\n        uint256 accMultLpPerShare; //Accumulated multLp per share\\r\\n        uint256 totalAmount;    // Total amount of current pool deposit.\\r\\n    }\\r\\n\\r\\n    // The EBE Token!\\r\\n    IEbe public ebe;\\r\\n    // EBE tokens created per block.\\r\\n    uint256 public ebePerBlock;\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n    // Corresponding to the pid of the multLP pool\\r\\n    mapping(uint256 => uint256) public poolCorrespond;\\r\\n    // pid corresponding address\\r\\n    mapping(address => uint256) public LpOfPid;\\r\\n    // Control mining\\r\\n    bool public paused = false;\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n    // The block number when EBE mining starts.\\r\\n    uint256 public startBlock;\\r\\n    // multLP MasterChef\\r\\n    address public multLpChef;\\r\\n    // multLP Token\\r\\n    address public multLpToken;\\r\\n    // How many blocks are halved\\r\\n    uint256 public halvingPeriod = 5256000;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        IEbe _ebe,\\r\\n        uint256 _ebePerBlock,\\r\\n        uint256 _startBlock\\r\\n    ) public {\\r\\n        ebe = _ebe;\\r\\n        ebePerBlock = _ebePerBlock;\\r\\n        startBlock = _startBlock;\\r\\n    }\\r\\n\\r\\n    function setHalvingPeriod(uint256 _block) public onlyOwner {\\r\\n        halvingPeriod = _block;\\r\\n    }\\r\\n\\r\\n    // Set the number of ebe produced by each block\\r\\n    function setEbePerBlock(uint256 _newPerBlock) public onlyOwner {\\r\\n        massUpdatePools();\\r\\n        ebePerBlock = _newPerBlock;\\r\\n    }\\r\\n\\r\\n    function poolLength() public view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    function addMultLP(address _addLP) public onlyOwner returns (bool) {\\r\\n        require(_addLP != address(0), \\\"LP is the zero address\\\");\\r\\n        IERC20(_addLP).approve(multLpChef, uint256(- 1));\\r\\n        return EnumerableSet.add(_multLP, _addLP);\\r\\n    }\\r\\n\\r\\n    function isMultLP(address _lp) public view returns (bool) {\\r\\n        return EnumerableSet.contains(_multLP, _lp);\\r\\n    }\\r\\n\\r\\n    function getMultLPLength() public view returns (uint256) {\\r\\n        return EnumerableSet.length(_multLP);\\r\\n    }\\r\\n\\r\\n    function getMultLPAddress(uint256 _pid) public view returns (address){\\r\\n        require(_pid <= getMultLPLength() - 1, \\\"not find this multLP\\\");\\r\\n        return EnumerableSet.get(_multLP, _pid);\\r\\n    }\\r\\n\\r\\n    function setPause() public onlyOwner {\\r\\n        paused = !paused;\\r\\n    }\\r\\n\\r\\n    function setMultLP(address _multLpToken, address _multLpChef) public onlyOwner {\\r\\n        require(_multLpToken != address(0) && _multLpChef != address(0), \\\"is the zero address\\\");\\r\\n        multLpToken = _multLpToken;\\r\\n        multLpChef = _multLpChef;\\r\\n    }\\r\\n\\r\\n    function replaceMultLP(address _multLpToken, address _multLpChef) public onlyOwner {\\r\\n        require(_multLpToken != address(0) && _multLpChef != address(0), \\\"is the zero address\\\");\\r\\n        require(paused == true, \\\"No mining suspension\\\");\\r\\n        multLpToken = _multLpToken;\\r\\n        multLpChef = _multLpChef;\\r\\n        uint256 length = getMultLPLength();\\r\\n        while (length > 0) {\\r\\n            address dAddress = EnumerableSet.get(_multLP, 0);\\r\\n            uint256 pid = LpOfPid[dAddress];\\r\\n            IMasterChefHeco(multLpChef).emergencyWithdraw(poolCorrespond[pid]);\\r\\n            EnumerableSet.remove(_multLP, dAddress);\\r\\n            length--;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\r\\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\\r\\n        require(address(_lpToken) != address(0), \\\"_lpToken is the zero address\\\");\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n        poolInfo.push(PoolInfo({\\r\\n        lpToken : _lpToken,\\r\\n        allocPoint : _allocPoint,\\r\\n        lastRewardBlock : lastRewardBlock,\\r\\n        accEbePerShare : 0,\\r\\n        accMultLpPerShare : 0,\\r\\n        totalAmount : 0\\r\\n        }));\\r\\n        LpOfPid[address(_lpToken)] = poolLength() - 1;\\r\\n    }\\r\\n\\r\\n    // Update the given pool's EBE allocation point. Can only be called by the owner.\\r\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\r\\n    // The current pool corresponds to the pid of the multLP pool\\r\\n    function setPoolCorr(uint256 _pid, uint256 _sid) public onlyOwner {\\r\\n        require(_pid <= poolLength() - 1, \\\"not find this pool\\\");\\r\\n        poolCorrespond[_pid] = _sid;\\r\\n    }\\r\\n\\r\\n    function phase(uint256 blockNumber) public view returns (uint256) {\\r\\n        if (halvingPeriod == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (blockNumber > startBlock) {\\r\\n            return (blockNumber.sub(startBlock).sub(1)).div(halvingPeriod);\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function reward(uint256 blockNumber) public view returns (uint256) {\\r\\n        uint256 _phase = phase(blockNumber);\\r\\n        return ebePerBlock.div(2 ** _phase);\\r\\n    }\\r\\n\\r\\n    function getEbeBlockReward(uint256 _lastRewardBlock) public view returns (uint256) {\\r\\n        uint256 blockReward = 0;\\r\\n        uint256 n = phase(_lastRewardBlock);\\r\\n        uint256 m = phase(block.number);\\r\\n        while (n < m) {\\r\\n            n++;\\r\\n            uint256 r = n.mul(halvingPeriod).add(startBlock);\\r\\n            blockReward = blockReward.add((r.sub(_lastRewardBlock)).mul(reward(r)));\\r\\n            _lastRewardBlock = r;\\r\\n        }\\r\\n        blockReward = blockReward.add((block.number.sub(_lastRewardBlock)).mul(reward(block.number)));\\r\\n        return blockReward;\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply;\\r\\n        if (isMultLP(address(pool.lpToken))) {\\r\\n            if (pool.totalAmount == 0) {\\r\\n                pool.lastRewardBlock = block.number;\\r\\n                return;\\r\\n            }\\r\\n            lpSupply = pool.totalAmount;\\r\\n        } else {\\r\\n            lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n            if (lpSupply == 0) {\\r\\n                pool.lastRewardBlock = block.number;\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        uint256 blockReward = getEbeBlockReward(pool.lastRewardBlock);\\r\\n        if (blockReward <= 0) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 ebeReward = blockReward.mul(pool.allocPoint).div(totalAllocPoint);\\r\\n        bool minRet = ebe.mint(address(this), ebeReward);\\r\\n        if (minRet) {\\r\\n            pool.accEbePerShare = pool.accEbePerShare.add(ebeReward.mul(1e12).div(lpSupply));\\r\\n        }\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    // View function to see pending EBEs on frontend.\\r\\n    function pending(uint256 _pid, address _user) external view returns (uint256, uint256){\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (isMultLP(address(pool.lpToken))) {\\r\\n            (uint256 ebeAmount, uint256 tokenAmount) = _pendingEbeAndToken(_pid, _user);\\r\\n            return (ebeAmount, tokenAmount);\\r\\n        } else {\\r\\n            uint256 ebeAmount = _pendingEbe(_pid, _user);\\r\\n            return (ebeAmount, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _pendingEbeAndToken(uint256 _pid, address _user) private view returns (uint256, uint256){\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accEbePerShare = pool.accEbePerShare;\\r\\n        uint256 accMultLpPerShare = pool.accMultLpPerShare;\\r\\n        if (user.amount > 0) {\\r\\n            uint256 TokenPending = IMasterChefHeco(multLpChef).pending(poolCorrespond[_pid], address(this));\\r\\n            accMultLpPerShare = accMultLpPerShare.add(TokenPending.mul(1e12).div(pool.totalAmount));\\r\\n            uint256 userPending = user.amount.mul(accMultLpPerShare).div(1e12).sub(user.multLpRewardDebt);\\r\\n            if (block.number > pool.lastRewardBlock) {\\r\\n                uint256 blockReward = getEbeBlockReward(pool.lastRewardBlock);\\r\\n                uint256 ebeReward = blockReward.mul(pool.allocPoint).div(totalAllocPoint);\\r\\n                accEbePerShare = accEbePerShare.add(ebeReward.mul(1e12).div(pool.totalAmount));\\r\\n                return (user.amount.mul(accEbePerShare).div(1e12).sub(user.rewardDebt), userPending);\\r\\n            }\\r\\n            if (block.number == pool.lastRewardBlock) {\\r\\n                return (user.amount.mul(accEbePerShare).div(1e12).sub(user.rewardDebt), userPending);\\r\\n            }\\r\\n        }\\r\\n        return (0, 0);\\r\\n    }\\r\\n\\r\\n    function _pendingEbe(uint256 _pid, address _user) private view returns (uint256){\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accEbePerShare = pool.accEbePerShare;\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (user.amount > 0) {\\r\\n            if (block.number > pool.lastRewardBlock) {\\r\\n                uint256 blockReward = getEbeBlockReward(pool.lastRewardBlock);\\r\\n                uint256 ebeReward = blockReward.mul(pool.allocPoint).div(totalAllocPoint);\\r\\n                accEbePerShare = accEbePerShare.add(ebeReward.mul(1e12).div(lpSupply));\\r\\n                return user.amount.mul(accEbePerShare).div(1e12).sub(user.rewardDebt);\\r\\n            }\\r\\n            if (block.number == pool.lastRewardBlock) {\\r\\n                return user.amount.mul(accEbePerShare).div(1e12).sub(user.rewardDebt);\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to HecoPool for EBE allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount) public notPause {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (isMultLP(address(pool.lpToken))) {\\r\\n            _depositEbeAndToken(_pid, _amount, msg.sender);\\r\\n        } else {\\r\\n            _depositEbe(_pid, _amount, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _depositEbeAndToken(uint256 _pid, uint256 _amount, address _user) private {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        updatePool(_pid);\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pendingAmount = user.amount.mul(pool.accEbePerShare).div(1e12).sub(user.rewardDebt);\\r\\n            if (pendingAmount > 0) {\\r\\n                _safeEbeTransfer(_user, pendingAmount);\\r\\n            }\\r\\n            uint256 beforeToken = IERC20(multLpToken).balanceOf(address(this));\\r\\n            IMasterChefHeco(multLpChef).deposit(poolCorrespond[_pid], 0);\\r\\n            uint256 afterToken = IERC20(multLpToken).balanceOf(address(this));\\r\\n            pool.accMultLpPerShare = pool.accMultLpPerShare.add(afterToken.sub(beforeToken).mul(1e12).div(pool.totalAmount));\\r\\n            uint256 tokenPending = user.amount.mul(pool.accMultLpPerShare).div(1e12).sub(user.multLpRewardDebt);\\r\\n            if (tokenPending > 0) {\\r\\n                IERC20(multLpToken).safeTransfer(_user, tokenPending);\\r\\n            }\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            pool.lpToken.safeTransferFrom(_user, address(this), _amount);\\r\\n            if (pool.totalAmount == 0) {\\r\\n                IMasterChefHeco(multLpChef).deposit(poolCorrespond[_pid], _amount);\\r\\n                user.amount = user.amount.add(_amount);\\r\\n                pool.totalAmount = pool.totalAmount.add(_amount);\\r\\n            } else {\\r\\n                uint256 beforeToken = IERC20(multLpToken).balanceOf(address(this));\\r\\n                IMasterChefHeco(multLpChef).deposit(poolCorrespond[_pid], _amount);\\r\\n                uint256 afterToken = IERC20(multLpToken).balanceOf(address(this));\\r\\n                pool.accMultLpPerShare = pool.accMultLpPerShare.add(afterToken.sub(beforeToken).mul(1e12).div(pool.totalAmount));\\r\\n                user.amount = user.amount.add(_amount);\\r\\n                pool.totalAmount = pool.totalAmount.add(_amount);\\r\\n            }\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accEbePerShare).div(1e12);\\r\\n        user.multLpRewardDebt = user.amount.mul(pool.accMultLpPerShare).div(1e12);\\r\\n        emit Deposit(_user, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    function _depositEbe(uint256 _pid, uint256 _amount, address _user) private {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        updatePool(_pid);\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pendingAmount = user.amount.mul(pool.accEbePerShare).div(1e12).sub(user.rewardDebt);\\r\\n            if (pendingAmount > 0) {\\r\\n                _safeEbeTransfer(_user, pendingAmount);\\r\\n            }\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            pool.lpToken.safeTransferFrom(_user, address(this), _amount);\\r\\n            user.amount = user.amount.add(_amount);\\r\\n            pool.totalAmount = pool.totalAmount.add(_amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accEbePerShare).div(1e12);\\r\\n        emit Deposit(_user, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw LP tokens from HecoPool.\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public notPause {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (isMultLP(address(pool.lpToken))) {\\r\\n            _withdrawEbeAndToken(_pid, _amount, msg.sender);\\r\\n        } else {\\r\\n            _withdrawEbe(_pid, _amount, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _withdrawEbeAndToken(uint256 _pid, uint256 _amount, address _user) private {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        require(user.amount >= _amount, \\\"withdrawEbeAndToken: not good\\\");\\r\\n        updatePool(_pid);\\r\\n        uint256 pendingAmount = user.amount.mul(pool.accEbePerShare).div(1e12).sub(user.rewardDebt);\\r\\n        if (pendingAmount > 0) {\\r\\n            _safeEbeTransfer(_user, pendingAmount);\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            uint256 beforeToken = IERC20(multLpToken).balanceOf(address(this));\\r\\n            IMasterChefHeco(multLpChef).withdraw(poolCorrespond[_pid], _amount);\\r\\n            uint256 afterToken = IERC20(multLpToken).balanceOf(address(this));\\r\\n            pool.accMultLpPerShare = pool.accMultLpPerShare.add(afterToken.sub(beforeToken).mul(1e12).div(pool.totalAmount));\\r\\n            uint256 tokenPending = user.amount.mul(pool.accMultLpPerShare).div(1e12).sub(user.multLpRewardDebt);\\r\\n            if (tokenPending > 0) {\\r\\n                IERC20(multLpToken).safeTransfer(_user, tokenPending);\\r\\n            }\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            pool.totalAmount = pool.totalAmount.sub(_amount);\\r\\n            pool.lpToken.safeTransfer(_user, _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accEbePerShare).div(1e12);\\r\\n        user.multLpRewardDebt = user.amount.mul(pool.accMultLpPerShare).div(1e12);\\r\\n        emit Withdraw(_user, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    function _withdrawEbe(uint256 _pid, uint256 _amount, address _user) private {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        require(user.amount >= _amount, \\\"withdrawEbe: not good\\\");\\r\\n        updatePool(_pid);\\r\\n        uint256 pendingAmount = user.amount.mul(pool.accEbePerShare).div(1e12).sub(user.rewardDebt);\\r\\n        if (pendingAmount > 0) {\\r\\n            _safeEbeTransfer(_user, pendingAmount);\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            pool.totalAmount = pool.totalAmount.sub(_amount);\\r\\n            pool.lpToken.safeTransfer(_user, _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accEbePerShare).div(1e12);\\r\\n        emit Withdraw(_user, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public notPause {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (isMultLP(address(pool.lpToken))) {\\r\\n            _emergencyWithdrawEbeAndToken(_pid, msg.sender);\\r\\n        } else {\\r\\n            _emergencyWithdrawEbe(_pid, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _emergencyWithdrawEbeAndToken(uint256 _pid, address _user) private {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 amount = user.amount;\\r\\n        uint256 beforeToken = IERC20(multLpToken).balanceOf(address(this));\\r\\n        IMasterChefHeco(multLpChef).withdraw(poolCorrespond[_pid], amount);\\r\\n        uint256 afterToken = IERC20(multLpToken).balanceOf(address(this));\\r\\n        pool.accMultLpPerShare = pool.accMultLpPerShare.add(afterToken.sub(beforeToken).mul(1e12).div(pool.totalAmount));\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        pool.lpToken.safeTransfer(_user, amount);\\r\\n        pool.totalAmount = pool.totalAmount.sub(amount);\\r\\n        emit EmergencyWithdraw(_user, _pid, amount);\\r\\n    }\\r\\n\\r\\n    function _emergencyWithdrawEbe(uint256 _pid, address _user) private {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 amount = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        pool.lpToken.safeTransfer(_user, amount);\\r\\n        pool.totalAmount = pool.totalAmount.sub(amount);\\r\\n        emit EmergencyWithdraw(_user, _pid, amount);\\r\\n    }\\r\\n\\r\\n    // Safe EBE transfer function, just in case if rounding error causes pool to not have enough EBEs.\\r\\n    function _safeEbeTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 ebeBal = ebe.balanceOf(address(this));\\r\\n        if (_amount > ebeBal) {\\r\\n            ebe.transfer(_to, ebeBal);\\r\\n        } else {\\r\\n            ebe.transfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier notPause() {\\r\\n        require(paused == false, \\\"Mining has been suspended\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7f5dbc3a5c5caee388a737e5f4228c329a700b26ca0410e4d792787a8774c45c\"},\"contracts/swap/interface/IEbe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\nimport {IERC20 as SIERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract IEbe is SIERC20 {\\r\\n    function mint(address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x6023694933d5003d10f3923af61fe9c087a7e9fa85a2b382525b43838336a11e\"}},\"version\":1}",
  "bytecode": "0x60806040526009805460ff191690556000600a5562503340600e553480156200002757600080fd5b50604051620035cc380380620035cc833981810160405260608110156200004d57600080fd5b50805160208201516040909201519091906000620000736001600160e01b03620000ea16565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b0319166001600160a01b039490941693909317909255600455600b55620000ee565b3390565b6134ce80620000fe6000396000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c80637fe6f5ac11610130578063b5ec5c99116100b8578063e4c75c271161007c578063e4c75c27146105f3578063e6ab8d4814610638578063e715e23414610640578063f1844a251461066e578063f2fde38b1461067657610231565b8063b5ec5c9914610586578063cb4502c4146105a3578063d431b1ac146105c0578063dfc7b95b146105c8578063e2bbb158146105d057610231565b806393f1a40b116100ff57806393f1a40b146104a8578063a9fb763c146104f2578063aaae43cc1461050f578063b0c7044b1461053d578063b337d32c1461056357610231565b80637fe6f5ac146104555780638c0352521461047b5780638da5cb5b146104985780638f32d59b146104a057610231565b806351eb05a6116101be578063630b5ba111610182578063630b5ba1146103f557806364482f79146103fd57806366f9e64b14610428578063705bbc0114610445578063715018a61461044d57610231565b806351eb05a6146103715780635312ea8e1461038e57806356c5867d146103ab5780635a3e251f146103e55780635c975abb146103ed57610231565b806317caf6f11161020557806317caf6f1146102eb5780631eaaa045146102f35780634315490714610329578063441a3e701461034657806348cd4cb11461036957610231565b8062a2e17814610236578063081e3eda1461025a578063135f8aa7146102745780631526fe2714610291575b600080fd5b61023e61069c565b604080516001600160a01b039092168252519081900360200190f35b6102626106ab565b60408051918252519081900360200190f35b6102626004803603602081101561028a57600080fd5b50356106b1565b6102ae600480360360208110156102a757600080fd5b5035610718565b604080516001600160a01b0390971687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b610262610765565b6103276004803603606081101561030957600080fd5b508035906001600160a01b036020820135169060400135151561076b565b005b61023e6004803603602081101561033f57600080fd5b50356109be565b6103276004803603604081101561035c57600080fd5b5080359060200135610a27565b610262610ad6565b6103276004803603602081101561038757600080fd5b5035610adc565b610327600480360360208110156103a457600080fd5b5035610ce5565b6103d1600480360360208110156103c157600080fd5b50356001600160a01b0316610d91565b604080519115158252519081900360200190f35b610262610ebd565b6103d1610ec3565b610327610ecc565b6103276004803603606081101561041357600080fd5b50803590602081013590604001351515610eeb565b6103276004803603602081101561043e57600080fd5b5035610fb1565b61023e611005565b610327611014565b6103d16004803603602081101561046b57600080fd5b50356001600160a01b03166110a5565b6102626004803603602081101561049157600080fd5b50356110b2565b61023e611174565b6103d1611183565b6104d4600480360360408110156104be57600080fd5b50803590602001356001600160a01b03166111a7565b60408051938452602084019290925282820152519081900360600190f35b6102626004803603602081101561050857600080fd5b50356111d3565b6103276004803603604081101561052557600080fd5b506001600160a01b0381358116916020013516611200565b6102626004803603602081101561055357600080fd5b50356001600160a01b03166113ef565b6103276004803603604081101561057957600080fd5b5080359060200135611401565b6103276004803603602081101561059c57600080fd5b50356114ae565b610262600480360360208110156105b957600080fd5b50356114fa565b61032761150c565b61023e611567565b610327600480360360408110156105e657600080fd5b5080359060200135611576565b61061f6004803603604081101561060957600080fd5b50803590602001356001600160a01b031661161b565b6040805192835260208301919091528051918290030190f35b610262611695565b6103276004803603604081101561065657600080fd5b506001600160a01b03813581169160200135166116a6565b610262611782565b6103276004803603602081101561068c57600080fd5b50356001600160a01b0316611788565b6003546001600160a01b031681565b60055490565b6000600e54600014156106c657506000610713565b600b5482111561070f57610708600e546106fc60016106f0600b54876117d890919063ffffffff16565b9063ffffffff6117d816565b9063ffffffff61181a16565b9050610713565b5060005b919050565b6005818154811061072557fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909286565b600a5481565b610773611183565b6107b2576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b6001600160a01b03821661080d576040805162461bcd60e51b815260206004820152601c60248201527f5f6c70546f6b656e20697320746865207a65726f206164647265737300000000604482015290519081900360640190fd5b801561081b5761081b610ecc565b6000600b54431161082e57600b54610830565b435b600a54909150610846908563ffffffff61185c16565b600a556040805160c0810182526001600160a01b038581168252602082018781529282018481526000606084018181526080850182815260a0860183815260058054600180820183559190955296517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0600690950294850180546001600160a01b031916919097161790955595517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db183015591517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db282015590517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db382015592517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db4840155517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db59092019190915561099b6106ab565b6001600160a01b0390941660009081526008602052604090209303909255505050565b600060016109ca611695565b03821115610a16576040805162461bcd60e51b815260206004820152601460248201527306e6f742066696e642074686973206d756c744c560641b604482015290519081900360640190fd5b610a216001836118b6565b92915050565b60095460ff1615610a7b576040805162461bcd60e51b8152602060048201526019602482015278135a5b9a5b99c81a185cc81899595b881cdd5cdc195b991959603a1b604482015290519081900360640190fd5b600060058381548110610a8a57fe5b600091825260209091206006909102018054909150610ab1906001600160a01b03166110a5565b15610ac657610ac18383336118e3565b610ad1565b610ad1838333611ca5565b505050565b600b5481565b600060058281548110610aeb57fe5b9060005260206000209060060201905080600201544311610b0c5750610ce2565b8054600090610b23906001600160a01b03166110a5565b15610b49576005820154610b3e575043600290910155610ce2565b506005810154610bd3565b8154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d6020811015610bbd57600080fd5b5051905080610bd3575043600290910155610ce2565b6000610be283600201546110b2565b905060008111610bf457505050610ce2565b6000610c13600a546106fc866001015485611e3c90919063ffffffff16565b600354604080516340c10f1960e01b81523060048201526024810184905290519293506000926001600160a01b03909216916340c10f199160448082019260209290919082900301818787803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d6020811015610c9657600080fd5b505190508015610cd357610ccd610cbc856106fc8564e8d4a5100063ffffffff611e3c16565b60038701549063ffffffff61185c16565b60038601555b43856002018190555050505050505b50565b60095460ff1615610d39576040805162461bcd60e51b8152602060048201526019602482015278135a5b9a5b99c81a185cc81899595b881cdd5cdc195b991959603a1b604482015290519081900360640190fd5b600060058281548110610d4857fe5b600091825260209091206006909102018054909150610d6f906001600160a01b03166110a5565b15610d8357610d7e8233611e95565b610d8d565b610d8d82336120ee565b5050565b6000610d9b611183565b610dda576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b6001600160a01b038216610e2e576040805162461bcd60e51b81526020600482015260166024820152754c5020697320746865207a65726f206164647265737360501b604482015290519081900360640190fd5b600c546040805163095ea7b360e01b81526001600160a01b039283166004820152600019602482015290519184169163095ea7b3916044808201926020929091908290030181600087803b158015610e8557600080fd5b505af1158015610e99573d6000803e3d6000fd5b505050506040513d6020811015610eaf57600080fd5b50610a2190506001836121b0565b600e5481565b60095460ff1681565b60055460005b81811015610d8d57610ee381610adc565b600101610ed2565b610ef3611183565b610f32576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b8015610f4057610f40610ecc565b610f8382610f7760058681548110610f5457fe5b906000526020600020906006020160010154600a546117d890919063ffffffff16565b9063ffffffff61185c16565b600a819055508160058481548110610f9757fe5b906000526020600020906006020160010181905550505050565b610fb9611183565b610ff8576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b611000610ecc565b600455565b600d546001600160a01b031681565b61101c611183565b61105b576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000610a21600183612210565b600080806110bf846106b1565b905060006110cc436106b1565b90505b8082101561113f57600b54600e546001909301926000916110fb91610f7790869063ffffffff611e3c16565b905061113561112861110c836111d3565b61111c848a63ffffffff6117d816565b9063ffffffff611e3c16565b859063ffffffff61185c16565b90955092506110cf565b61116b61115e61114e436111d3565b61111c438963ffffffff6117d816565b849063ffffffff61185c16565b95945050505050565b6000546001600160a01b031690565b600080546001600160a01b031661119861222e565b6001600160a01b031614905090565b600660209081526000928352604080842090915290825290208054600182015460029092015490919083565b6000806111df836106b1565b90506111f98160020a60045461181a90919063ffffffff16565b9392505050565b611208611183565b611247576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b6001600160a01b0382161580159061126757506001600160a01b03811615155b6112ae576040805162461bcd60e51b8152602060048201526013602482015272697320746865207a65726f206164647265737360681b604482015290519081900360640190fd5b60095460ff161515600114611301576040805162461bcd60e51b815260206004820152601460248201527327379036b4b734b7339039bab9b832b739b4b7b760611b604482015290519081900360640190fd5b600d80546001600160a01b038085166001600160a01b031992831617909255600c805492841692909116919091179055600061133b611695565b90505b8015610ad1576000611352600160006118b6565b6001600160a01b03808216600090815260086020908152604080832054600c548185526007909352818420548251632989754760e11b815260048101919091529151959650949190931692635312ea8e92602480830193919282900301818387803b1580156113c057600080fd5b505af11580156113d4573d6000803e3d6000fd5b505050506113e3600183612232565b5050506000190161133e565b60086020526000908152604090205481565b611409611183565b611448576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b60016114526106ab565b0382111561149c576040805162461bcd60e51b81526020600482015260126024820152711b9bdd08199a5b99081d1a1a5cc81c1bdbdb60721b604482015290519081900360640190fd5b60009182526007602052604090912055565b6114b6611183565b6114f5576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b600e55565b60076020526000908152604090205481565b611514611183565b611553576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b6009805460ff19811660ff90911615179055565b600c546001600160a01b031681565b60095460ff16156115ca576040805162461bcd60e51b8152602060048201526019602482015278135a5b9a5b99c81a185cc81899595b881cdd5cdc195b991959603a1b604482015290519081900360640190fd5b6000600583815481106115d957fe5b600091825260209091206006909102018054909150611600906001600160a01b03166110a5565b1561161057610ac183833361233d565b610ad18383336128ff565b60008060006005858154811061162d57fe5b600091825260209091206006909102018054909150611654906001600160a01b03166110a5565b15611674576000806116668787612a50565b909550935061168e92505050565b60006116808686612c93565b93506000925061168e915050565b9250929050565b60006116a16001612e2f565b905090565b6116ae611183565b6116ed576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b6001600160a01b0382161580159061170d57506001600160a01b03811615155b611754576040805162461bcd60e51b8152602060048201526013602482015272697320746865207a65726f206164647265737360681b604482015290519081900360640190fd5b600d80546001600160a01b039384166001600160a01b031991821617909155600c8054929093169116179055565b60045481565b611790611183565b6117cf576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b610ce281612e36565b60006111f983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612ed6565b60006111f983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612f6d565b6000828201838110156111f9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008260010182815481106118c757fe5b6000918252602090912001546001600160a01b03169392505050565b6000600584815481106118f257fe5b60009182526020808320878452600680835260408086206001600160a01b038916875290935291909320805492909102909201925084111561197b576040805162461bcd60e51b815260206004820152601d60248201527f7769746864726177456265416e64546f6b656e3a206e6f7420676f6f64000000604482015290519081900360640190fd5b61198485610adc565b60006119b282600101546106f064e8d4a510006106fc87600301548760000154611e3c90919063ffffffff16565b905080156119c4576119c48482612fd2565b8415611c1157600d54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611a1557600080fd5b505afa158015611a29573d6000803e3d6000fd5b505050506040513d6020811015611a3f57600080fd5b5051600c54600089815260076020526040808220548151630441a3e760e41b81526004810191909152602481018b905290519394506001600160a01b039092169263441a3e7092604480820193929182900301818387803b158015611aa357600080fd5b505af1158015611ab7573d6000803e3d6000fd5b5050600d54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b158015611b0857600080fd5b505afa158015611b1c573d6000803e3d6000fd5b505050506040513d6020811015611b3257600080fd5b50516005860154909150611b6e90611b5d906106fc64e8d4a5100061111c868863ffffffff6117d816565b60048701549063ffffffff61185c16565b6004860181905560028501548554600092611b9e92916106f09164e8d4a51000916106fc9163ffffffff611e3c16565b90508015611bc357600d54611bc3906001600160a01b0316888363ffffffff61316216565b8454611bd5908963ffffffff6117d816565b85556005860154611bec908963ffffffff6117d816565b60058701558554611c0d906001600160a01b0316888a63ffffffff61316216565b5050505b60038301548254611c329164e8d4a51000916106fc9163ffffffff611e3c16565b600183015560048301548254611c589164e8d4a51000916106fc9163ffffffff611e3c16565b600283015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b600060058481548110611cb457fe5b60009182526020808320878452600680835260408086206001600160a01b0389168752909352919093208054929091029092019250841115611d35576040805162461bcd60e51b81526020600482015260156024820152741dda5d1a191c985dd158994e881b9bdd0819dbdbd9605a1b604482015290519081900360640190fd5b611d3e85610adc565b6000611d6c82600101546106f064e8d4a510006106fc87600301548760000154611e3c90919063ffffffff16565b90508015611d7e57611d7e8482612fd2565b8415611dce578154611d96908663ffffffff6117d816565b82556005830154611dad908663ffffffff6117d816565b60058401558254611dce906001600160a01b0316858763ffffffff61316216565b60038301548254611def9164e8d4a51000916106fc9163ffffffff611e3c16565b600183015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b600082611e4b57506000610a21565b82820282848281611e5857fe5b04146111f95760405162461bcd60e51b815260040180806020018281038252602181526020018061342f6021913960400191505060405180910390fd5b600060058381548110611ea457fe5b60009182526020808320868452600680835260408086206001600160a01b03808a1688529085528187208054600d5484516370a0823160e01b8152306004820152945195909802909501985096939593949316926370a0823192602480840193829003018186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d6020811015611f4257600080fd5b5051600c54600088815260076020526040808220548151630441a3e760e41b815260048101919091526024810187905290519394506001600160a01b039092169263441a3e7092604480820193929182900301818387803b158015611fa657600080fd5b505af1158015611fba573d6000803e3d6000fd5b5050600d54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b15801561200b57600080fd5b505afa15801561201f573d6000803e3d6000fd5b505050506040513d602081101561203557600080fd5b5051600586015490915061206090611b5d906106fc64e8d4a5100061111c868863ffffffff6117d816565b600486015560008085556001850155845461208b906001600160a01b0316878563ffffffff61316216565b60058501546120a0908463ffffffff6117d816565b600586015560408051848152905188916001600160a01b038916917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350505050505050565b6000600583815481106120fd57fe5b60009182526020808320868452600680835260408086206001600160a01b03808a1688529452852080548682556001820196909655930201805490945091929161214f9116858363ffffffff61316216565b6005830154612164908263ffffffff6117d816565b600584015560408051828152905186916001600160a01b038716917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a35050505050565b60006121bc8383612210565b6122085750600182810180548083018083556000928352602080842090920180546001600160a01b0319166001600160a01b038716908117909155835290859052604090912055610a21565b506000610a21565b6001600160a01b031660009081526020919091526040902054151590565b3390565b600061223e8383612210565b15612208576001600160a01b038216600090815260208490526040902054600184015460001991820191018082146122e957600085600101828154811061228157fe5b6000918252602090912001546001870180546001600160a01b0390921692508291859081106122ac57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815290869052604090206001830190555b6001600160a01b0384166000908152602086905260408120556001850180548061230f57fe5b600082815260209020810160001990810180546001600160a01b03191690550190555060019150610a219050565b60006005848154811061234c57fe5b60009182526020808320878452600680835260408086206001600160a01b0389168752909352919093209102909101915061238685610adc565b8054156125ba5760006123bb82600101546106f064e8d4a510006106fc87600301548760000154611e3c90919063ffffffff16565b905080156123cd576123cd8482612fd2565b600d54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561241857600080fd5b505afa15801561242c573d6000803e3d6000fd5b505050506040513d602081101561244257600080fd5b5051600c54600089815260076020526040808220548151631c57762b60e31b815260048101919091526024810183905290519394506001600160a01b039092169263e2bbb15892604480820193929182900301818387803b1580156124a657600080fd5b505af11580156124ba573d6000803e3d6000fd5b5050600d54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b15801561250b57600080fd5b505afa15801561251f573d6000803e3d6000fd5b505050506040513d602081101561253557600080fd5b5051600586015490915061256090611b5d906106fc64e8d4a5100061111c868863ffffffff6117d816565b600486018190556002850154855460009261259092916106f09164e8d4a51000916106fc9163ffffffff611e3c16565b905080156125b557600d546125b5906001600160a01b0316888363ffffffff61316216565b505050505b831561286c5781546125dd906001600160a01b031684308763ffffffff6131b416565b600582015461269257600c54600086815260076020526040808220548151631c57762b60e31b815260048101919091526024810188905290516001600160a01b039093169263e2bbb1589260448084019391929182900301818387803b15801561264657600080fd5b505af115801561265a573d6000803e3d6000fd5b50508254612671925090508563ffffffff61185c16565b81556005820154612688908563ffffffff61185c16565b600583015561286c565b600d54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156126dd57600080fd5b505afa1580156126f1573d6000803e3d6000fd5b505050506040513d602081101561270757600080fd5b5051600c54600088815260076020526040808220548151631c57762b60e31b81526004810191909152602481018a905290519394506001600160a01b039092169263e2bbb15892604480820193929182900301818387803b15801561276b57600080fd5b505af115801561277f573d6000803e3d6000fd5b5050600d54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b1580156127d057600080fd5b505afa1580156127e4573d6000803e3d6000fd5b505050506040513d60208110156127fa57600080fd5b5051600585015490915061283690612825906106fc64e8d4a5100061111c868863ffffffff6117d816565b60048601549063ffffffff61185c16565b6004850155825461284d908763ffffffff61185c16565b83556005840154612864908763ffffffff61185c16565b600585015550505b6003820154815461288d9164e8d4a51000916106fc9163ffffffff611e3c16565b6001820155600482015481546128b39164e8d4a51000916106fc9163ffffffff611e3c16565b600282015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b60006005848154811061290e57fe5b60009182526020808320878452600680835260408086206001600160a01b0389168752909352919093209102909101915061294885610adc565b80541561299157600061297d82600101546106f064e8d4a510006106fc87600301548760000154611e3c90919063ffffffff16565b9050801561298f5761298f8482612fd2565b505b83156129e35781546129b4906001600160a01b031684308763ffffffff6131b416565b80546129c6908563ffffffff61185c16565b815560058201546129dd908563ffffffff61185c16565b60058301555b60038201548154612a049164e8d4a51000916106fc9163ffffffff611e3c16565b600182015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b600080600060058581548110612a6257fe5b60009182526020808320888452600680835260408086206001600160a01b038b168752909352919093209102909101600381015460048201548354929450909115612c8357600c54600089815260076020908152604080832054815163e4c75c2760e01b81526004810191909152306024820152905192936001600160a01b03169263e4c75c2792604480840193919291829003018186803b158015612b0757600080fd5b505afa158015612b1b573d6000803e3d6000fd5b505050506040513d6020811015612b3157600080fd5b50516005860154909150612b6590612b58906106fc8464e8d4a5100063ffffffff611e3c16565b839063ffffffff61185c16565b91506000612b9185600201546106f064e8d4a510006106fc878a60000154611e3c90919063ffffffff16565b90508560020154431115612c3d576000612bae87600201546110b2565b90506000612bcf600a546106fc8a6001015485611e3c90919063ffffffff16565b9050612c01612bf489600501546106fc64e8d4a5100085611e3c90919063ffffffff16565b879063ffffffff61185c16565b9550612c2b87600101546106f064e8d4a510006106fc8a8c60000154611e3c90919063ffffffff16565b8399509950505050505050505061168e565b8560020154431415612c8057612c7185600101546106f064e8d4a510006106fc888a60000154611e3c90919063ffffffff16565b9750955061168e945050505050565b50505b5060009788975095505050505050565b60008060058481548110612ca357fe5b60009182526020808320878452600680835260408086206001600160a01b03808b16885290855281872060039390960290930191820154825482516370a0823160e01b815230600482015292519398509596909590949316926370a0823192602480840193829003018186803b158015612d1c57600080fd5b505afa158015612d30573d6000803e3d6000fd5b505050506040513d6020811015612d4657600080fd5b5051835490915015612e22578360020154431115612de3576000612d6d85600201546110b2565b90506000612d8e600a546106fc886001015485611e3c90919063ffffffff16565b9050612dac611128846106fc8464e8d4a5100063ffffffff611e3c16565b9350612dd685600101546106f064e8d4a510006106fc888a60000154611e3c90919063ffffffff16565b9650505050505050610a21565b8360020154431415612e2257612e1783600101546106f064e8d4a510006106fc868860000154611e3c90919063ffffffff16565b945050505050610a21565b5060009695505050505050565b6001015490565b6001600160a01b038116612e7b5760405162461bcd60e51b81526004018080602001828103825260268152602001806134096026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008184841115612f655760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612f2a578181015183820152602001612f12565b50505050905090810190601f168015612f575780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183612fbc5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612f2a578181015183820152602001612f12565b506000838581612fc857fe5b0495945050505050565b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561301d57600080fd5b505afa158015613031573d6000803e3d6000fd5b505050506040513d602081101561304757600080fd5b50519050808211156130db576003546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156130a957600080fd5b505af11580156130bd573d6000803e3d6000fd5b505050506040513d60208110156130d357600080fd5b50610ad19050565b6003546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561313157600080fd5b505af1158015613145573d6000803e3d6000fd5b505050506040513d602081101561315b57600080fd5b5050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ad1908490613214565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261320e908590613214565b50505050565b613226826001600160a01b03166133cc565b613277576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106132b55780518252601f199092019160209182019101613296565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613317576040519150601f19603f3d011682016040523d82523d6000602084013e61331c565b606091505b509150915081613373576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561320e5780806020019051602081101561338f57600080fd5b505161320e5760405162461bcd60e51b815260040180806020018281038252602a815260200180613470602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061340057508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a723158202e39a40be26a0d253423008d9287c8f2248363d80aa43642a9b0476952bdb64064736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102315760003560e01c80637fe6f5ac11610130578063b5ec5c99116100b8578063e4c75c271161007c578063e4c75c27146105f3578063e6ab8d4814610638578063e715e23414610640578063f1844a251461066e578063f2fde38b1461067657610231565b8063b5ec5c9914610586578063cb4502c4146105a3578063d431b1ac146105c0578063dfc7b95b146105c8578063e2bbb158146105d057610231565b806393f1a40b116100ff57806393f1a40b146104a8578063a9fb763c146104f2578063aaae43cc1461050f578063b0c7044b1461053d578063b337d32c1461056357610231565b80637fe6f5ac146104555780638c0352521461047b5780638da5cb5b146104985780638f32d59b146104a057610231565b806351eb05a6116101be578063630b5ba111610182578063630b5ba1146103f557806364482f79146103fd57806366f9e64b14610428578063705bbc0114610445578063715018a61461044d57610231565b806351eb05a6146103715780635312ea8e1461038e57806356c5867d146103ab5780635a3e251f146103e55780635c975abb146103ed57610231565b806317caf6f11161020557806317caf6f1146102eb5780631eaaa045146102f35780634315490714610329578063441a3e701461034657806348cd4cb11461036957610231565b8062a2e17814610236578063081e3eda1461025a578063135f8aa7146102745780631526fe2714610291575b600080fd5b61023e61069c565b604080516001600160a01b039092168252519081900360200190f35b6102626106ab565b60408051918252519081900360200190f35b6102626004803603602081101561028a57600080fd5b50356106b1565b6102ae600480360360208110156102a757600080fd5b5035610718565b604080516001600160a01b0390971687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b610262610765565b6103276004803603606081101561030957600080fd5b508035906001600160a01b036020820135169060400135151561076b565b005b61023e6004803603602081101561033f57600080fd5b50356109be565b6103276004803603604081101561035c57600080fd5b5080359060200135610a27565b610262610ad6565b6103276004803603602081101561038757600080fd5b5035610adc565b610327600480360360208110156103a457600080fd5b5035610ce5565b6103d1600480360360208110156103c157600080fd5b50356001600160a01b0316610d91565b604080519115158252519081900360200190f35b610262610ebd565b6103d1610ec3565b610327610ecc565b6103276004803603606081101561041357600080fd5b50803590602081013590604001351515610eeb565b6103276004803603602081101561043e57600080fd5b5035610fb1565b61023e611005565b610327611014565b6103d16004803603602081101561046b57600080fd5b50356001600160a01b03166110a5565b6102626004803603602081101561049157600080fd5b50356110b2565b61023e611174565b6103d1611183565b6104d4600480360360408110156104be57600080fd5b50803590602001356001600160a01b03166111a7565b60408051938452602084019290925282820152519081900360600190f35b6102626004803603602081101561050857600080fd5b50356111d3565b6103276004803603604081101561052557600080fd5b506001600160a01b0381358116916020013516611200565b6102626004803603602081101561055357600080fd5b50356001600160a01b03166113ef565b6103276004803603604081101561057957600080fd5b5080359060200135611401565b6103276004803603602081101561059c57600080fd5b50356114ae565b610262600480360360208110156105b957600080fd5b50356114fa565b61032761150c565b61023e611567565b610327600480360360408110156105e657600080fd5b5080359060200135611576565b61061f6004803603604081101561060957600080fd5b50803590602001356001600160a01b031661161b565b6040805192835260208301919091528051918290030190f35b610262611695565b6103276004803603604081101561065657600080fd5b506001600160a01b03813581169160200135166116a6565b610262611782565b6103276004803603602081101561068c57600080fd5b50356001600160a01b0316611788565b6003546001600160a01b031681565b60055490565b6000600e54600014156106c657506000610713565b600b5482111561070f57610708600e546106fc60016106f0600b54876117d890919063ffffffff16565b9063ffffffff6117d816565b9063ffffffff61181a16565b9050610713565b5060005b919050565b6005818154811061072557fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909286565b600a5481565b610773611183565b6107b2576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b6001600160a01b03821661080d576040805162461bcd60e51b815260206004820152601c60248201527f5f6c70546f6b656e20697320746865207a65726f206164647265737300000000604482015290519081900360640190fd5b801561081b5761081b610ecc565b6000600b54431161082e57600b54610830565b435b600a54909150610846908563ffffffff61185c16565b600a556040805160c0810182526001600160a01b038581168252602082018781529282018481526000606084018181526080850182815260a0860183815260058054600180820183559190955296517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0600690950294850180546001600160a01b031916919097161790955595517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db183015591517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db282015590517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db382015592517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db4840155517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db59092019190915561099b6106ab565b6001600160a01b0390941660009081526008602052604090209303909255505050565b600060016109ca611695565b03821115610a16576040805162461bcd60e51b815260206004820152601460248201527306e6f742066696e642074686973206d756c744c560641b604482015290519081900360640190fd5b610a216001836118b6565b92915050565b60095460ff1615610a7b576040805162461bcd60e51b8152602060048201526019602482015278135a5b9a5b99c81a185cc81899595b881cdd5cdc195b991959603a1b604482015290519081900360640190fd5b600060058381548110610a8a57fe5b600091825260209091206006909102018054909150610ab1906001600160a01b03166110a5565b15610ac657610ac18383336118e3565b610ad1565b610ad1838333611ca5565b505050565b600b5481565b600060058281548110610aeb57fe5b9060005260206000209060060201905080600201544311610b0c5750610ce2565b8054600090610b23906001600160a01b03166110a5565b15610b49576005820154610b3e575043600290910155610ce2565b506005810154610bd3565b8154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d6020811015610bbd57600080fd5b5051905080610bd3575043600290910155610ce2565b6000610be283600201546110b2565b905060008111610bf457505050610ce2565b6000610c13600a546106fc866001015485611e3c90919063ffffffff16565b600354604080516340c10f1960e01b81523060048201526024810184905290519293506000926001600160a01b03909216916340c10f199160448082019260209290919082900301818787803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d6020811015610c9657600080fd5b505190508015610cd357610ccd610cbc856106fc8564e8d4a5100063ffffffff611e3c16565b60038701549063ffffffff61185c16565b60038601555b43856002018190555050505050505b50565b60095460ff1615610d39576040805162461bcd60e51b8152602060048201526019602482015278135a5b9a5b99c81a185cc81899595b881cdd5cdc195b991959603a1b604482015290519081900360640190fd5b600060058281548110610d4857fe5b600091825260209091206006909102018054909150610d6f906001600160a01b03166110a5565b15610d8357610d7e8233611e95565b610d8d565b610d8d82336120ee565b5050565b6000610d9b611183565b610dda576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b6001600160a01b038216610e2e576040805162461bcd60e51b81526020600482015260166024820152754c5020697320746865207a65726f206164647265737360501b604482015290519081900360640190fd5b600c546040805163095ea7b360e01b81526001600160a01b039283166004820152600019602482015290519184169163095ea7b3916044808201926020929091908290030181600087803b158015610e8557600080fd5b505af1158015610e99573d6000803e3d6000fd5b505050506040513d6020811015610eaf57600080fd5b50610a2190506001836121b0565b600e5481565b60095460ff1681565b60055460005b81811015610d8d57610ee381610adc565b600101610ed2565b610ef3611183565b610f32576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b8015610f4057610f40610ecc565b610f8382610f7760058681548110610f5457fe5b906000526020600020906006020160010154600a546117d890919063ffffffff16565b9063ffffffff61185c16565b600a819055508160058481548110610f9757fe5b906000526020600020906006020160010181905550505050565b610fb9611183565b610ff8576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b611000610ecc565b600455565b600d546001600160a01b031681565b61101c611183565b61105b576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000610a21600183612210565b600080806110bf846106b1565b905060006110cc436106b1565b90505b8082101561113f57600b54600e546001909301926000916110fb91610f7790869063ffffffff611e3c16565b905061113561112861110c836111d3565b61111c848a63ffffffff6117d816565b9063ffffffff611e3c16565b859063ffffffff61185c16565b90955092506110cf565b61116b61115e61114e436111d3565b61111c438963ffffffff6117d816565b849063ffffffff61185c16565b95945050505050565b6000546001600160a01b031690565b600080546001600160a01b031661119861222e565b6001600160a01b031614905090565b600660209081526000928352604080842090915290825290208054600182015460029092015490919083565b6000806111df836106b1565b90506111f98160020a60045461181a90919063ffffffff16565b9392505050565b611208611183565b611247576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b6001600160a01b0382161580159061126757506001600160a01b03811615155b6112ae576040805162461bcd60e51b8152602060048201526013602482015272697320746865207a65726f206164647265737360681b604482015290519081900360640190fd5b60095460ff161515600114611301576040805162461bcd60e51b815260206004820152601460248201527327379036b4b734b7339039bab9b832b739b4b7b760611b604482015290519081900360640190fd5b600d80546001600160a01b038085166001600160a01b031992831617909255600c805492841692909116919091179055600061133b611695565b90505b8015610ad1576000611352600160006118b6565b6001600160a01b03808216600090815260086020908152604080832054600c548185526007909352818420548251632989754760e11b815260048101919091529151959650949190931692635312ea8e92602480830193919282900301818387803b1580156113c057600080fd5b505af11580156113d4573d6000803e3d6000fd5b505050506113e3600183612232565b5050506000190161133e565b60086020526000908152604090205481565b611409611183565b611448576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b60016114526106ab565b0382111561149c576040805162461bcd60e51b81526020600482015260126024820152711b9bdd08199a5b99081d1a1a5cc81c1bdbdb60721b604482015290519081900360640190fd5b60009182526007602052604090912055565b6114b6611183565b6114f5576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b600e55565b60076020526000908152604090205481565b611514611183565b611553576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b6009805460ff19811660ff90911615179055565b600c546001600160a01b031681565b60095460ff16156115ca576040805162461bcd60e51b8152602060048201526019602482015278135a5b9a5b99c81a185cc81899595b881cdd5cdc195b991959603a1b604482015290519081900360640190fd5b6000600583815481106115d957fe5b600091825260209091206006909102018054909150611600906001600160a01b03166110a5565b1561161057610ac183833361233d565b610ad18383336128ff565b60008060006005858154811061162d57fe5b600091825260209091206006909102018054909150611654906001600160a01b03166110a5565b15611674576000806116668787612a50565b909550935061168e92505050565b60006116808686612c93565b93506000925061168e915050565b9250929050565b60006116a16001612e2f565b905090565b6116ae611183565b6116ed576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b6001600160a01b0382161580159061170d57506001600160a01b03811615155b611754576040805162461bcd60e51b8152602060048201526013602482015272697320746865207a65726f206164647265737360681b604482015290519081900360640190fd5b600d80546001600160a01b039384166001600160a01b031991821617909155600c8054929093169116179055565b60045481565b611790611183565b6117cf576040805162461bcd60e51b81526020600482018190526024820152600080516020613450833981519152604482015290519081900360640190fd5b610ce281612e36565b60006111f983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612ed6565b60006111f983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612f6d565b6000828201838110156111f9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008260010182815481106118c757fe5b6000918252602090912001546001600160a01b03169392505050565b6000600584815481106118f257fe5b60009182526020808320878452600680835260408086206001600160a01b038916875290935291909320805492909102909201925084111561197b576040805162461bcd60e51b815260206004820152601d60248201527f7769746864726177456265416e64546f6b656e3a206e6f7420676f6f64000000604482015290519081900360640190fd5b61198485610adc565b60006119b282600101546106f064e8d4a510006106fc87600301548760000154611e3c90919063ffffffff16565b905080156119c4576119c48482612fd2565b8415611c1157600d54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611a1557600080fd5b505afa158015611a29573d6000803e3d6000fd5b505050506040513d6020811015611a3f57600080fd5b5051600c54600089815260076020526040808220548151630441a3e760e41b81526004810191909152602481018b905290519394506001600160a01b039092169263441a3e7092604480820193929182900301818387803b158015611aa357600080fd5b505af1158015611ab7573d6000803e3d6000fd5b5050600d54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b158015611b0857600080fd5b505afa158015611b1c573d6000803e3d6000fd5b505050506040513d6020811015611b3257600080fd5b50516005860154909150611b6e90611b5d906106fc64e8d4a5100061111c868863ffffffff6117d816565b60048701549063ffffffff61185c16565b6004860181905560028501548554600092611b9e92916106f09164e8d4a51000916106fc9163ffffffff611e3c16565b90508015611bc357600d54611bc3906001600160a01b0316888363ffffffff61316216565b8454611bd5908963ffffffff6117d816565b85556005860154611bec908963ffffffff6117d816565b60058701558554611c0d906001600160a01b0316888a63ffffffff61316216565b5050505b60038301548254611c329164e8d4a51000916106fc9163ffffffff611e3c16565b600183015560048301548254611c589164e8d4a51000916106fc9163ffffffff611e3c16565b600283015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b600060058481548110611cb457fe5b60009182526020808320878452600680835260408086206001600160a01b0389168752909352919093208054929091029092019250841115611d35576040805162461bcd60e51b81526020600482015260156024820152741dda5d1a191c985dd158994e881b9bdd0819dbdbd9605a1b604482015290519081900360640190fd5b611d3e85610adc565b6000611d6c82600101546106f064e8d4a510006106fc87600301548760000154611e3c90919063ffffffff16565b90508015611d7e57611d7e8482612fd2565b8415611dce578154611d96908663ffffffff6117d816565b82556005830154611dad908663ffffffff6117d816565b60058401558254611dce906001600160a01b0316858763ffffffff61316216565b60038301548254611def9164e8d4a51000916106fc9163ffffffff611e3c16565b600183015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b600082611e4b57506000610a21565b82820282848281611e5857fe5b04146111f95760405162461bcd60e51b815260040180806020018281038252602181526020018061342f6021913960400191505060405180910390fd5b600060058381548110611ea457fe5b60009182526020808320868452600680835260408086206001600160a01b03808a1688529085528187208054600d5484516370a0823160e01b8152306004820152945195909802909501985096939593949316926370a0823192602480840193829003018186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d6020811015611f4257600080fd5b5051600c54600088815260076020526040808220548151630441a3e760e41b815260048101919091526024810187905290519394506001600160a01b039092169263441a3e7092604480820193929182900301818387803b158015611fa657600080fd5b505af1158015611fba573d6000803e3d6000fd5b5050600d54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b15801561200b57600080fd5b505afa15801561201f573d6000803e3d6000fd5b505050506040513d602081101561203557600080fd5b5051600586015490915061206090611b5d906106fc64e8d4a5100061111c868863ffffffff6117d816565b600486015560008085556001850155845461208b906001600160a01b0316878563ffffffff61316216565b60058501546120a0908463ffffffff6117d816565b600586015560408051848152905188916001600160a01b038916917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350505050505050565b6000600583815481106120fd57fe5b60009182526020808320868452600680835260408086206001600160a01b03808a1688529452852080548682556001820196909655930201805490945091929161214f9116858363ffffffff61316216565b6005830154612164908263ffffffff6117d816565b600584015560408051828152905186916001600160a01b038716917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a35050505050565b60006121bc8383612210565b6122085750600182810180548083018083556000928352602080842090920180546001600160a01b0319166001600160a01b038716908117909155835290859052604090912055610a21565b506000610a21565b6001600160a01b031660009081526020919091526040902054151590565b3390565b600061223e8383612210565b15612208576001600160a01b038216600090815260208490526040902054600184015460001991820191018082146122e957600085600101828154811061228157fe5b6000918252602090912001546001870180546001600160a01b0390921692508291859081106122ac57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815290869052604090206001830190555b6001600160a01b0384166000908152602086905260408120556001850180548061230f57fe5b600082815260209020810160001990810180546001600160a01b03191690550190555060019150610a219050565b60006005848154811061234c57fe5b60009182526020808320878452600680835260408086206001600160a01b0389168752909352919093209102909101915061238685610adc565b8054156125ba5760006123bb82600101546106f064e8d4a510006106fc87600301548760000154611e3c90919063ffffffff16565b905080156123cd576123cd8482612fd2565b600d54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561241857600080fd5b505afa15801561242c573d6000803e3d6000fd5b505050506040513d602081101561244257600080fd5b5051600c54600089815260076020526040808220548151631c57762b60e31b815260048101919091526024810183905290519394506001600160a01b039092169263e2bbb15892604480820193929182900301818387803b1580156124a657600080fd5b505af11580156124ba573d6000803e3d6000fd5b5050600d54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b15801561250b57600080fd5b505afa15801561251f573d6000803e3d6000fd5b505050506040513d602081101561253557600080fd5b5051600586015490915061256090611b5d906106fc64e8d4a5100061111c868863ffffffff6117d816565b600486018190556002850154855460009261259092916106f09164e8d4a51000916106fc9163ffffffff611e3c16565b905080156125b557600d546125b5906001600160a01b0316888363ffffffff61316216565b505050505b831561286c5781546125dd906001600160a01b031684308763ffffffff6131b416565b600582015461269257600c54600086815260076020526040808220548151631c57762b60e31b815260048101919091526024810188905290516001600160a01b039093169263e2bbb1589260448084019391929182900301818387803b15801561264657600080fd5b505af115801561265a573d6000803e3d6000fd5b50508254612671925090508563ffffffff61185c16565b81556005820154612688908563ffffffff61185c16565b600583015561286c565b600d54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156126dd57600080fd5b505afa1580156126f1573d6000803e3d6000fd5b505050506040513d602081101561270757600080fd5b5051600c54600088815260076020526040808220548151631c57762b60e31b81526004810191909152602481018a905290519394506001600160a01b039092169263e2bbb15892604480820193929182900301818387803b15801561276b57600080fd5b505af115801561277f573d6000803e3d6000fd5b5050600d54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b1580156127d057600080fd5b505afa1580156127e4573d6000803e3d6000fd5b505050506040513d60208110156127fa57600080fd5b5051600585015490915061283690612825906106fc64e8d4a5100061111c868863ffffffff6117d816565b60048601549063ffffffff61185c16565b6004850155825461284d908763ffffffff61185c16565b83556005840154612864908763ffffffff61185c16565b600585015550505b6003820154815461288d9164e8d4a51000916106fc9163ffffffff611e3c16565b6001820155600482015481546128b39164e8d4a51000916106fc9163ffffffff611e3c16565b600282015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b60006005848154811061290e57fe5b60009182526020808320878452600680835260408086206001600160a01b0389168752909352919093209102909101915061294885610adc565b80541561299157600061297d82600101546106f064e8d4a510006106fc87600301548760000154611e3c90919063ffffffff16565b9050801561298f5761298f8482612fd2565b505b83156129e35781546129b4906001600160a01b031684308763ffffffff6131b416565b80546129c6908563ffffffff61185c16565b815560058201546129dd908563ffffffff61185c16565b60058301555b60038201548154612a049164e8d4a51000916106fc9163ffffffff611e3c16565b600182015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b600080600060058581548110612a6257fe5b60009182526020808320888452600680835260408086206001600160a01b038b168752909352919093209102909101600381015460048201548354929450909115612c8357600c54600089815260076020908152604080832054815163e4c75c2760e01b81526004810191909152306024820152905192936001600160a01b03169263e4c75c2792604480840193919291829003018186803b158015612b0757600080fd5b505afa158015612b1b573d6000803e3d6000fd5b505050506040513d6020811015612b3157600080fd5b50516005860154909150612b6590612b58906106fc8464e8d4a5100063ffffffff611e3c16565b839063ffffffff61185c16565b91506000612b9185600201546106f064e8d4a510006106fc878a60000154611e3c90919063ffffffff16565b90508560020154431115612c3d576000612bae87600201546110b2565b90506000612bcf600a546106fc8a6001015485611e3c90919063ffffffff16565b9050612c01612bf489600501546106fc64e8d4a5100085611e3c90919063ffffffff16565b879063ffffffff61185c16565b9550612c2b87600101546106f064e8d4a510006106fc8a8c60000154611e3c90919063ffffffff16565b8399509950505050505050505061168e565b8560020154431415612c8057612c7185600101546106f064e8d4a510006106fc888a60000154611e3c90919063ffffffff16565b9750955061168e945050505050565b50505b5060009788975095505050505050565b60008060058481548110612ca357fe5b60009182526020808320878452600680835260408086206001600160a01b03808b16885290855281872060039390960290930191820154825482516370a0823160e01b815230600482015292519398509596909590949316926370a0823192602480840193829003018186803b158015612d1c57600080fd5b505afa158015612d30573d6000803e3d6000fd5b505050506040513d6020811015612d4657600080fd5b5051835490915015612e22578360020154431115612de3576000612d6d85600201546110b2565b90506000612d8e600a546106fc886001015485611e3c90919063ffffffff16565b9050612dac611128846106fc8464e8d4a5100063ffffffff611e3c16565b9350612dd685600101546106f064e8d4a510006106fc888a60000154611e3c90919063ffffffff16565b9650505050505050610a21565b8360020154431415612e2257612e1783600101546106f064e8d4a510006106fc868860000154611e3c90919063ffffffff16565b945050505050610a21565b5060009695505050505050565b6001015490565b6001600160a01b038116612e7b5760405162461bcd60e51b81526004018080602001828103825260268152602001806134096026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008184841115612f655760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612f2a578181015183820152602001612f12565b50505050905090810190601f168015612f575780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183612fbc5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612f2a578181015183820152602001612f12565b506000838581612fc857fe5b0495945050505050565b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561301d57600080fd5b505afa158015613031573d6000803e3d6000fd5b505050506040513d602081101561304757600080fd5b50519050808211156130db576003546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156130a957600080fd5b505af11580156130bd573d6000803e3d6000fd5b505050506040513d60208110156130d357600080fd5b50610ad19050565b6003546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561313157600080fd5b505af1158015613145573d6000803e3d6000fd5b505050506040513d602081101561315b57600080fd5b5050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ad1908490613214565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261320e908590613214565b50505050565b613226826001600160a01b03166133cc565b613277576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106132b55780518252601f199092019160209182019101613296565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613317576040519150601f19603f3d011682016040523d82523d6000602084013e61331c565b606091505b509150915081613373576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561320e5780806020019051602081101561338f57600080fd5b505161320e5760405162461bcd60e51b815260040180806020018281038252602a815260200180613470602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061340057508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a723158202e39a40be26a0d253423008d9287c8f2248363d80aa43642a9b0476952bdb64064736f6c63430005100032",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 220,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 34126,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "_multLP",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)1110_storage"
      },
      {
        "astId": 34148,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "ebe",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IEbe)45038"
      },
      {
        "astId": 34150,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "ebePerBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 34153,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(PoolInfo)34146_storage)dyn_storage"
      },
      {
        "astId": 34159,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)34133_storage))"
      },
      {
        "astId": 34163,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "poolCorrespond",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 34167,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "LpOfPid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34170,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "paused",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 34173,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 34175,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "startBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 34177,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "multLpChef",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 34179,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "multLpToken",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 34182,
        "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
        "label": "halvingPeriod",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)34146_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)34146_storage",
        "encoding": "dynamic_array",
        "label": "struct HecoPool.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)805": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEbe)45038": {
        "encoding": "inplace",
        "label": "contract IEbe",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)34133_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HecoPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)34133_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)34133_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct HecoPool.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)34133_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1110_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1106,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1109,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)34146_storage": {
        "encoding": "inplace",
        "label": "struct HecoPool.PoolInfo",
        "members": [
          {
            "astId": 34135,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)805"
          },
          {
            "astId": 34137,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 34139,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 34141,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "accEbePerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 34143,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "accMultLpPerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 34145,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "totalAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)34133_storage": {
        "encoding": "inplace",
        "label": "struct HecoPool.UserInfo",
        "members": [
          {
            "astId": 34128,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 34130,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 34132,
            "contract": "contracts/swap/heco/HecoPool.sol:HecoPool",
            "label": "multLpRewardDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}