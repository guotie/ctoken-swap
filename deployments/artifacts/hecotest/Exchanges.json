{
  "address": "0x0390155850994cC4BA3B0cc2CdB48aF64A8e00DB",
  "abi": [
    {
      "inputs": [],
      "name": "EXCHANGE_CURVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_EBANK_EX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_UNISWAP_V2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_UNISWAP_V3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_COMPLEX_LEVEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_EBANK_CTOKENS_CTOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_EBANK_ETH_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_EBANK_TOKENS_ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_EBANK_TOKENS_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aToken",
          "type": "address"
        }
      ],
      "name": "aaveDepositToken",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "aaveWithdrawToken",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "midTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "complexLevel",
          "type": "uint256"
        }
      ],
      "name": "allPaths",
      "outputs": [
        {
          "internalType": "address[][]",
          "name": "paths",
          "type": "address[][]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICToken",
          "name": "ctoken",
          "type": "ICToken"
        }
      ],
      "name": "calcCTokenExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "exFlag",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.Exchange",
          "name": "ex",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "calcDistributes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "distributes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ctoken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "parts",
          "type": "uint256"
        }
      ],
      "name": "convertCompoundCtokenMinted",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ctoken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "cAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "parts",
          "type": "uint256"
        }
      ],
      "name": "convertCompoundTokenRedeemed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "curveSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ebankSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "midTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "complexLevel",
          "type": "uint256"
        }
      ],
      "name": "getExchangeRoutes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "reserves",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "isEBankExchange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "isUniswapLikeExchange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountIns",
          "type": "uint256[]"
        }
      ],
      "name": "uniswapLikeSwap",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amountOuts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0138ec422d1742d07d3f8a4465d8ffc27d0045fa400dafdee7d8ed4c2a79f888",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x0390155850994cC4BA3B0cc2CdB48aF64A8e00DB",
    "transactionIndex": 0,
    "gasUsed": "2230739",
    "logsBloom": "0x
    "blockHash": "0xc5ec61c4503d26df6a8745a3bc4d8386b320ec71436c635b2a9c4f249e975654",
    "transactionHash": "0x0138ec422d1742d07d3f8a4465d8ffc27d0045fa400dafdee7d8ed4c2a79f888",
    "logs": [],
    "blockNumber": 7107606,
    "cumulativeGasUsed": "2230739",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bddb41bb9088066bf2db791dc851356b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EXCHANGE_CURVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_EBANK_EX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_UNISWAP_V2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_UNISWAP_V3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMPLEX_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_EBANK_CTOKENS_CTOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_EBANK_ETH_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_EBANK_TOKENS_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_EBANK_TOKENS_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"}],\"name\":\"aaveDepositToken\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"aaveWithdrawToken\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"midTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"complexLevel\",\"type\":\"uint256\"}],\"name\":\"allPaths\",\"outputs\":[{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"ctoken\",\"type\":\"ICToken\"}],\"name\":\"calcCTokenExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"exFlag\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.Exchange\",\"name\":\"ex\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"calcDistributes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"distributes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"name\":\"convertCompoundCtokenMinted\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"cAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"name\":\"convertCompoundTokenRedeemed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"curveSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ebankSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"complexLevel\",\"type\":\"uint256\"}],\"name\":\"getExchangeRoutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"reserves\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"isEBankExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"isUniswapLikeExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountIns\",\"type\":\"uint256[]\"}],\"name\":\"uniswapLikeSwap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountOuts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ebankex\",\"details\":\"Exchanges are used for aggressive swap within multi swap exchanges.*\",\"kind\":\"dev\",\"methods\":{\"aaveDepositToken(address)\":{\"details\":\"aave deposit token\"},\"aaveWithdrawToken(address,uint256)\":{\"details\":\"withdraw aave token\"},\"calcCTokenExchangeRate(ICToken)\":{\"details\":\"\\u8ba1\\u7b97 ctoken \\u7684 exchange rate\"},\"calcDistributes(DataTypes.Exchange,address[],uint256[],address)\":{\"details\":\"calcDistributes calc swap exchange\"},\"compoundMintETH(address,uint256)\":{\"details\":\"compund mint ETH\"},\"compoundRedeemCToken(address,uint256)\":{\"details\":\"compoundRedeemCToken redeem compound token\",\"params\":{\"amount\":\"amount to redeem\",\"ctoken\":\"compund token\"}},\"convertCompoundCtokenMinted(address,uint256[],uint256)\":{\"details\":\"\\u8ba1\\u7b97 token \\u80fd\\u591f mint \\u5f97\\u5230\\u591a\\u5c11 ctoken\"},\"convertCompoundTokenRedeemed(address,uint256[],uint256)\":{\"details\":\"\\u8ba1\\u7b97 ctoken \\u80fd\\u591f redeem \\u5f97\\u5230\\u591a\\u5c11 token\"},\"curveSwap(address,uint256,uint256,uint256)\":{\"details\":\"swap stable coin in curve\"},\"ebankSwap(address,address[],uint256,address)\":{\"details\":\"ebank exchange\"}},\"title\":\"Exchanges library \\u8ba1\\u7b97\\u80fd\\u591f mint \\u3001\\u8d4e\\u56de\\u3001\\u5151\\u6362\\u591a\\u5c11\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides data types and functions to perform step swap calculations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/aggressive2/Exchanges.sol\":\"Exchanges\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/aggressive2/Exchanges.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./interface/IWETH.sol\\\";\\r\\nimport \\\"./interface/ICToken.sol\\\";\\r\\nimport \\\"./interface/IFactory.sol\\\";\\r\\nimport \\\"./interface/IRouter.sol\\\";\\r\\nimport \\\"./interface/IDeBankRouter.sol\\\";\\r\\nimport \\\"./interface/IDeBankFactory.sol\\\";\\r\\nimport \\\"./interface/ICurve.sol\\\";\\r\\nimport \\\"./library/SafeMath.sol\\\";\\r\\nimport \\\"./library/DataTypes.sol\\\";\\r\\nimport \\\"./library/SwapFlag.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n// import \\\"./interface/IAToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Exchanges library \\u8ba1\\u7b97\\u80fd\\u591f mint \\u3001\\u8d4e\\u56de\\u3001\\u5151\\u6362\\u591a\\u5c11\\r\\n * @author ebankex\\r\\n * @notice Provides data types and functions to perform step swap calculations\\r\\n * @dev Exchanges are used for aggressive swap within multi swap exchanges.\\r\\n **/\\r\\n\\r\\nlibrary Exchanges {\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint256;\\r\\n    using SwapFlag for DataTypes.SwapFlagMap;\\r\\n\\r\\n    uint constant public MAX_COMPLEX_LEVEL = 3;\\r\\n\\r\\n    uint constant public EXCHANGE_UNISWAP_V2 = 1;  // prettier-ignore\\r\\n    uint constant public EXCHANGE_UNISWAP_V3 = 2;  // prettier-ignore\\r\\n    uint constant public EXCHANGE_EBANK_EX   = 3;  // prettier-ignore\\r\\n    uint constant public EXCHANGE_CURVE      = 4;  // prettier-ignore\\r\\n\\r\\n    uint constant public SWAP_EBANK_CTOKENS_CTOKENS      = 1;  // prettier-ignore\\r\\n    uint constant public SWAP_EBANK_TOKENS_TOKENS        = 1;  // prettier-ignore\\r\\n    uint constant public SWAP_EBANK_ETH_TOKENS           = 1;  // prettier-ignore\\r\\n    uint constant public SWAP_EBANK_TOKENS_ETH           = 1;  // prettier-ignore\\r\\n\\r\\n    /// @dev \\u6839\\u636e midToken \\u6570\\u91cf, complexLevel \\u8ba1\\u7b97\\u7c7b uniswap \\u4ea4\\u6613\\u6240\\u6709\\u591a\\u5c11\\u4e2a\\u4ea4\\u6613\\u8def\\u5f84: 1 + P(midTokens, 1) + P(midTokens, 2) + .... + P(midTokens, complex)\\r\\n    /// complexLevel: \\u4e00\\u6b21\\u5151\\u6362\\u65f6, \\u4e2d\\u95f4token\\u7684\\u6570\\u91cf\\u3002\\u4f8b\\u5982\\u4e3a 2 \\u65f6\\uff0c\\u53ef\\u4ee5\\u7684\\u5151\\u6362\\u8def\\u5f84\\u4e3a a-m1-m2-b, a-m2-m1-b \\u6216\\u8005 a-m1-b a-m2-b\\r\\n    /// \\u4ec5\\u5bf9\\u4e8euniswap\\u7c7b\\u7684\\u4ea4\\u6613\\u6240, \\u5176\\u4ed6\\u7c7b\\u578b\\u4ea4\\u6613\\u6240\\u4f8b\\u5982 curve \\u4e0d\\u9002\\u7528\\r\\n    function uniswapRoutes(uint midTokens, uint complexLevel) internal pure returns (uint) {\\r\\n        uint count = 1;\\r\\n\\r\\n        if (complexLevel > MAX_COMPLEX_LEVEL) {\\r\\n            complexLevel = MAX_COMPLEX_LEVEL;\\r\\n        }\\r\\n\\r\\n        if (complexLevel >= midTokens) {\\r\\n            complexLevel = midTokens;\\r\\n        }\\r\\n        for (uint i = 1; i <= complexLevel; i ++) {\\r\\n            uint p = 1;\\r\\n            for (uint j = 0; j < i; j ++) {\\r\\n                p = p * (midTokens-j);\\r\\n            }\\r\\n            count += p;\\r\\n        }\\r\\n\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    /// @dev _itemInArray item \\u662f\\u5426\\u5728\\u6570\\u7ec4 vec \\u4e2d\\r\\n    function _itemInArray(address[] memory vec, address item) private pure returns (bool) {\\r\\n        for (uint i = 0; i < vec.length; i ++) {\\r\\n            if (item == vec[i]) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @dev \\u9012\\u5f52\\u8ba1\\u7b97\\u7279\\u5b9a complex \\u4e0b paths \\u6570\\u7ec4: P(midTokens, complex)\\r\\n    function calcPathComplex(\\r\\n                address[][] memory paths,\\r\\n                uint idx,\\r\\n                uint complex,\\r\\n                address token1,\\r\\n                address[] memory midTokens,\\r\\n                address[] memory path\\r\\n            )\\r\\n            internal\\r\\n            pure\\r\\n            returns (uint) {\\r\\n        if (complex == 0) {\\r\\n            address[] memory npath = new address[](path.length+1);\\r\\n            for (uint i = 0; i < path.length; i ++) {\\r\\n                npath[i] = path[i];\\r\\n            }\\r\\n            npath[npath.length-1] = token1;\\r\\n            paths[idx] = npath;\\r\\n            return idx+1;\\r\\n        }\\r\\n\\r\\n        for (uint i = 0; i < midTokens.length; i ++) {\\r\\n            address[] memory npath = new address[](path.length+1);\\r\\n            for (uint ip = 0; ip < path.length; ip ++) {\\r\\n                npath[ip] = path[ip];\\r\\n            }\\r\\n            address midToken = midTokens[i];\\r\\n            npath[npath.length-1] = midToken;\\r\\n\\r\\n            uint nMidLen = 0;\\r\\n            for (uint j = 0; j < midTokens.length; j ++) {\\r\\n                address mid = midTokens[j];\\r\\n                if (_itemInArray(npath, mid) == false) {\\r\\n                    nMidLen ++;\\r\\n                }\\r\\n            }\\r\\n            address[] memory nMidTokens = new address[](nMidLen);\\r\\n            uint midIdx = 0;\\r\\n            for (uint j = 0; j < midTokens.length; j ++) {\\r\\n                address mid = midTokens[j];\\r\\n                if (_itemInArray(npath, mid) == false) {\\r\\n                    nMidTokens[midIdx] = mid;\\r\\n                    midIdx ++;\\r\\n                }\\r\\n            }\\r\\n            idx = calcPathComplex(paths, idx, complex-1, token1, nMidTokens, npath);\\r\\n            // npath.pop();\\r\\n        }\\r\\n        return idx;\\r\\n    }\\r\\n\\r\\n    // \\u8ba1\\u7b97\\u6240\\u6709\\u8def\\u5f84\\r\\n    function allPaths(\\r\\n                address tokenIn,\\r\\n                address tokenOut,\\r\\n                address[] memory midTokens,\\r\\n                uint complexLevel\\r\\n            )\\r\\n            public\\r\\n            pure\\r\\n            returns (address[][] memory paths) {\\r\\n        // uint complexLevel = args.flag.getComplexLevel();\\r\\n        uint mids = midTokens.length;\\r\\n        // address token0 = args.tokenIn;\\r\\n        // address token1 = args.tokenOut;\\r\\n        \\r\\n        if (complexLevel > MAX_COMPLEX_LEVEL) {\\r\\n            complexLevel = MAX_COMPLEX_LEVEL;\\r\\n        }\\r\\n\\r\\n        if (complexLevel >= mids) {\\r\\n            complexLevel = mids;\\r\\n        }\\r\\n\\r\\n        uint total = uniswapRoutes(mids, complexLevel);\\r\\n        // console.log(\\\"mids=%d complex=%d total path=%d\\\", mids, complexLevel, total);\\r\\n\\r\\n        uint idx = 0;\\r\\n        paths = new address[][](total);\\r\\n        // paths[idx] = new address[]{token0, token1};\\r\\n        // idx ++;\\r\\n\\r\\n        address[] memory initialPath = new address[](1);\\r\\n        initialPath[0] = tokenIn;\\r\\n\\r\\n        // address[] memory midTokens = new address[](midTokens.length);\\r\\n        // for (uint i = 0; i < mids; i ++) {\\r\\n        //     midTokens[i] = args.midTokens[i];\\r\\n        // }\\r\\n\\r\\n        for (uint i = 0; i <= complexLevel; i ++) {\\r\\n            idx = calcPathComplex(paths, idx, i, tokenOut, midTokens, initialPath);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getExchangeRoutes(uint flag, uint midTokens, uint complexLevel) public pure returns (uint)  {\\r\\n        if (isUniswapLikeExchange(flag)) {\\r\\n            return uniswapRoutes(midTokens, complexLevel);\\r\\n        }\\r\\n        // todo \\u5176\\u4ed6\\u66f4\\u591a\\u7684\\u7c7b\\u578b\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function linearInterpolation(\\r\\n                    uint256 value,\\r\\n                    uint256 parts\\r\\n                )\\r\\n                internal\\r\\n                pure\\r\\n                returns(uint256[] memory rets) {\\r\\n        rets = new uint256[](parts);\\r\\n        for (uint i = 0; i < parts; i++) {\\r\\n            rets[i] = value.mul(i + 1).div(parts);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev calcDistributes calc swap exchange\\r\\n    function calcDistributes(\\r\\n                    DataTypes.Exchange memory ex,\\r\\n                    address[] memory path,\\r\\n                    uint[] memory amts,\\r\\n                    address to\\r\\n                )\\r\\n                public\\r\\n                view\\r\\n                returns (uint256[] memory distributes) {\\r\\n        uint flag = ex.exFlag;\\r\\n        address addr = ex.contractAddr;\\r\\n\\r\\n        if (flag == EXCHANGE_UNISWAP_V2 || flag == EXCHANGE_UNISWAP_V3) {\\r\\n            distributes = uniswapLikeSwap(addr, path, amts);\\r\\n            // for (uint i = 0; i < amts.length; i ++) {\\r\\n            //     distributes[i+1] = uniswapLikeSwap(addr, path, amts[i]);\\r\\n            // }\\r\\n        } else if (flag == EXCHANGE_EBANK_EX) {\\r\\n            distributes = new uint256[](amts.length+1);\\r\\n            for (uint i = 0; i < amts.length; i ++) {\\r\\n                distributes[i+1] = ebankSwap(addr, path, amts[i], to);\\r\\n            }\\r\\n        } else {\\r\\n            // should NOT reach here\\r\\n        }\\r\\n        // todo other swap\\r\\n    }\\r\\n\\r\\n    // \\u662f\\u5426\\u662f uniswap \\u7c7b\\u4f3c\\u7684\\u4ea4\\u6613\\u6240\\r\\n    function isUniswapLikeExchange(uint flag) public pure returns (bool) {\\r\\n        if (flag == EXCHANGE_UNISWAP_V2 ||\\r\\n            flag == EXCHANGE_UNISWAP_V3 ||\\r\\n            flag == EXCHANGE_EBANK_EX) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function isEBankExchange(uint flag) public pure returns (bool) {\\r\\n        if (flag == EXCHANGE_EBANK_EX) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n\\r\\n    // deposit eth from address from\\r\\n    function depositETH(IWETH weth) public returns (uint256) {\\r\\n        weth.deposit();\\r\\n\\r\\n        return weth.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    // withdraw weth\\r\\n    function withdrawWETH(IWETH weth, uint256 amount) public {\\r\\n        weth.withdraw(amount);\\r\\n    }\\r\\n\\r\\n    /// @dev \\u8ba1\\u7b97 ctoken \\u7684 exchange rate\\r\\n    function calcCTokenExchangeRate(ICToken ctoken) public view returns (uint) {\\r\\n        uint rate = ctoken.exchangeRateStored();\\r\\n        uint supplyRate = ctoken.supplyRatePerBlock();\\r\\n        uint lastBlock = ctoken.accrualBlockNumber();\\r\\n        uint blocks = block.number.sub(lastBlock);\\r\\n        uint inc = rate.mul(supplyRate).mul(blocks);\\r\\n        return rate.add(inc);\\r\\n    }\\r\\n\\r\\n    /// @dev \\u8ba1\\u7b97 token \\u80fd\\u591f mint \\u5f97\\u5230\\u591a\\u5c11 ctoken\\r\\n    function convertCompoundCtokenMinted(\\r\\n                    address ctoken,\\r\\n                    uint[] memory amounts,\\r\\n                    uint parts\\r\\n                )\\r\\n                public\\r\\n                view\\r\\n                returns (uint256[] memory) {\\r\\n        uint256 rate = calcCTokenExchangeRate(ICToken(ctoken));\\r\\n        uint256[] memory cAmts = new uint256[](parts);\\r\\n\\r\\n        for (uint i = 0; i < parts; i ++) {\\r\\n            cAmts[i] = amounts[i].mul(1e18).div(rate);\\r\\n        }\\r\\n        return cAmts;\\r\\n    }\\r\\n\\r\\n    /// @dev \\u8ba1\\u7b97 ctoken \\u80fd\\u591f redeem \\u5f97\\u5230\\u591a\\u5c11 token\\r\\n    function convertCompoundTokenRedeemed(\\r\\n                    address ctoken,\\r\\n                    uint[] memory cAmounts,\\r\\n                    uint parts\\r\\n                )\\r\\n                public\\r\\n                view\\r\\n                returns (uint256[] memory) {\\r\\n        uint256 rate = calcCTokenExchangeRate(ICToken(ctoken));\\r\\n        uint256[] memory amts = new uint256[](parts);\\r\\n\\r\\n        for (uint i = 0; i < parts; i ++) {\\r\\n            amts[i] = cAmounts[i].mul(rate).div(1e18);\\r\\n        }\\r\\n        return amts;\\r\\n    }\\r\\n\\r\\n    // mint token in compound\\r\\n    // token must NOT be ETH, ETH should _depositETH first, then do compound mint\\r\\n    // \\u5e01\\u5df2\\u7ecf\\u8f6c\\u5230\\u5408\\u7ea6\\u5730\\u5740\\r\\n    function compoundMintToken(\\r\\n                    address ctoken,\\r\\n                    uint256 amount\\r\\n                )\\r\\n                public\\r\\n                returns (uint256) {\\r\\n        uint256 balanceBefore = IERC20(ctoken).balanceOf(address(this));\\r\\n        ICToken(ctoken).mint(amount);\\r\\n\\r\\n        return IERC20(ctoken).balanceOf(address(this)).sub(balanceBefore);\\r\\n    }\\r\\n\\r\\n    /// @dev compund mint ETH\\r\\n    function compoundMintETH(\\r\\n                    address weth,\\r\\n                    uint amount\\r\\n                )\\r\\n                public\\r\\n                returns (uint256) {\\r\\n        IWETH(weth).deposit{value: amount}();\\r\\n\\r\\n        return compoundMintToken(address(weth), amount);\\r\\n    }\\r\\n\\r\\n    /// @dev compoundRedeemCToken redeem compound token\\r\\n    /// @param ctoken compund token\\r\\n    /// @param amount amount to redeem\\r\\n    function compoundRedeemCToken(address ctoken, uint256 amount) public {\\r\\n        ICToken(ctoken).redeem(amount);\\r\\n    }\\r\\n\\r\\n    /// @dev aave deposit token\\r\\n    function aaveDepositToken(address aToken) public pure {\\r\\n        aToken;\\r\\n    }\\r\\n\\r\\n    /// @dev withdraw aave token\\r\\n    function aaveWithdrawToken(address aToken, uint256 amt) public pure {\\r\\n        aToken;\\r\\n        amt;\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////////////////////////////////////////////////////////////\\r\\n    /////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    /// todo \\u9700\\u8981\\u8003\\u8651 reserve \\u4e3a 0 \\u7684\\u60c5\\u51b5\\r\\n\\r\\n    /// @dev uniswap like exchange\\r\\n    // function uniswapLikeSwap(\\r\\n    //                 address router,\\r\\n    //                 address[] memory path,\\r\\n    //                 uint256 amountIn\\r\\n    //             )\\r\\n    //             public\\r\\n    //             view\\r\\n    //             returns (uint) {\\r\\n    //     IFactory factory = IFactory(IRouter(router).factory());\\r\\n    //     uint[] memory amounts = new uint[](path.length);\\r\\n    //     amounts[0] = amountIn;\\r\\n    //     for (uint i = 0; i < path.length - 1; i ++) {\\r\\n    //         address pair = factory.getPair(path[i], path[i+1]);\\r\\n    //         if (pair == address(0)) {\\r\\n    //             return 0;\\r\\n    //         }\\r\\n    //         (uint ra, uint rb) = factory.getReserves(path[i], path[i+1]);\\r\\n    //         if (ra == 0 || rb == 0) {\\r\\n    //             return 0;\\r\\n    //         }\\r\\n    //         amounts[i+1] = factory.getAmountOut(amounts[i], ra, rb);\\r\\n    //     }\\r\\n    //     // uint[] memory amounts = IRouter(router).getAmountsOut(amountIn, path);\\r\\n    //     return amounts[amounts.length - 1];\\r\\n    // }\\r\\n\\r\\n    function calculateUniswapFormula(uint256 fromBalance, uint256 toBalance, uint256 amount) internal pure returns(uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return amount.mul(toBalance).mul(997).div(\\r\\n            fromBalance.mul(1000).add(amount.mul(997))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getReserves(\\r\\n                    address router,\\r\\n                    address[] memory path\\r\\n                )\\r\\n                public\\r\\n                view\\r\\n                returns (uint[][] memory reserves) {\\r\\n\\r\\n        uint plen = path.length;\\r\\n        reserves = new uint[][](plen);\\r\\n        IFactory factory = IFactory(IRouter(router).factory());\\r\\n        for (uint i = 0; i < plen - 1; i ++) {\\r\\n            // address t0 = path[i] == address(0) ? weth : path[i];\\r\\n            // address t1 = path[i+1] == address(0) ? weth : path[i+1];\\r\\n            address pair = factory.getPair(path[i], path[i+1]);\\r\\n            uint[] memory res = new uint[](2);\\r\\n            if (pair == address(0)) {\\r\\n                reserves[i] = res;\\r\\n                // return reserves;\\r\\n                continue;\\r\\n            }\\r\\n            // (uint r0, uint r1, ) = IPair(pair).getReserves();\\r\\n            // if (r0 == 0 || r1 == 0) {\\r\\n            //     return reserves;\\r\\n            // }\\r\\n            // reserves[i] = IERC20(path[i]).balanceOf(pair);\\r\\n            // reserves[i+1] = IERC20(path[i+1]).balanceOf(pair);\\r\\n            // if (reserves[i] == 0 || reserves[i+1] == 0) {\\r\\n            //     return reserves;\\r\\n            // }\\r\\n            res[0] = IERC20(path[i]).balanceOf(pair);\\r\\n            res[1] = IERC20(path[i+1]).balanceOf(pair);\\r\\n            reserves[i] = res;\\r\\n            // if (reserves[i] == 0 || reserves[i+1] == 0) {\\r\\n            //     return reserves;\\r\\n            // }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uniswapLikeSwap(\\r\\n                    address router,\\r\\n                    address[] memory path,\\r\\n                    uint256[] memory amountIns\\r\\n                )\\r\\n                public\\r\\n                view\\r\\n                returns (uint[] memory amountOuts) {\\r\\n        uint plen = path.length;\\r\\n        uint[] memory reserves = new uint[](plen);\\r\\n        amountOuts = new uint[](amountIns.length+1);\\r\\n\\r\\n        IFactory factory = IFactory(IRouter(router).factory());\\r\\n        for (uint i = 0; i < plen - 1; i ++) {\\r\\n            // address t0 = path[i] == address(0) ? weth : path[i];\\r\\n            // address t1 = path[i+1] == address(0) ? weth : path[i+1];\\r\\n            address pair = factory.getPair(path[i], path[i+1]);\\r\\n            if (pair == address(0)) {\\r\\n                return amountOuts;\\r\\n            }\\r\\n            reserves[i] = IERC20(path[i]).balanceOf(pair);\\r\\n            reserves[i+1] = IERC20(path[i+1]).balanceOf(pair);\\r\\n            if (reserves[i] == 0 || reserves[i+1] == 0) {\\r\\n                return amountOuts;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint[] memory tmp = new uint[](plen);\\r\\n        for (uint i = 0; i < amountIns.length; i ++) {\\r\\n            tmp[0] = amountIns[i];\\r\\n            for (uint j = 0; j < plen - 1; j ++) {\\r\\n                tmp[j + 1] = calculateUniswapFormula(reserves[j], reserves[j+1], tmp[j]);\\r\\n            }\\r\\n            amountOuts[i+1] = tmp[plen-1];\\r\\n        }\\r\\n\\r\\n        // amounts[0] = amountIn;\\r\\n        // for (uint i = 0; i < path.length - 1; i ++) {\\r\\n        //     address pair = factory.getPair(path[i], path[i+1]);\\r\\n        //     if (pair == address(0)) {\\r\\n        //         return 0;\\r\\n        //     }\\r\\n        //     (uint ra, uint rb) = factory.getReserves(path[i], path[i+1]);\\r\\n        //     if (ra == 0 || rb == 0) {\\r\\n        //         return 0;\\r\\n        //     }\\r\\n        //     amounts[i+1] = factory.getAmountOut(amounts[i], ra, rb);\\r\\n        // }\\r\\n        // // uint[] memory amounts = IRouter(router).getAmountsOut(amountIn, path);\\r\\n        // return amounts[amounts.length - 1];\\r\\n    }\\r\\n\\r\\n    /// @dev ebank exchange\\r\\n    function ebankSwap(\\r\\n                    address router,\\r\\n                    address[] memory path,\\r\\n                    uint256 amountIn,\\r\\n                    address to\\r\\n                )\\r\\n                public\\r\\n                view\\r\\n                returns (uint) {\\r\\n        IDeBankFactory factory = IDeBankFactory(IDeBankRouter(router).factory());\\r\\n        uint[] memory amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i = 0; i < path.length - 1; i ++) {\\r\\n            address pair = factory.getPair(path[i], path[i+1]);\\r\\n            if (pair == address(0)) {\\r\\n                return 0;\\r\\n            }\\r\\n            (uint ra, uint rb, uint feeRate, bool outAnchorToken) = factory.getReservesFeeRate(path[i], path[i + 1], to);\\r\\n            if (ra == 0 || rb == 0) {\\r\\n                return 0;\\r\\n            }\\r\\n            if (outAnchorToken) {\\r\\n                amounts[i + 1] = factory.getAmountOutFeeRateAnchorToken(amounts[i], ra, rb, feeRate);\\r\\n            } else {\\r\\n                amounts[i + 1] = factory.getAmountOutFeeRate(amounts[i], ra, rb, feeRate);\\r\\n            }\\r\\n        }\\r\\n        // uint[] memory amounts = IRouter(router).getAmountsOut(amountIn, path);\\r\\n        return amounts[amounts.length - 1];\\r\\n        // uint[] memory amounts = IDeBankRouter(router).getAmountsOut(amountIn, path, to);\\r\\n        // return amounts[amounts.length - 1];\\r\\n    }\\r\\n\\r\\n    /// @dev swap stable coin in curve\\r\\n    function curveSwap(\\r\\n                    address addr,\\r\\n                    uint i,\\r\\n                    uint j,\\r\\n                    uint dx\\r\\n                )\\r\\n                public\\r\\n                view\\r\\n                returns (uint) {\\r\\n        return ICurve(addr).get_dy(int128(i), int128(j), dx);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc5ee7707b0cde7a8e36d4962864815396d229fab607b2202d4f7b66100c2b66f\",\"license\":\"MIT\"},\"contracts/swap/aggressive2/interface/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface ICToken {\\r\\n\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint, uint, uint);\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function exchangeRateCurrent() external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n    function accrualBlockNumber() external view returns (uint);\\r\\n    // function getCash() virtual external view returns (uint);\\r\\n    // function accrueInterest() virtual public returns (uint);\\r\\n    // function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe95a5899db5ccb8fe14945508c92ee68da6938860a05f6407adc4fee6a557fb3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive2/interface/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface ICurve {\\r\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\r\\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\\r\\n\\r\\n    \\r\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\r\\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6049c36f81c9cfee842a259496dd85add80be458c9702c40db3948f4e4f0bee5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive2/interface/IDeBankFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IDeBankFactory {\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\r\\n\\r\\n    function pairFor(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path, address to) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path, address to) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    // function amountToCTokenAmt(address ctoken, uint amountIn) external view returns (uint cAmountIn);\\r\\n    // function ctokenAmtToAmount(address ctoken, uint cAmountOut) external view returns (uint amountOut);\\r\\n\\r\\n    function setPairFeeRate(address pair, uint feeRate) external;\\r\\n\\r\\n    function getReservesFeeRate(address tokenA, address tokenB, address to) \\r\\n                external view returns (uint reserveA, uint reserveB, uint feeRate, bool outAnchorToken);\\r\\n\\r\\n    function getAmountOutFeeRate(uint amountIn, uint reserveIn, uint reserveOut, uint feeRate) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountOutFeeRateAnchorToken(uint amountIn, uint reserveIn, uint reserveOut, uint feeRate) external pure returns (uint amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x447c5e316f0adabd680f2b6ca343f2c5ad3f995d7523007a4c6beb2d57b383f9\",\"license\":\"MIT\"},\"contracts/swap/aggressive2/interface/IDeBankRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IDeBankRouter {\\r\\n    function factory() external view returns (address);\\r\\n    \\r\\n    /// @dev getAmountsOut \\u5bf9\\u6bd4 IRouter \\u589e\\u52a0\\u4e86 to \\u53c2\\u6570, \\u53ef\\u4ee5\\u6839\\u636e to \\u6765\\u51b3\\u5b9a\\u624b\\u7eed\\u8d39\\u7387\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path, address to) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokensUnderlying(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokensUnderlying(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n        \\r\\n    function swapExactTokensForETHUnderlying(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x3b1dd167beda9047573684ca00f7c232a5bc4499b29632e128e4678f2ee8d99f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive2/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x23b94bd1e3bcc3eb3ed7f46e4b82e8ef11810af8c015794dd8bcf3d51a3cf0e7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive2/interface/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IFactory {\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\\r\\n    \\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\\r\\n    \\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x153dd572aaf83d77c413469b6d00832028dae8419c4ebadab6569e2528670745\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive2/interface/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IRouter {\\r\\n    function factory() external view returns (address);\\r\\n    \\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    \\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    \\r\\n    function swapExactTokensForETH(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        )\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n}\\r\\n\",\"keccak256\":\"0x1ca31bc90d1b90c7141bb3555c1e047880b9dd08771cf97234a188d984b36745\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive2/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract IWETH is IERC20 {\\r\\n    function deposit() external virtual payable;\\r\\n\\r\\n    function withdraw(uint256 amount) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x51352637310347dd11e7132157a7257ebd50e2f3ae19589fd7751d06d88800a9\",\"license\":\"MIT\"},\"contracts/swap/aggressive2/library/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title DataTypes library\\r\\n * @author ebankex\\r\\n * @notice Provides data types and functions to perform step swap calculations\\r\\n * @dev DataTypes are used for aggressive swap within multi swap exchanges.\\r\\n **/\\r\\n\\r\\nlibrary DataTypes {\\r\\n    // \\u6b65\\u9aa4\\u6267\\u884c\\u7684\\u52a8\\u4f5c\\u7c7b\\u578b\\r\\n    uint256 public constant STEP_DEPOSIT_ETH           = 0x0000000001; // prettier-ignore\\r\\n    uint256 public constant STEP_WITHDRAW_WETH         = 0x0000000002; // prettier-ignore\\r\\n    uint256 public constant STEP_COMPOUND_MINT_CTOKEN  = 0x0000000003; // prettier-ignore\\r\\n    uint256 public constant STEP_COMPOUND_MINT_CETH    = 0x0000000004; // prettier-ignore\\r\\n    uint256 public constant STEP_COMPOUND_REDEEM_TOKEN = 0x0000000005; // prettier-ignore\\r\\n    // uint256 public constant STEP_COMPOUND_REDEEM_ETH   = 0x0000000006; // prettier-ignore\\r\\n    uint256 public constant STEP_AAVE_DEPOSIT_ATOKEN   = 0x0000000007; // prettier-ignore\\r\\n    uint256 public constant STEP_AAVE_DEPOSIT_WETH     = 0x0000000008; // prettier-ignore\\r\\n    uint256 public constant STEP_AAVE_WITHDRAW_TOKEN   = 0x0000000009; // prettier-ignore\\r\\n    uint256 public constant STEP_AAVE_WITHDRAW_ETH     = 0x000000000a; // prettier-ignore\\r\\n\\r\\n    // uint256 public constant STEP_UNISWAP_PAIR_SWAP              = 0x0000000100; // prettier-ignore\\r\\n    uint256 public constant STEP_UNISWAP_ROUTER_TOKENS_TOKENS   = 0x000000011; // prettier-ignore\\r\\n    uint256 public constant STEP_UNISWAP_ROUTER_ETH_TOKENS      = 0x000000012; // prettier-ignore\\r\\n    uint256 public constant STEP_UNISWAP_ROUTER_TOKENS_ETH      = 0x000000013; // prettier-ignore\\r\\n    uint256 public constant STEP_EBANK_ROUTER_CTOKENS_CTOKENS   = 0x000000014;  // prettier-ignore same to STEP_UNISWAP_ROUTER_TOKENS_TOKENS\\r\\n    uint256 public constant STEP_EBANK_ROUTER_TOKENS_TOKENS     = 0x000000015;  // prettier-ignore underlying\\r\\n    uint256 public constant STEP_EBANK_ROUTER_ETH_TOKENS        = 0x000000016;  // prettier-ignore underlying\\r\\n    uint256 public constant STEP_EBANK_ROUTER_TOKENS_ETH        = 0x000000017;  // prettier-ignore underlying\\r\\n\\r\\n    uint256 public constant REVERSE_SWAP_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 public constant ADDRESS_MASK      = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff; // prettier-ignore\\r\\n\\r\\n    // todo slip, 16 bit, \\u5206\\u6bcd: 10000\\r\\n    struct SwapFlagMap {\\r\\n        // bit 0-7 parts, 8 bit\\r\\n        // bit 8-63: flag token in/out, 64 bit\\r\\n        // bit 72-79 max main part, 8 bit\\r\\n        // bit 80-81 complex level, 2 bit\\r\\n        // bit 82    allow partial fill\\r\\n        // bit 83    allow burnChi\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    /// @dev \\u8be2\\u4ef7 \\u8ba1\\u7b97\\u6700\\u4f73\\u5151\\u6362\\u8def\\u5f84\\u7684\\u5165\\u53c2\\r\\n    struct RoutePathParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        address[] midTokens;      // should always be token\\r\\n        uint256 mainRoutes;           // distributeCounts\\r\\n        uint256 complex;\\r\\n        uint256 parts;\\r\\n        bool allowPartial;\\r\\n        bool allowBurnchi;\\r\\n    }\\r\\n\\r\\n    /// @dev \\u8be2\\u4ef7 \\u8ba1\\u7b97\\u6700\\u4f73\\u5151\\u6362\\u8def\\u5f84\\u7684\\u5165\\u53c2\\r\\n    struct QuoteParams {\\r\\n        address to;\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint256 amountIn;\\r\\n        address[] midTokens;      // should always be token\\r\\n        uint256 mainRoutes;           // distributeCounts\\r\\n        uint256 complex;\\r\\n        uint256 parts;\\r\\n        // uint256 routes;           // distributeCounts\\r\\n        bool allowPartial;\\r\\n        bool allowBurnchi;\\r\\n        // uint256 tokenPriceGWei;\\r\\n        // address fromAddress;\\r\\n        // address dstReceiver;\\r\\n        // address[] midTokens;      // should always be token\\r\\n        // Exchange[]  exchanges;\\r\\n        // address[][] paths;        // \\u7531 midTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 path \\u5217\\u8868\\r\\n        // address[][] cpaths;       // \\u7531 midCTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 cpath \\u5217\\u8868\\r\\n        // SwapFlagMap flag;\\r\\n    }\\r\\n\\r\\n    // swap reserves; exchange rates\\r\\n    struct SwapReserveRates {\\r\\n        bool isEToken;\\r\\n        bool allowBurnchi;\\r\\n        bool allEbank;                  // \\u662f\\u5426\\u5168\\u90e8\\u90fd\\u7531 ebank \\u5151\\u6362\\r\\n        uint256 ebankAmt;\\r\\n        uint256 amountIn;\\r\\n        uint256 swapRoutes;             // \\u6700\\u7ec8\\u7ecf\\u8fc7\\u591a\\u5c11\\u4e2a route \\u6765\\u5151\\u6362\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        address etokenIn;\\r\\n        address etokenOut;\\r\\n        uint256 routes;                 // distributeCounts \\u4ea4\\u6613\\u6240\\u6570\\u91cf * \\u8def\\u5f84\\u6570\\u91cf\\r\\n        uint256 rateIn;\\r\\n        uint256 rateOut;\\r\\n        uint256[]  fees;\\r\\n        Exchange[]  exchanges;\\r\\n        address[][] paths;        // \\u7531 midTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 path \\u5217\\u8868\\r\\n        address[][] cpaths;       // \\u7531 midCTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 cpath \\u5217\\u8868\\r\\n        uint256[][][] reserves;     // [routes][path]\\r\\n        uint256[] distributes;    // \\u5404\\u4e2a swap \\u8def\\u5f84\\u5206\\u914d\\u7684\\u5151\\u6362\\u6570\\u91cf, \\u5bf9\\u4e8e ebank \\u662f etoken \\u7684\\u6570\\u91cf\\uff0c \\u5176\\u4ed6 swap \\u662f token \\u6570\\u91cf\\r\\n    }\\r\\n\\r\\n    struct UniswapRouterParam {\\r\\n        uint256 amount;\\r\\n        address contractAddr;\\r\\n        // address to;\\r\\n        address[] path;\\r\\n    }\\r\\n\\r\\n    struct CompoundRedeemParam {\\r\\n        uint256 amount;\\r\\n        // address to;\\r\\n        address ctoken;\\r\\n    }\\r\\n\\r\\n    struct UniswapPairParam {\\r\\n        uint256 amount;\\r\\n        address[] pairs;\\r\\n    }\\r\\n\\r\\n    // struct \\r\\n    struct StepExecuteParams {\\r\\n        uint256 flag;           // step execute flag \\u6307\\u793a\\u7528\\u54ea\\u79cd\\u6b65\\u9aa4\\u53bb\\u6267\\u884c\\r\\n        bytes   data;\\r\\n    }\\r\\n\\r\\n    /// @dev \\u5151\\u6362 \\u5165\\u53c2\\r\\n    struct SwapParams {\\r\\n        // address to;\\r\\n        // address tokenIn;\\r\\n        // address tokenOut;\\r\\n        // uint256 amountIn;\\r\\n        // uint256 amountOut;\\r\\n        // uint256 tokenPriceGWei;\\r\\n        // address fromAddress;\\r\\n        // address dstReceiver;\\r\\n        // address[] midTokens;  // should always be token\\r\\n        // SwapFlagMap flag;\\r\\n        // SwapFlagMap flag;\\r\\n        bool isEToken;\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint256 amountIn;\\r\\n        uint256 minAmt;\\r\\n        uint256 block;   // \\u8ba1\\u7b97\\u7ed3\\u679c\\u7684 block\\r\\n        StepExecuteParams[] steps;\\r\\n    }\\r\\n\\r\\n    /// @dev Exchange \\u4ea4\\u6613\\u6240\\u5408\\u7ea6\\u5730\\u5740\\u53ca\\u4ea4\\u6613\\u6240\\u7c7b\\u578b\\r\\n    struct Exchange {\\r\\n        uint exFlag;\\r\\n        address contractAddr;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev \\u8ba1\\u7b97\\u5404\\u4e2a\\u4ea4\\u6613\\u6240\\u7684\\u6bcf\\u4e2aparts\\u7684return\\r\\n    struct SwapDistributes {\\r\\n        bool        isCtoken;     // \\u4e70\\u5165\\u3001\\u5356\\u51fa\\u7684\\u5e01\\u662f\\u5426\\u662f ctoken\\r\\n        // bool     ctokenOut;    // \\u4e70\\u5230\\u7684\\u5e01\\u662f\\u5426\\u662f ctoken\\r\\n        address     to;           // \\u4ea4\\u6613\\u8005\\u5730\\u5740\\r\\n        address     tokenIn;\\r\\n        address     tokenOut;\\r\\n        uint256     parts;        // \\u4ea4\\u6613\\u91cf\\u62c6\\u5206\\u4e3a\\u591a\\u5c11\\u4efd\\r\\n        uint256     rateIn;       // token in exchange rate\\r\\n        uint256     rateOut;      // token out exchange rate\\r\\n        uint[]      amounts;      // split into parts\\r\\n        uint[]      cAmounts;     // mint to ctoken amounts\\r\\n        // address[]   midTokens;    // middle token list\\r\\n        // address[]   midCTokens;   // middle ctoken list\\r\\n        address[][] paths;        // \\u7531 midTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 path \\u5217\\u8868\\r\\n        address[][] cpaths;       // \\u7531 midCTokens \\u548c \\u590d\\u6742\\u5ea6\\u8ba1\\u7b97\\u5f97\\u5230\\u7684\\u6240\\u6709 cpath \\u5217\\u8868\\r\\n\\r\\n        uint[]      gases;          // gas \\u8d39\\u7528\\u4f30\\u7b97\\r\\n        uint[]      pathIdx;        // \\u4f7f\\u7528\\u7684 path \\u5e8f\\u53f7\\r\\n        uint[][]    distributes;    // \\u4e00\\u7ea7\\u4e3a\\u4ea4\\u6613\\u8def\\u5f84, \\u4e8c\\u7ea7\\u4e3a\\u8be5\\u4ea4\\u6613\\u8def\\u5f84\\u7684\\u6240\\u6709parts\\u5bf9\\u5e94\\u7684return\\r\\n        int256[][]  netDistributes; // distributes - gases\\r\\n        Exchange[]  exchanges;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x17bbfa793fdaae38aef1d421e8968f532629374c392dbb6d4e39a167d0506c47\",\"license\":\"MIT\"},\"contracts/swap/aggressive2/library/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant WAD = 10 ** 18;\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7d6656a8d66b238405e36506908726a329c023e7679a43c400e08a80e383d5fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive2/library/SwapFlag.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./DataTypes.sol\\\";\\r\\n\\r\\nlibrary SwapFlag {\\r\\n    uint256 public constant FLAG_TOKEN_IN_ETH          = 0x000000000100; // prettier-ignore\\r\\n    uint256 public constant FLAG_TOKEN_TOKEN           = 0x000000000200; // prettier-ignore\\r\\n    uint256 public constant FLAG_TOKEN_CTOKEN          = 0x000000000400; // prettier-ignore\\r\\n    uint256 public constant FLAG_TOKEN_OUT_ETH         = 0x000000000800; // prettier-ignore\\r\\n    // uint256 public constant FLAG_TOKEN_OUT_TOKEN       = 0x000000001000; // prettier-ignore\\r\\n    // uint256 public constant FLAG_TOKEN_OUT_CTOKEN      = 0x000000002000; // prettier-ignore\\r\\n    // uint256 public constant FLAG_TOKEN_OUT_CETH        = 0x0000000040; // prettier-ignore\\r\\n\\r\\n    uint256 internal constant _MASK_PARTS           = 0x00000000000000000000ff; // prettier-ignore\\r\\n    uint256 internal constant _MASK_MAIN_ROUTES     = 0x00ff000000000000000000; // prettier-ignore\\r\\n    uint256 internal constant _MASK_COMPLEX_LEVEL   = 0x0300000000000000000000; // prettier-ignore\\r\\n    uint256 internal constant _MASK_PARTIAL_FILL    = 0x0400000000000000000000; // prettier-ignore\\r\\n    uint256 internal constant _MASK_BURN_CHI        = 0x0800000000000000000000; // prettier-ignore\\r\\n\\r\\n    // uint256 internal constant _SHIFT_PARTS          = 64; // prettier-ignore\\r\\n    uint256 internal constant _SHIFT_MAIN_ROUTES    = 72; // prettier-ignore\\r\\n    uint256 internal constant _SHIFT_COMPLEX_LEVEL  = 80; // prettier-ignore\\r\\n\\r\\n    /// @dev if token in/out is token\\r\\n    function tokenIsToken(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & FLAG_TOKEN_TOKEN) != 0;\\r\\n    }\\r\\n\\r\\n    function tokenIsToken(uint flag) public pure returns (bool) {\\r\\n        return (flag & FLAG_TOKEN_TOKEN) != 0;\\r\\n    }\\r\\n    \\r\\n    /// @dev if token in/out is ctoken\\r\\n    function tokenIsCToken(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & FLAG_TOKEN_CTOKEN) != 0;\\r\\n    }\\r\\n\\r\\n    /// @dev if token in is ETH\\r\\n    function tokenInIsETH(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & FLAG_TOKEN_IN_ETH) != 0;\\r\\n    }\\r\\n\\r\\n    /// @dev if token out is ETH\\r\\n    function tokenOutIsETH(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & FLAG_TOKEN_OUT_ETH) != 0;\\r\\n    }\\r\\n\\r\\n    /// @dev get param split parts\\r\\n    function getParts(DataTypes.SwapFlagMap memory self) public pure returns (uint256) {\\r\\n        return (self.data & _MASK_PARTS);\\r\\n    }\\r\\n\\r\\n    /// @dev get param main routes max port\\r\\n    function getMainRoutes(DataTypes.SwapFlagMap memory self) public pure returns (uint256) {\\r\\n        return (self.data & _MASK_MAIN_ROUTES) >> _SHIFT_MAIN_ROUTES;\\r\\n    }\\r\\n\\r\\n    /// @dev get param complex level\\r\\n    function getComplexLevel(DataTypes.SwapFlagMap memory self) public pure returns (uint256) {\\r\\n        return (self.data & _MASK_COMPLEX_LEVEL) >> _SHIFT_COMPLEX_LEVEL;\\r\\n    }\\r\\n\\r\\n    /// @dev get param allow partial fill\\r\\n    function allowPartialFill(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & _MASK_PARTIAL_FILL) != 0;\\r\\n    }\\r\\n\\r\\n    /// @dev get param burn CHI\\r\\n    function burnCHI(DataTypes.SwapFlagMap memory self) public pure returns (bool) {\\r\\n        return (self.data & _MASK_BURN_CHI) != 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbcaae5a318ea7e7602be9123e1888e361a728392bf7c99fcd6c5fcae19b6466c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61276d610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101ce5760003560e01c80637ccea13911610103578063baef8529116100a1578063d45314401161007b578063d4531440146103a3578063edc4593c146103c3578063f38ff874146103d6578063fa32784b146101d3576101ce565b8063baef8529146102dd578063c21eedc3146101d3578063cb8b387714610390576101ce565b80638e06405c116100dd5780638e06405c1461033557806392327f3f1461035557806392c71f4e1461035d578063a076618314610370576101ce565b80637ccea139146102f8578063852c8cc11461031a57806388db6b761461032d576101ce565b8063515a96151161017057806363edc65a1161014a57806363edc65a146102b757806365f93459146102ca5780636d682539146102dd5780637bba8b05146102e5576101ce565b8063515a96151461026457806355c469e11461027757806358d0dd2914610297576101ce565b806329675db9116101ac57806329675db9146101d35780634c1a86b6146102115780634c5f70041461023157806350ef7c0914610251576101ce565b806311e6dbae146101d35780631e426684146101d3578063275f5396146101f1575b600080fd5b6101db6103e9565b6040516101e891906126b7565b60405180910390f35b6102046101ff3660046120df565b6103ee565b6040516101e89190612541565b61022461021f366004612366565b61073d565b6040516101e891906125a7565b81801561023d57600080fd5b506101db61024c36600461203f565b610759565b6101db61025f3660046121a0565b610849565b6101db61027236600461228c565b610c72565b61028a6102853660046122c6565b610d17565b6040516101e89190612594565b8180156102a357600080fd5b506101db6102b2366004612261565b610df2565b6101db6102c5366004612396565b610f92565b61028a6102d836600461220a565b610fbe565b6101db61107f565b61028a6102f336600461220a565b611084565b81801561030457600080fd5b50610318610313366004612261565b61111f565b005b61031861032836600461203f565b61119a565b6101db61119d565b81801561034157600080fd5b506101db610350366004612261565b6111a2565b6101db611202565b6101db61036b36600461203f565b611207565b61038361037e366004612077565b6113a2565b6040516101e891906124b2565b61028a61039e36600461212d565b61149f565b8180156103af57600080fd5b506103186103be366004612261565b611958565b6102246103d1366004612366565b6119f6565b6103186103e4366004612261565b611a1f565b600181565b80516060908067ffffffffffffffff8111801561040a57600080fd5b5060405190808252806020026020018201604052801561043e57816020015b60608152602001906001900390816104295790505b5091506000846001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561047c57600080fd5b505afa158015610490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b4919061205b565b905060005b60018303811015610734576000826001600160a01b031663e6a439058784815181106104e157fe5b60200260200101518885600101815181106104f857fe5b60200260200101516040518363ffffffff1660e01b815260040161051d929190612475565b60206040518083038186803b15801561053557600080fd5b505afa158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d919061205b565b6040805160028082526060808301845293945090916020830190803683370190505090506001600160a01b0382166105be57808684815181106105ac57fe5b6020026020010181905250505061072c565b8683815181106105ca57fe5b60200260200101516001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016105fd9190612461565b60206040518083038186803b15801561061557600080fd5b505afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d919061237e565b8160008151811061065a57fe5b60200260200101818152505086836001018151811061067557fe5b60200260200101516001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016106a89190612461565b60206040518083038186803b1580156106c057600080fd5b505afa1580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f8919061237e565b8160018151811061070557fe5b6020026020010181815250508086848151811061071e57fe5b602002602001018190525050505b6001016104b9565b50505092915050565b6000600382141561075057506001610754565b5060005b919050565b6000816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561079657600080fd5b505af11580156107aa573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03851692506370a0823191506107f3903090600401612461565b60206040518083038186803b15801561080b57600080fd5b505afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610843919061237e565b92915050565b600080856001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd919061205b565b90506060855167ffffffffffffffff811180156108d957600080fd5b50604051908082528060200260200182016040528015610903578160200160208202803683370190505b509050848160008151811061091457fe5b60200260200101818152505060005b6001875103811015610c4c576000836001600160a01b031663e6a4390589848151811061094c57fe5b60200260200101518a856001018151811061096357fe5b60200260200101516040518363ffffffff1660e01b8152600401610988929190612475565b60206040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d8919061205b565b90506001600160a01b0381166109f5576000945050505050610c6a565b600080600080876001600160a01b0316637f33ffc38d8881518110610a1657fe5b60200260200101518e8960010181518110610a2d57fe5b60200260200101518d6040518463ffffffff1660e01b8152600401610a549392919061248f565b60806040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa491906123ee565b93509350935093508360001480610ab9575082155b15610acf57600098505050505050505050610c6a565b8015610b8a57876001600160a01b0316630b64aa63888881518110610af057fe5b60200260200101518686866040518563ffffffff1660e01b8152600401610b1a94939291906126c0565b60206040518083038186803b158015610b3257600080fd5b505afa158015610b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6a919061237e565b878760010181518110610b7957fe5b602002602001018181525050610c3b565b876001600160a01b0316636e2b0fa7888881518110610ba557fe5b60200260200101518686866040518563ffffffff1660e01b8152600401610bcf94939291906126c0565b60206040518083038186803b158015610be757600080fd5b505afa158015610bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1f919061237e565b878760010181518110610c2e57fe5b6020026020010181815250505b505060019093019250610923915050565b5080600182510381518110610c5d57fe5b6020026020010151925050505b949350505050565b6040517f5e0d443f0000000000000000000000000000000000000000000000000000000081526000906001600160a01b03861690635e0d443f90610cbe908790879087906004016125b2565b60206040518083038186803b158015610cd657600080fd5b505afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e919061237e565b95945050505050565b83516020850151606091906001821480610d315750600282145b15610d4857610d4181878761149f565b9250610de8565b6003821415610de857845160010167ffffffffffffffff81118015610d6c57600080fd5b50604051908082528060200260200182016040528015610d96578160200160208202803683370190505b50925060005b8551811015610de657610dc48288888481518110610db657fe5b602002602001015188610849565b848260010181518110610dd357fe5b6020908102919091010152600101610d9c565b505b5050949350505050565b600080836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610e219190612461565b60206040518083038186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e71919061237e565b6040517fa0712d680000000000000000000000000000000000000000000000000000000081529091506001600160a01b0385169063a0712d6890610eb99086906004016126b7565b602060405180830381600087803b158015610ed357600080fd5b505af1158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b919061237e565b50610c6a81856001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f3c9190612461565b60206040518083038186803b158015610f5457600080fd5b505afa158015610f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8c919061237e565b90611a23565b6000610f9d846119f6565b15610fb357610fac8383611a65565b9050610fb7565b5060015b9392505050565b60606000610fcb85611207565b905060608367ffffffffffffffff81118015610fe657600080fd5b50604051908082528060200260200182016040528015611010578160200160208202803683370190505b50905060005b848110156110755761105683611050670de0b6b3a764000089858151811061103a57fe5b6020026020010151611abf90919063ffffffff16565b90611b02565b82828151811061106257fe5b6020908102919091010152600101611016565b5095945050505050565b600381565b6060600061109185611207565b905060608367ffffffffffffffff811180156110ac57600080fd5b506040519080825280602002602001820160405280156110d6578160200160208202803683370190505b50905060005b8481101561107557611100670de0b6b3a76400006110508589858151811061103a57fe5b82828151811061110c57fe5b60209081029190910101526001016110dc565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b03831690632e1a7d4d906111649084906004016126b7565b600060405180830381600087803b15801561117e57600080fd5b505af1158015611192573d6000803e3d6000fd5b505050505050565b50565b600481565b6000826001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111df57600080fd5b505af11580156111f3573d6000803e3d6000fd5b5050505050610fb78383610df2565b600281565b600080826001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561124357600080fd5b505afa158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b919061237e565b90506000836001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b857600080fd5b505afa1580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f0919061237e565b90506000846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561132d57600080fd5b505afa158015611341573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611365919061237e565b905060006113734383611a23565b9050600061138b826113858787611abf565b90611abf565b90506113978582611b44565b979650505050505050565b815160609060038311156113b557600392505b8083106113c0578092505b60006113cc8285611a65565b905060008167ffffffffffffffff811180156113e757600080fd5b5060405190808252806020026020018201604052801561141b57816020015b60608152602001906001900390816114065790505b506040805160018082528183019092529195506060919060208083019080368337019050509050888160008151811061145057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b868111611492576114888684838c8c87611b69565b9250600101611473565b5050505050949350505050565b8151606090818167ffffffffffffffff811180156114bc57600080fd5b506040519080825280602002602001820160405280156114e6578160200160208202803683370190505b509050835160010167ffffffffffffffff8111801561150457600080fd5b5060405190808252806020026020018201604052801561152e578160200160208202803683370190505b5092506000866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561156c57600080fd5b505afa158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a4919061205b565b905060005b6001840381101561181b576000826001600160a01b031663e6a439058984815181106115d157fe5b60200260200101518a85600101815181106115e857fe5b60200260200101516040518363ffffffff1660e01b815260040161160d929190612475565b60206040518083038186803b15801561162557600080fd5b505afa158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d919061205b565b90506001600160a01b038116611677575050505050610fb7565b87828151811061168357fe5b60200260200101516001600160a01b03166370a08231826040518263ffffffff1660e01b81526004016116b69190612461565b60206040518083038186803b1580156116ce57600080fd5b505afa1580156116e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611706919061237e565b84838151811061171257fe5b60200260200101818152505087826001018151811061172d57fe5b60200260200101516001600160a01b03166370a08231826040518263ffffffff1660e01b81526004016117609190612461565b60206040518083038186803b15801561177857600080fd5b505afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b0919061237e565b8483600101815181106117bf57fe5b6020026020010181815250508382815181106117d757fe5b60200260200101516000148061180357508382600101815181106117f757fe5b60200260200101516000145b15611812575050505050610fb7565b506001016115a9565b5060608367ffffffffffffffff8111801561183557600080fd5b5060405190808252806020026020018201604052801561185f578160200160208202803683370190505b50905060005b865181101561194c5786818151811061187a57fe5b60200260200101518260008151811061188f57fe5b60200260200101818152505060005b60018603811015611912576118f08582815181106118b857fe5b60200260200101518683600101815181106118cf57fe5b60200260200101518584815181106118e357fe5b6020026020010151611e6e565b8382600101815181106118ff57fe5b602090810291909101015260010161189e565b5081600186038151811061192257fe5b602002602001015186826001018151811061193957fe5b6020908102919091010152600101611865565b50505050509392505050565b6040517fdb006a750000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063db006a759061199d9084906004016126b7565b606060405180830381600087803b1580156119b757600080fd5b505af11580156119cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ef91906123c1565b5050505050565b60006001821480611a075750600282145b80611a125750600382145b1561075057506001610754565b5050565b6000610fb783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611eb1565b600060016003831115611a7757600392505b838310611a82578392505b60015b838111611ab757600160005b82811015611aa9578087039190910290600101611a91565b509190910190600101611a85565b509392505050565b600082611ace57506000610843565b82820282848281611adb57fe5b0414610fb75760405162461bcd60e51b8152600401611af99061265a565b60405180910390fd5b6000610fb783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611edd565b600082820183811015610fb75760405162461bcd60e51b8152600401611af990612623565b600084611c5c576060825160010167ffffffffffffffff81118015611b8d57600080fd5b50604051908082528060200260200182016040528015611bb7578160200160208202803683370190505b50905060005b8351811015611c0657838181518110611bd257fe5b6020026020010151828281518110611be657fe5b6001600160a01b0390921660209283029190910190910152600101611bbd565b508481600183510381518110611c1857fe5b60200260200101906001600160a01b031690816001600160a01b03168152505080888881518110611c4557fe5b602002602001018190525086600101915050611e64565b60005b8351811015611e5f576060835160010167ffffffffffffffff81118015611c8557600080fd5b50604051908082528060200260200182016040528015611caf578160200160208202803683370190505b50905060005b8451811015611cfe57848181518110611cca57fe5b6020026020010151828281518110611cde57fe5b6001600160a01b0390921660209283029190910190910152600101611cb5565b506000858381518110611d0d57fe5b602002602001015190508082600184510381518110611d2857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000805b8751811015611d8b576000888281518110611d6357fe5b60200260200101519050611d778582611f14565b611d82576001909201915b50600101611d4c565b5060608167ffffffffffffffff81118015611da557600080fd5b50604051908082528060200260200182016040528015611dcf578160200160208202803683370190505b5090506000805b8951811015611e3a5760008a8281518110611ded57fe5b60200260200101519050611e018782611f14565b611e315780848481518110611e1257fe5b6001600160a01b03909216602092830291909101909101526001909201915b50600101611dd6565b50611e4c8d8d60018e038d868a611b69565b9b505060019094019350611c5f92505050565b508590505b9695505050505050565b600081611e7d57506000610fb7565b610c6a611ea1611e8f846103e5611abf565b611e9b876103e8611abf565b90611b44565b6110506103e56113858688611abf565b60008184841115611ed55760405162461bcd60e51b8152600401611af991906125d0565b505050900390565b60008183611efe5760405162461bcd60e51b8152600401611af991906125d0565b506000838581611f0a57fe5b0495945050505050565b6000805b8351811015611f6057838181518110611f2d57fe5b60200260200101516001600160a01b0316836001600160a01b03161415611f58576001915050610843565b600101611f18565b5060009392505050565b600082601f830112611f7a578081fd5b8135611f8d611f8882612702565b6126db565b818152915060208083019084810181840286018201871015611fae57600080fd5b60005b84811015611fd6578135611fc481612722565b84529282019290820190600101611fb1565b505050505092915050565b600082601f830112611ff1578081fd5b8135611fff611f8882612702565b81815291506020808301908481018184028601820187101561202057600080fd5b60005b84811015611fd657813584529282019290820190600101612023565b600060208284031215612050578081fd5b8135610fb781612722565b60006020828403121561206c578081fd5b8151610fb781612722565b6000806000806080858703121561208c578283fd5b843561209781612722565b935060208501356120a781612722565b9250604085013567ffffffffffffffff8111156120c2578283fd5b6120ce87828801611f6a565b949793965093946060013593505050565b600080604083850312156120f1578182fd5b82356120fc81612722565b9150602083013567ffffffffffffffff811115612117578182fd5b61212385828601611f6a565b9150509250929050565b600080600060608486031215612141578283fd5b833561214c81612722565b9250602084013567ffffffffffffffff80821115612168578384fd5b61217487838801611f6a565b93506040860135915080821115612189578283fd5b5061219686828701611fe1565b9150509250925092565b600080600080608085870312156121b5578384fd5b84356121c081612722565b9350602085013567ffffffffffffffff8111156121db578384fd5b6121e787828801611f6a565b9350506040850135915060608501356121ff81612722565b939692955090935050565b60008060006060848603121561221e578283fd5b833561222981612722565b9250602084013567ffffffffffffffff811115612244578283fd5b61225086828701611fe1565b925050604084013590509250925092565b60008060408385031215612273578182fd5b823561227e81612722565b946020939093013593505050565b600080600080608085870312156122a1578384fd5b84356122ac81612722565b966020860135965060408601359560600135945092505050565b60008060008084860360a08112156122dc578283fd5b60408112156122e9578283fd5b506122f460406126db565b85358152602086013561230681612722565b60208201529350604085013567ffffffffffffffff80821115612327578384fd5b61233388838901611f6a565b94506060870135915080821115612348578384fd5b5061235587828801611fe1565b92505060808501356121ff81612722565b600060208284031215612377578081fd5b5035919050565b60006020828403121561238f578081fd5b5051919050565b6000806000606084860312156123aa578081fd5b505081359360208301359350604090920135919050565b6000806000606084860312156123d5578081fd5b8351925060208401519150604084015190509250925092565b60008060008060808587031215612403578182fd5b845193506020850151925060408501519150606085015180151581146121ff578182fd5b6000815180845260208085019450808401835b838110156124565781518752958201959082019060010161243a565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561253457878503603f19018452815180518087529087019087870190895b8181101561251e5783516001600160a01b0316835292890192918901916001016124f9565b50909650505092850192908501906001016124d7565b5092979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561253457603f19888603018452612582858351612427565b94509285019290850190600101612566565b600060208252610fb76020830184612427565b901515815260200190565b600f93840b81529190920b6020820152604081019190915260600190565b6000602080835283518082850152825b818110156125fc578581018301518582016040015282016125e0565b8181111561260d5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff811182821017156126fa57600080fd5b604052919050565b600067ffffffffffffffff821115612718578081fd5b5060209081020190565b6001600160a01b038116811461119a57600080fdfea264697066735822122007c7d95a4b5b00f25efaa2be88317b03a533d0d44e45a45ac896b64ebc2bbbba64736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101ce5760003560e01c80637ccea13911610103578063baef8529116100a1578063d45314401161007b578063d4531440146103a3578063edc4593c146103c3578063f38ff874146103d6578063fa32784b146101d3576101ce565b8063baef8529146102dd578063c21eedc3146101d3578063cb8b387714610390576101ce565b80638e06405c116100dd5780638e06405c1461033557806392327f3f1461035557806392c71f4e1461035d578063a076618314610370576101ce565b80637ccea139146102f8578063852c8cc11461031a57806388db6b761461032d576101ce565b8063515a96151161017057806363edc65a1161014a57806363edc65a146102b757806365f93459146102ca5780636d682539146102dd5780637bba8b05146102e5576101ce565b8063515a96151461026457806355c469e11461027757806358d0dd2914610297576101ce565b806329675db9116101ac57806329675db9146101d35780634c1a86b6146102115780634c5f70041461023157806350ef7c0914610251576101ce565b806311e6dbae146101d35780631e426684146101d3578063275f5396146101f1575b600080fd5b6101db6103e9565b6040516101e891906126b7565b60405180910390f35b6102046101ff3660046120df565b6103ee565b6040516101e89190612541565b61022461021f366004612366565b61073d565b6040516101e891906125a7565b81801561023d57600080fd5b506101db61024c36600461203f565b610759565b6101db61025f3660046121a0565b610849565b6101db61027236600461228c565b610c72565b61028a6102853660046122c6565b610d17565b6040516101e89190612594565b8180156102a357600080fd5b506101db6102b2366004612261565b610df2565b6101db6102c5366004612396565b610f92565b61028a6102d836600461220a565b610fbe565b6101db61107f565b61028a6102f336600461220a565b611084565b81801561030457600080fd5b50610318610313366004612261565b61111f565b005b61031861032836600461203f565b61119a565b6101db61119d565b81801561034157600080fd5b506101db610350366004612261565b6111a2565b6101db611202565b6101db61036b36600461203f565b611207565b61038361037e366004612077565b6113a2565b6040516101e891906124b2565b61028a61039e36600461212d565b61149f565b8180156103af57600080fd5b506103186103be366004612261565b611958565b6102246103d1366004612366565b6119f6565b6103186103e4366004612261565b611a1f565b600181565b80516060908067ffffffffffffffff8111801561040a57600080fd5b5060405190808252806020026020018201604052801561043e57816020015b60608152602001906001900390816104295790505b5091506000846001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561047c57600080fd5b505afa158015610490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b4919061205b565b905060005b60018303811015610734576000826001600160a01b031663e6a439058784815181106104e157fe5b60200260200101518885600101815181106104f857fe5b60200260200101516040518363ffffffff1660e01b815260040161051d929190612475565b60206040518083038186803b15801561053557600080fd5b505afa158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d919061205b565b6040805160028082526060808301845293945090916020830190803683370190505090506001600160a01b0382166105be57808684815181106105ac57fe5b6020026020010181905250505061072c565b8683815181106105ca57fe5b60200260200101516001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016105fd9190612461565b60206040518083038186803b15801561061557600080fd5b505afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d919061237e565b8160008151811061065a57fe5b60200260200101818152505086836001018151811061067557fe5b60200260200101516001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016106a89190612461565b60206040518083038186803b1580156106c057600080fd5b505afa1580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f8919061237e565b8160018151811061070557fe5b6020026020010181815250508086848151811061071e57fe5b602002602001018190525050505b6001016104b9565b50505092915050565b6000600382141561075057506001610754565b5060005b919050565b6000816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561079657600080fd5b505af11580156107aa573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03851692506370a0823191506107f3903090600401612461565b60206040518083038186803b15801561080b57600080fd5b505afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610843919061237e565b92915050565b600080856001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd919061205b565b90506060855167ffffffffffffffff811180156108d957600080fd5b50604051908082528060200260200182016040528015610903578160200160208202803683370190505b509050848160008151811061091457fe5b60200260200101818152505060005b6001875103811015610c4c576000836001600160a01b031663e6a4390589848151811061094c57fe5b60200260200101518a856001018151811061096357fe5b60200260200101516040518363ffffffff1660e01b8152600401610988929190612475565b60206040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d8919061205b565b90506001600160a01b0381166109f5576000945050505050610c6a565b600080600080876001600160a01b0316637f33ffc38d8881518110610a1657fe5b60200260200101518e8960010181518110610a2d57fe5b60200260200101518d6040518463ffffffff1660e01b8152600401610a549392919061248f565b60806040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa491906123ee565b93509350935093508360001480610ab9575082155b15610acf57600098505050505050505050610c6a565b8015610b8a57876001600160a01b0316630b64aa63888881518110610af057fe5b60200260200101518686866040518563ffffffff1660e01b8152600401610b1a94939291906126c0565b60206040518083038186803b158015610b3257600080fd5b505afa158015610b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6a919061237e565b878760010181518110610b7957fe5b602002602001018181525050610c3b565b876001600160a01b0316636e2b0fa7888881518110610ba557fe5b60200260200101518686866040518563ffffffff1660e01b8152600401610bcf94939291906126c0565b60206040518083038186803b158015610be757600080fd5b505afa158015610bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1f919061237e565b878760010181518110610c2e57fe5b6020026020010181815250505b505060019093019250610923915050565b5080600182510381518110610c5d57fe5b6020026020010151925050505b949350505050565b6040517f5e0d443f0000000000000000000000000000000000000000000000000000000081526000906001600160a01b03861690635e0d443f90610cbe908790879087906004016125b2565b60206040518083038186803b158015610cd657600080fd5b505afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e919061237e565b95945050505050565b83516020850151606091906001821480610d315750600282145b15610d4857610d4181878761149f565b9250610de8565b6003821415610de857845160010167ffffffffffffffff81118015610d6c57600080fd5b50604051908082528060200260200182016040528015610d96578160200160208202803683370190505b50925060005b8551811015610de657610dc48288888481518110610db657fe5b602002602001015188610849565b848260010181518110610dd357fe5b6020908102919091010152600101610d9c565b505b5050949350505050565b600080836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610e219190612461565b60206040518083038186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e71919061237e565b6040517fa0712d680000000000000000000000000000000000000000000000000000000081529091506001600160a01b0385169063a0712d6890610eb99086906004016126b7565b602060405180830381600087803b158015610ed357600080fd5b505af1158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b919061237e565b50610c6a81856001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f3c9190612461565b60206040518083038186803b158015610f5457600080fd5b505afa158015610f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8c919061237e565b90611a23565b6000610f9d846119f6565b15610fb357610fac8383611a65565b9050610fb7565b5060015b9392505050565b60606000610fcb85611207565b905060608367ffffffffffffffff81118015610fe657600080fd5b50604051908082528060200260200182016040528015611010578160200160208202803683370190505b50905060005b848110156110755761105683611050670de0b6b3a764000089858151811061103a57fe5b6020026020010151611abf90919063ffffffff16565b90611b02565b82828151811061106257fe5b6020908102919091010152600101611016565b5095945050505050565b600381565b6060600061109185611207565b905060608367ffffffffffffffff811180156110ac57600080fd5b506040519080825280602002602001820160405280156110d6578160200160208202803683370190505b50905060005b8481101561107557611100670de0b6b3a76400006110508589858151811061103a57fe5b82828151811061110c57fe5b60209081029190910101526001016110dc565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b03831690632e1a7d4d906111649084906004016126b7565b600060405180830381600087803b15801561117e57600080fd5b505af1158015611192573d6000803e3d6000fd5b505050505050565b50565b600481565b6000826001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111df57600080fd5b505af11580156111f3573d6000803e3d6000fd5b5050505050610fb78383610df2565b600281565b600080826001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561124357600080fd5b505afa158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b919061237e565b90506000836001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b857600080fd5b505afa1580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f0919061237e565b90506000846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561132d57600080fd5b505afa158015611341573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611365919061237e565b905060006113734383611a23565b9050600061138b826113858787611abf565b90611abf565b90506113978582611b44565b979650505050505050565b815160609060038311156113b557600392505b8083106113c0578092505b60006113cc8285611a65565b905060008167ffffffffffffffff811180156113e757600080fd5b5060405190808252806020026020018201604052801561141b57816020015b60608152602001906001900390816114065790505b506040805160018082528183019092529195506060919060208083019080368337019050509050888160008151811061145057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b868111611492576114888684838c8c87611b69565b9250600101611473565b5050505050949350505050565b8151606090818167ffffffffffffffff811180156114bc57600080fd5b506040519080825280602002602001820160405280156114e6578160200160208202803683370190505b509050835160010167ffffffffffffffff8111801561150457600080fd5b5060405190808252806020026020018201604052801561152e578160200160208202803683370190505b5092506000866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561156c57600080fd5b505afa158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a4919061205b565b905060005b6001840381101561181b576000826001600160a01b031663e6a439058984815181106115d157fe5b60200260200101518a85600101815181106115e857fe5b60200260200101516040518363ffffffff1660e01b815260040161160d929190612475565b60206040518083038186803b15801561162557600080fd5b505afa158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d919061205b565b90506001600160a01b038116611677575050505050610fb7565b87828151811061168357fe5b60200260200101516001600160a01b03166370a08231826040518263ffffffff1660e01b81526004016116b69190612461565b60206040518083038186803b1580156116ce57600080fd5b505afa1580156116e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611706919061237e565b84838151811061171257fe5b60200260200101818152505087826001018151811061172d57fe5b60200260200101516001600160a01b03166370a08231826040518263ffffffff1660e01b81526004016117609190612461565b60206040518083038186803b15801561177857600080fd5b505afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b0919061237e565b8483600101815181106117bf57fe5b6020026020010181815250508382815181106117d757fe5b60200260200101516000148061180357508382600101815181106117f757fe5b60200260200101516000145b15611812575050505050610fb7565b506001016115a9565b5060608367ffffffffffffffff8111801561183557600080fd5b5060405190808252806020026020018201604052801561185f578160200160208202803683370190505b50905060005b865181101561194c5786818151811061187a57fe5b60200260200101518260008151811061188f57fe5b60200260200101818152505060005b60018603811015611912576118f08582815181106118b857fe5b60200260200101518683600101815181106118cf57fe5b60200260200101518584815181106118e357fe5b6020026020010151611e6e565b8382600101815181106118ff57fe5b602090810291909101015260010161189e565b5081600186038151811061192257fe5b602002602001015186826001018151811061193957fe5b6020908102919091010152600101611865565b50505050509392505050565b6040517fdb006a750000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063db006a759061199d9084906004016126b7565b606060405180830381600087803b1580156119b757600080fd5b505af11580156119cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ef91906123c1565b5050505050565b60006001821480611a075750600282145b80611a125750600382145b1561075057506001610754565b5050565b6000610fb783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611eb1565b600060016003831115611a7757600392505b838310611a82578392505b60015b838111611ab757600160005b82811015611aa9578087039190910290600101611a91565b509190910190600101611a85565b509392505050565b600082611ace57506000610843565b82820282848281611adb57fe5b0414610fb75760405162461bcd60e51b8152600401611af99061265a565b60405180910390fd5b6000610fb783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611edd565b600082820183811015610fb75760405162461bcd60e51b8152600401611af990612623565b600084611c5c576060825160010167ffffffffffffffff81118015611b8d57600080fd5b50604051908082528060200260200182016040528015611bb7578160200160208202803683370190505b50905060005b8351811015611c0657838181518110611bd257fe5b6020026020010151828281518110611be657fe5b6001600160a01b0390921660209283029190910190910152600101611bbd565b508481600183510381518110611c1857fe5b60200260200101906001600160a01b031690816001600160a01b03168152505080888881518110611c4557fe5b602002602001018190525086600101915050611e64565b60005b8351811015611e5f576060835160010167ffffffffffffffff81118015611c8557600080fd5b50604051908082528060200260200182016040528015611caf578160200160208202803683370190505b50905060005b8451811015611cfe57848181518110611cca57fe5b6020026020010151828281518110611cde57fe5b6001600160a01b0390921660209283029190910190910152600101611cb5565b506000858381518110611d0d57fe5b602002602001015190508082600184510381518110611d2857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000805b8751811015611d8b576000888281518110611d6357fe5b60200260200101519050611d778582611f14565b611d82576001909201915b50600101611d4c565b5060608167ffffffffffffffff81118015611da557600080fd5b50604051908082528060200260200182016040528015611dcf578160200160208202803683370190505b5090506000805b8951811015611e3a5760008a8281518110611ded57fe5b60200260200101519050611e018782611f14565b611e315780848481518110611e1257fe5b6001600160a01b03909216602092830291909101909101526001909201915b50600101611dd6565b50611e4c8d8d60018e038d868a611b69565b9b505060019094019350611c5f92505050565b508590505b9695505050505050565b600081611e7d57506000610fb7565b610c6a611ea1611e8f846103e5611abf565b611e9b876103e8611abf565b90611b44565b6110506103e56113858688611abf565b60008184841115611ed55760405162461bcd60e51b8152600401611af991906125d0565b505050900390565b60008183611efe5760405162461bcd60e51b8152600401611af991906125d0565b506000838581611f0a57fe5b0495945050505050565b6000805b8351811015611f6057838181518110611f2d57fe5b60200260200101516001600160a01b0316836001600160a01b03161415611f58576001915050610843565b600101611f18565b5060009392505050565b600082601f830112611f7a578081fd5b8135611f8d611f8882612702565b6126db565b818152915060208083019084810181840286018201871015611fae57600080fd5b60005b84811015611fd6578135611fc481612722565b84529282019290820190600101611fb1565b505050505092915050565b600082601f830112611ff1578081fd5b8135611fff611f8882612702565b81815291506020808301908481018184028601820187101561202057600080fd5b60005b84811015611fd657813584529282019290820190600101612023565b600060208284031215612050578081fd5b8135610fb781612722565b60006020828403121561206c578081fd5b8151610fb781612722565b6000806000806080858703121561208c578283fd5b843561209781612722565b935060208501356120a781612722565b9250604085013567ffffffffffffffff8111156120c2578283fd5b6120ce87828801611f6a565b949793965093946060013593505050565b600080604083850312156120f1578182fd5b82356120fc81612722565b9150602083013567ffffffffffffffff811115612117578182fd5b61212385828601611f6a565b9150509250929050565b600080600060608486031215612141578283fd5b833561214c81612722565b9250602084013567ffffffffffffffff80821115612168578384fd5b61217487838801611f6a565b93506040860135915080821115612189578283fd5b5061219686828701611fe1565b9150509250925092565b600080600080608085870312156121b5578384fd5b84356121c081612722565b9350602085013567ffffffffffffffff8111156121db578384fd5b6121e787828801611f6a565b9350506040850135915060608501356121ff81612722565b939692955090935050565b60008060006060848603121561221e578283fd5b833561222981612722565b9250602084013567ffffffffffffffff811115612244578283fd5b61225086828701611fe1565b925050604084013590509250925092565b60008060408385031215612273578182fd5b823561227e81612722565b946020939093013593505050565b600080600080608085870312156122a1578384fd5b84356122ac81612722565b966020860135965060408601359560600135945092505050565b60008060008084860360a08112156122dc578283fd5b60408112156122e9578283fd5b506122f460406126db565b85358152602086013561230681612722565b60208201529350604085013567ffffffffffffffff80821115612327578384fd5b61233388838901611f6a565b94506060870135915080821115612348578384fd5b5061235587828801611fe1565b92505060808501356121ff81612722565b600060208284031215612377578081fd5b5035919050565b60006020828403121561238f578081fd5b5051919050565b6000806000606084860312156123aa578081fd5b505081359360208301359350604090920135919050565b6000806000606084860312156123d5578081fd5b8351925060208401519150604084015190509250925092565b60008060008060808587031215612403578182fd5b845193506020850151925060408501519150606085015180151581146121ff578182fd5b6000815180845260208085019450808401835b838110156124565781518752958201959082019060010161243a565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561253457878503603f19018452815180518087529087019087870190895b8181101561251e5783516001600160a01b0316835292890192918901916001016124f9565b50909650505092850192908501906001016124d7565b5092979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561253457603f19888603018452612582858351612427565b94509285019290850190600101612566565b600060208252610fb76020830184612427565b901515815260200190565b600f93840b81529190920b6020820152604081019190915260600190565b6000602080835283518082850152825b818110156125fc578581018301518582016040015282016125e0565b8181111561260d5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff811182821017156126fa57600080fd5b604052919050565b600067ffffffffffffffff821115612718578081fd5b5060209081020190565b6001600160a01b038116811461119a57600080fdfea264697066735822122007c7d95a4b5b00f25efaa2be88317b03a533d0d44e45a45ac896b64ebc2bbbba64736f6c634300060c0033",
  "devdoc": {
    "author": "ebankex",
    "details": "Exchanges are used for aggressive swap within multi swap exchanges.*",
    "kind": "dev",
    "methods": {
      "aaveDepositToken(address)": {
        "details": "aave deposit token"
      },
      "aaveWithdrawToken(address,uint256)": {
        "details": "withdraw aave token"
      },
      "calcCTokenExchangeRate(ICToken)": {
        "details": "计算 ctoken 的 exchange rate"
      },
      "calcDistributes(DataTypes.Exchange,address[],uint256[],address)": {
        "details": "calcDistributes calc swap exchange"
      },
      "compoundMintETH(address,uint256)": {
        "details": "compund mint ETH"
      },
      "compoundRedeemCToken(address,uint256)": {
        "details": "compoundRedeemCToken redeem compound token",
        "params": {
          "amount": "amount to redeem",
          "ctoken": "compund token"
        }
      },
      "convertCompoundCtokenMinted(address,uint256[],uint256)": {
        "details": "计算 token 能够 mint 得到多少 ctoken"
      },
      "convertCompoundTokenRedeemed(address,uint256[],uint256)": {
        "details": "计算 ctoken 能够 redeem 得到多少 token"
      },
      "curveSwap(address,uint256,uint256,uint256)": {
        "details": "swap stable coin in curve"
      },
      "ebankSwap(address,address[],uint256,address)": {
        "details": "ebank exchange"
      }
    },
    "title": "Exchanges library 计算能够 mint 、赎回、兑换多少",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Provides data types and functions to perform step swap calculations",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}