{
  "address": "0x4141e1C7Fc88Ff68F567ACac71E76da3267B41B7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "factories",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "destToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "midTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "parts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "destTokenEthPriceTimesGasPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct OneSplit.Args",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "getExpectedReturnWithGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "estimateGasAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "distribution",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_factories",
          "type": "address[]"
        }
      ],
      "name": "resetFactories",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x66d93179b9190e30be5cd2d2538784e2685292d25972ce0d5b3d382b23ff1fe3",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x4141e1C7Fc88Ff68F567ACac71E76da3267B41B7",
    "transactionIndex": 0,
    "gasUsed": "2137739",
    "logsBloom": "0x
    "blockHash": "0x13f25201fb5a55723789a1705f3f55b3736099243cf44b04b35564cf9359a82a",
    "transactionHash": "0x66d93179b9190e30be5cd2d2538784e2685292d25972ce0d5b3d382b23ff1fe3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5652983,
        "transactionHash": "0x66d93179b9190e30be5cd2d2538784e2685292d25972ce0d5b3d382b23ff1fe3",
        "address": "0x4141e1C7Fc88Ff68F567ACac71E76da3267B41B7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049d531908840fddac744543d57cb21b91c3d9094"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x13f25201fb5a55723789a1705f3f55b3736099243cf44b04b35564cf9359a82a"
      }
    ],
    "blockNumber": 5652983,
    "cumulativeGasUsed": "2137739",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836"
  ],
  "solcInputHash": "e90dc98e09636415519d2da098776a66",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"midTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTokenEthPriceTimesGasPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct OneSplit.Args\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"getExpectedReturnWithGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"}],\"name\":\"resetFactories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/aggressive/OneSpilt.sol\":\"OneSplit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/aggressive/Address.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc270a61a6f11c912d5c3755911d5ef996a8fe78ee32392334f9fdf6540228083\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x23b94bd1e3bcc3eb3ed7f46e4b82e8ef11810af8c015794dd8bcf3d51a3cf0e7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/IUniswapV2Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Math.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./UniERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface IUniswapV2Exchange {\\r\\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n}\\r\\n\\r\\n\\r\\nlibrary UniswapV2ExchangeLib {\\r\\n    using Math for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using UniERC20 for IERC20;\\r\\n\\r\\n    function getReturn(\\r\\n        IUniswapV2Exchange exchange,\\r\\n        IERC20 fromToken,\\r\\n        IERC20 destToken,\\r\\n        uint amountIn\\r\\n    ) internal view returns (uint256 result, bool needSync, bool needSkim) {\\r\\n        uint256 reserveIn = fromToken.uniBalanceOf(address(exchange));\\r\\n        uint256 reserveOut = destToken.uniBalanceOf(address(exchange));\\r\\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\\r\\n        if (fromToken > destToken) {\\r\\n            (reserve0, reserve1) = (reserve1, reserve0);\\r\\n        }\\r\\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\\r\\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\\r\\n\\r\\n        uint256 amountInWithFee = amountIn.mul(997);\\r\\n        uint256 numerator = amountInWithFee.mul(Math.min(reserveOut, reserve1));\\r\\n        uint256 denominator = Math.min(reserveIn, reserve0).mul(1000).add(amountInWithFee);\\r\\n        result = (denominator == 0) ? 0 : numerator.div(denominator);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ab57d81100781c12e9cf32a68ba4afe6e0e209f620cb93a69a58bae9ddf2bdd\",\"license\":\"MIT\"},\"contracts/swap/aggressive/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./IUniswapV2Exchange.sol\\\";\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Exchange pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n}\",\"keccak256\":\"0x6c0a275f4c3fd6e60ea5d2cb503a4090ca181c20047488c690cd505e7d371d3e\",\"license\":\"MIT\"},\"contracts/swap/aggressive/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract IWETH is IERC20 {\\r\\n    function deposit() external virtual payable;\\r\\n\\r\\n    function withdraw(uint256 amount) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x51352637310347dd11e7132157a7257ebd50e2f3ae19589fd7751d06d88800a9\",\"license\":\"MIT\"},\"contracts/swap/aggressive/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xae28964ea0ef66ab169ac55cd33922bbc329897791df496dd3f29fc5c2914f4d\",\"license\":\"MIT\"},\"contracts/swap/aggressive/OneSpilt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\nimport \\\"./UniERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Exchange.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract OneSplit is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    // using DisableFlags for uint256;\\r\\n\\r\\n    using UniERC20 for IERC20;\\r\\n    using UniERC20 for IWETH;\\r\\n    using UniswapV2ExchangeLib for IUniswapV2Exchange;\\r\\n    // using ChaiHelper for IChai;\\r\\n\\r\\n    IWETH public weth; // = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\r\\n\\r\\n    IUniswapV2Factory[] public factories = [\\r\\n      IUniswapV2Factory(0x6Cf6749FE8Be5Db551a9962504F10a8467361754),\\r\\n      IUniswapV2Factory(0x1eA875068D325AF621Dfd9B63C461E7536149b1F)\\r\\n    ];\\r\\n    // IUniswapV2Factory mdexFactory = 0xb0b670fc1F7724119963018DB0BfA86aDb22d941;\\r\\n    // IUniswapV2Factory bxhFactory = 0xB6B1fE87cAa52D968832a5053116af08f4601475;\\r\\n    uint256 private constant _REVERSE_MASK =   0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n    constructor(address _weth) public {\\r\\n        weth = IWETH(_weth);\\r\\n    }\\r\\n\\r\\n    struct Args {\\r\\n        IERC20 fromToken;\\r\\n        IERC20 destToken;\\r\\n        IERC20[] midTokens;\\r\\n        uint256 amount;\\r\\n        uint256 parts;\\r\\n        uint256 flags;\\r\\n        // uint256 slip;  // \\u5206\\u6bcd 10000\\r\\n        uint256 destTokenEthPriceTimesGasPrice;\\r\\n    }\\r\\n\\r\\n    struct CalcVars {\\r\\n      IUniswapV2Factory factory;\\r\\n      IERC20 fromToken;\\r\\n      IERC20 midToken;\\r\\n      IERC20 destToken;\\r\\n      uint256[] amounts;\\r\\n      uint256 flags;\\r\\n      uint256 destTokenEthPriceTimesGasPrice;\\r\\n      bool atLeastOnePositive;\\r\\n    }\\r\\n\\r\\n    struct SwapParm {\\r\\n        address srcToken;\\r\\n        uint routers;\\r\\n        uint returnAmt;\\r\\n        uint[] amts;\\r\\n        uint[] outAmts;\\r\\n        uint[] minOutAmts;\\r\\n        uint[] flags;\\r\\n        bytes32[][] pools;\\r\\n    }\\r\\n\\r\\n    // function addFactory(address _factory) external onlyOwner {\\r\\n    //     factories[factories.length] = _factory;\\r\\n    // }\\r\\n\\r\\n    function resetFactories(address[] memory _factories) external onlyOwner {\\r\\n        uint total = factories.length;\\r\\n        for (uint i = 0; i < total; i ++) {\\r\\n            factories.pop();\\r\\n        }\\r\\n\\r\\n        factories = new IUniswapV2Factory[](_factories.length);\\r\\n        for (uint i = 0; i < _factories.length; i ++) {\\r\\n            factories[i] = IUniswapV2Factory(_factories[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getExpectedReturnWithGas(Args memory args)\\r\\n        public\\r\\n        view\\r\\n        returns(\\r\\n            uint256 returnAmount,\\r\\n            uint256 estimateGasAmount,\\r\\n            uint256[] memory distribution,\\r\\n            bytes memory data\\r\\n        ) {\\r\\n        console.log(\\\"before execute .... \\\");\\r\\n\\r\\n        uint routers = (1 + args.midTokens.length) * factories.length;\\r\\n        uint256[] memory amounts = _linearInterpolation(args.amount, args.parts);\\r\\n        int256[][] memory matrix = new int256[][](routers);\\r\\n        uint256[] memory gases = new uint256[](routers);\\r\\n\\r\\n        {\\r\\n          CalcVars memory localVar;\\r\\n          localVar.fromToken = args.fromToken;\\r\\n          localVar.destToken = args.destToken;\\r\\n          localVar.amounts = amounts;\\r\\n          localVar.flags = args.flags;\\r\\n          localVar.destTokenEthPriceTimesGasPrice = args.destTokenEthPriceTimesGasPrice;\\r\\n\\r\\n          uint n = 0;\\r\\n          // bool atLeastOnePositive = false;\\r\\n          for (uint i = 0; i < factories.length; i ++ ) {\\r\\n              localVar.factory = factories[i];\\r\\n              _getFactoryResults(localVar, args.midTokens, matrix, gases, n);\\r\\n              // bool pos = _getFactoryResults(localVar, midTokens, matrix, n, destTokenEthPriceTimesGasPrice);\\r\\n              // atLeastOnePositive = atLeastOnePositive || pos;\\r\\n              n = 1 + args.midTokens.length;\\r\\n              // (uint256[] memory amts, uint gas) = _calculateUniswapV2(localVar);\\r\\n              // rets[n] = amts;\\r\\n              // n ++;\\r\\n              // for (uint j = 0; j < midTokens.length; j ++) {\\r\\n              //     localVar.midToken = midTokens[j];\\r\\n              //     (uint256[] memory amts, uint gas) = _calculateUniswapV2OverMidToken(localVar);\\r\\n              //     rets[n] = amts;\\r\\n              //     n ++;\\r\\n              // }\\r\\n          }\\r\\n        }\\r\\n\\r\\n        console.log(\\\"before _findBestDistribution\\\");\\r\\n        \\r\\n        (, distribution) = _findBestDistribution(args.parts, matrix);\\r\\n\\r\\n        (returnAmount, estimateGasAmount, data) = _getReturnAndGasByDistribution(args, distribution, matrix, gases);\\r\\n        //     Args({\\r\\n        //         fromToken: fromToken,\\r\\n        //         destToken: destToken,\\r\\n        //         amount: amount,\\r\\n        //         parts: parts,\\r\\n        //         flags: flags,\\r\\n        //         destTokenEthPriceTimesGasPrice: destTokenEthPriceTimesGasPrice,\\r\\n        //         distribution: distribution,\\r\\n        //         matrix: matrix,\\r\\n        //         gases: gases,\\r\\n        //     })\\r\\n        // );\\r\\n        return (returnAmount, estimateGasAmount, distribution, data);\\r\\n    }\\r\\n\\r\\n    function _getReturnAndGasByDistribution(\\r\\n        Args memory args,\\r\\n        uint[] memory distribution,\\r\\n        int[][] memory matrix,\\r\\n        uint[] memory gases\\r\\n    ) internal view returns(uint256 returnAmount, uint256 estimateGasAmount, bytes memory data) {\\r\\n        SwapParm memory param;\\r\\n        // uint routes;\\r\\n        for (uint i = 0; i < distribution.length; i ++) {\\r\\n            if (distribution[i] > 0) {\\r\\n                param.routers ++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        param.srcToken = address(args.fromToken);\\r\\n        param.amts = new uint[](param.routers);\\r\\n        param.outAmts = new uint[](param.routers);\\r\\n        param.minOutAmts = new uint[](param.routers);\\r\\n        param.flags = new uint[](param.routers);\\r\\n\\r\\n        uint total;\\r\\n        uint idx;\\r\\n        // uint amtIn = args.amount.mul(args.parts);\\r\\n        // uint slip = 10000 - args.slip;\\r\\n        \\r\\n        for (uint i = 0; i < distribution.length; i ++) {\\r\\n            if (distribution[i] > 0) {\\r\\n                estimateGasAmount = estimateGasAmount.add(gases[i]);\\r\\n                int256 value = matrix[i][distribution[i]] + int256(gases[i].mul(args.destTokenEthPriceTimesGasPrice).div(1e18));\\r\\n                returnAmount = returnAmount.add(uint256(value));\\r\\n\\r\\n                if (idx == param.routers - 1) {\\r\\n                    // \\u5f25\\u8865\\u7cbe\\u5ea6\\r\\n                    param.amts[idx] = args.amount - total;\\r\\n                } else {\\r\\n                    param.amts[idx] = args.amount.mul(args.parts).div(distribution[i]);\\r\\n                }\\r\\n                param.outAmts[idx] = uint256(value);\\r\\n                param.minOutAmts[idx] = uint256(value);  // .mul(10000 - args.slip).div(10000);\\r\\n                // param.minOutAmts[idx] = uint256(value).mul(10000 - args.slip).div(10000);\\r\\n                total += param.amts[idx];\\r\\n                // uint units = args.midTokens.length + 1;\\r\\n                if (i % (args.midTokens.length+1) == 0) {\\r\\n                    // \\u6ca1\\u6709\\u4e2d\\u95f4\\u4ea4\\u6613\\u5bf9\\r\\n                    param.pools[idx] = _buildPoolData(factories[i/(args.midTokens.length+1)], args.fromToken, IERC20(0), args.destToken, 997000);\\r\\n                } else {\\r\\n                    // \\u6709\\u4e2d\\u95f4\\u4ea4\\u6613\\u5bf9\\u7684\\u60c5\\u51b5\\r\\n                    param.pools[idx] = _buildPoolData(factories[i/(args.midTokens.length+1)], args.fromToken, args.midTokens[i%(args.midTokens.length+1)], args.destToken, 997000);\\r\\n                }\\r\\n\\r\\n                idx ++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        param.returnAmt = returnAmount;\\r\\n        data = abi.encode(param);\\r\\n    }\\r\\n\\r\\n    // feeRate \\u7684\\u5206\\u6bcd\\u662f 1000_000\\r\\n    function _buildPoolData(IUniswapV2Factory factory,\\r\\n        IERC20 srcToken,\\r\\n        IERC20 midToken,\\r\\n        IERC20 destToken,\\r\\n        uint feeRate) private view returns (bytes32[] memory) {\\r\\n        bytes32[] memory data;\\r\\n\\r\\n        feeRate = feeRate << 160;\\r\\n        IERC20 fromTokenReal = srcToken.isETH() ? weth : srcToken;\\r\\n        IERC20 destTokenReal = destToken.isETH() ? weth : destToken;\\r\\n        address[] memory path;\\r\\n        if (address(midToken) != address(0)) {\\r\\n            data = new bytes32[](1);\\r\\n            path = new address[](2);\\r\\n            path[0] = address(fromTokenReal);\\r\\n            path[1] = address(destTokenReal);\\r\\n\\r\\n        } else {\\r\\n            data = new bytes32[](2);\\r\\n            path = new address[](3);\\r\\n            path[0] = address(fromTokenReal);\\r\\n            path[1] = address(midToken);\\r\\n            path[2] = address(destTokenReal);\\r\\n        }\\r\\n\\r\\n        for (uint i = 0; i < path.length - 1; i ++) {\\r\\n            address t0 = path[i];\\r\\n            address t1 = path[i+1];\\r\\n\\r\\n            address pair = address(factory.getPair(IERC20(t0), IERC20(t1)));\\r\\n            uint pool = uint(pair);\\r\\n            pool = feeRate | pool;\\r\\n            // reverse\\r\\n            address token0 = IUniswapV2Pair(pair).token0();\\r\\n            if (token0 != t0) {\\r\\n              pool = pool | _REVERSE_MASK;\\r\\n            }\\r\\n            data[i] = bytes32(pool);\\r\\n        }\\r\\n\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    function _getFactoryResults(CalcVars memory localVar,\\r\\n      IERC20[] memory midTokens,\\r\\n      int256[][] memory matrix,\\r\\n      uint256[] memory gases,\\r\\n      uint n) internal view {\\r\\n        bool atLeastOnePositive = false;\\r\\n        // Prepend zero and sub gas\\r\\n\\r\\n        (uint256[] memory amts, uint gas) = _calculateUniswapV2(localVar);\\r\\n        gases[n] = gas;\\r\\n        gas = gas.mul(localVar.destTokenEthPriceTimesGasPrice).div(1e18);\\r\\n        matrix[n] = new int256[](amts.length + 1);\\r\\n        for (uint j = 0; j < amts.length; j++) {\\r\\n            matrix[n][j + 1] = int256(amts[j]) - int256(gas);\\r\\n            atLeastOnePositive = atLeastOnePositive || (matrix[n][j + 1] > 0);\\r\\n        }\\r\\n        n ++;\\r\\n\\r\\n        for (uint i = 0; i < midTokens.length; i ++) {\\r\\n            localVar.midToken = midTokens[i];\\r\\n            // (uint256[] memory amts, uint gas) = _calculateUniswapV2OverMidToken(localVar);\\r\\n            (amts, gas) = _calculateUniswapV2OverMidToken(localVar);\\r\\n            gases[n] = gas;\\r\\n            gas = gas.mul(localVar.destTokenEthPriceTimesGasPrice).div(1e18);\\r\\n            \\r\\n            matrix[n] = new int256[](amts.length + 1);\\r\\n            for (uint j = 0; j < amts.length; j++) {\\r\\n                matrix[n][j + 1] = int256(amts[j]) - int256(gas);\\r\\n                atLeastOnePositive = atLeastOnePositive || (matrix[n][j + 1] > 0);\\r\\n            }\\r\\n            n ++;\\r\\n        }\\r\\n\\r\\n        if (atLeastOnePositive) {\\r\\n          localVar.atLeastOnePositive = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function _getReserves(IERC20[] memory midTokens) private returns (function(IUniswapV2Factory,IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[] memory) {\\r\\n    //   function(IUniswapV2Factory,IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[] memory reserves = new function(IUniswapV2Factory,IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[]();\\r\\n\\r\\n    //   for (uint i = 0; i < factories.length; i ++ ) {\\r\\n    //       reserves.push();\\r\\n    //       for (uint j = 0; j < midTokens.length; j ++) {\\r\\n\\r\\n    //       }\\r\\n    //   }\\r\\n    // }\\r\\n\\r\\n    function _findBestDistribution(\\r\\n        uint256 s,                // parts\\r\\n        int256[][] memory amounts // exchangesReturns\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns(\\r\\n            int256 returnAmount,\\r\\n            uint256[] memory distribution\\r\\n        )\\r\\n    {\\r\\n        uint256 n = amounts.length;\\r\\n\\r\\n        int256[][] memory answer = new int256[][](n); // int[n][s+1]\\r\\n        uint256[][] memory parent = new uint256[][](n); // int[n][s+1]\\r\\n\\r\\n        for (uint i = 0; i < n; i++) {\\r\\n            answer[i] = new int256[](s + 1);\\r\\n            parent[i] = new uint256[](s + 1);\\r\\n        }\\r\\n\\r\\n        for (uint j = 0; j <= s; j++) {\\r\\n            answer[0][j] = amounts[0][j];\\r\\n            for (uint i = 1; i < n; i++) {\\r\\n                answer[i][j] = 0;\\r\\n            }\\r\\n            parent[0][j] = 0;\\r\\n        }\\r\\n\\r\\n        for (uint i = 1; i < n; i++) {\\r\\n            for (uint j = 0; j <= s; j++) {\\r\\n                answer[i][j] = answer[i - 1][j];\\r\\n                parent[i][j] = j;\\r\\n\\r\\n                for (uint k = 1; k <= j; k++) {\\r\\n                    if (answer[i - 1][j - k] + amounts[i][k] > answer[i][j]) {\\r\\n                        answer[i][j] = answer[i - 1][j - k] + amounts[i][k];\\r\\n                        parent[i][j] = j - k;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        distribution = new uint256[](n);\\r\\n\\r\\n        uint256 partsLeft = s;\\r\\n        for (uint curExchange = n - 1; partsLeft > 0; curExchange--) {\\r\\n            distribution[curExchange] = partsLeft - parent[curExchange][partsLeft];\\r\\n            partsLeft = parent[curExchange][partsLeft];\\r\\n        }\\r\\n\\r\\n        returnAmount = (answer[n - 1][s] == 0) ? 0 : answer[n - 1][s];\\r\\n    }\\r\\n\\r\\n    function _calculateUniswapFormula(uint256 fromBalance, uint256 toBalance, uint256 amount) internal pure returns(uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return amount.mul(toBalance).mul(997).div(\\r\\n            fromBalance.mul(1000).add(amount.mul(997))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _calculateUniswapV2(CalcVars memory lvar) internal view returns(uint256[] memory rets, uint256 gas) {\\r\\n        IUniswapV2Factory factory = lvar.factory;\\r\\n        IERC20 fromToken = lvar.fromToken;\\r\\n        IERC20 destToken = lvar.destToken;\\r\\n        uint256[] memory amounts = lvar.amounts;\\r\\n        // uint256 /*flags*/\\r\\n        rets = new uint256[](amounts.length);\\r\\n\\r\\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\\r\\n        IERC20 destTokenReal = destToken.isETH() ? weth : destToken;\\r\\n        IUniswapV2Exchange exchange = factory.getPair(fromTokenReal, destTokenReal);\\r\\n        if (exchange != IUniswapV2Exchange(0)) {\\r\\n            uint256 fromTokenBalance = fromTokenReal.uniBalanceOf(address(exchange));\\r\\n            uint256 destTokenBalance = destTokenReal.uniBalanceOf(address(exchange));\\r\\n            for (uint i = 0; i < amounts.length; i++) {\\r\\n                rets[i] = _calculateUniswapFormula(fromTokenBalance, destTokenBalance, amounts[i]);\\r\\n            }\\r\\n            return (rets, 50_000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _linearInterpolation(\\r\\n        uint256 value,\\r\\n        uint256 parts\\r\\n    ) internal pure returns(uint256[] memory rets) {\\r\\n        rets = new uint256[](parts);\\r\\n        for (uint i = 0; i < parts; i++) {\\r\\n            rets[i] = value.mul(i + 1).div(parts);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calculateUniswapV2OverMidToken(\\r\\n        CalcVars memory lvar\\r\\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\\r\\n        // rets = _linearInterpolation(amount, parts);\\r\\n        // IUniswapV2Factory factory = var.factory;\\r\\n        // IERC20 fromToken = var.fromToken;\\r\\n        // IERC20 midToken = var.midToken;\\r\\n        // IERC20 destToken = var.destToken;\\r\\n        // uint256[] memory amounts = var.amounts;\\r\\n        // // uint256 parts,\\r\\n        // uint256 flags = var.flags;\\r\\n        CalcVars memory tmpVar;\\r\\n        tmpVar.factory = lvar.factory;\\r\\n        tmpVar.fromToken = lvar.fromToken;\\r\\n        // tmpVar.midToken = lvar.factory;\\r\\n        tmpVar.destToken = lvar.midToken;\\r\\n        tmpVar.amounts = lvar.amounts;\\r\\n        tmpVar.flags = lvar.flags;\\r\\n\\r\\n        uint256 gas1;\\r\\n        uint256 gas2;\\r\\n        (rets, gas1) = _calculateUniswapV2(tmpVar);\\r\\n        tmpVar.amounts = rets;\\r\\n        tmpVar.fromToken = lvar.midToken;\\r\\n        tmpVar.destToken = lvar.destToken;\\r\\n        (rets, gas2) = _calculateUniswapV2(tmpVar);\\r\\n        return (rets, gas1 + gas2);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xd207880e506c3d8f270d47f927a3498bdfd17ea9bcb8701782180d647249131f\",\"license\":\"MIT\"},\"contracts/swap/aggressive/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x51aa67982e68a104022e88a37a46efb6b04287a282033ab8688a35e52e7e7655\",\"license\":\"MIT\"},\"contracts/swap/aggressive/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x2c8388370e55c92685918acdafb0263e8e8882f56a50c7e922e4c8ba1c961aac\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant WAD = 10 ** 18;\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7d6656a8d66b238405e36506908726a329c023e7679a43c400e08a80e383d5fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\nlibrary UniERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n    IERC20 private constant _ZERO_ADDRESS = IERC20(0);\\r\\n\\r\\n    function isETH(IERC20 token) internal pure returns (bool) {\\r\\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\r\\n    }\\r\\n\\r\\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\r\\n        if (isETH(token)) {\\r\\n            return account.balance;\\r\\n        } else {\\r\\n            return token.balanceOf(account);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\\r\\n        if (amount > 0) {\\r\\n            if (isETH(token)) {\\r\\n                to.transfer(amount);\\r\\n            } else {\\r\\n                _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uniApprove(IERC20 token, address to, uint256 amount) internal {\\r\\n        require(!isETH(token), \\\"Approve called on ETH\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(abi.encodeWithSelector(token.approve.selector, to, amount));\\r\\n\\r\\n        if (!success || (returndata.length > 0 && !abi.decode(returndata, (bool)))) {\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, 0));\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, amount));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa23b2015828893a7d57349ff7ea22219b006f86f03a7fb3043275454e77a4e6\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052736cf6749fe8be5db551a9962504f10a84673617546080908152731ea875068d325af621dfd9b63c461e7536149b1f60a052620000459060029081620000f6565b503480156200005357600080fd5b506040516200257138038062002571833981016040819052620000769162000181565b600062000082620000f2565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319166001600160a01b0392909216919091179055620001b1565b3390565b8280548282559060005260206000209081019282156200014e579160200282015b828111156200014e57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000117565b506200015c92915062000160565b5090565b5b808211156200015c5780546001600160a01b031916815560010162000161565b60006020828403121562000193578081fd5b81516001600160a01b0381168114620001aa578182fd5b9392505050565b6123b080620001c16000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100bd57806397cf90d6146100c5578063ccacfdc1146100e8578063f2fde38b146100fb5761007d565b80633fc8cef314610082578063672383c4146100a0578063715018a6146100b3575b600080fd5b61008a61010e565b604051610097919061208d565b60405180910390f35b61008a6100ae366004611f56565b61011d565b6100bb610144565b005b61008a6101d6565b6100d86100d3366004611e9c565b6101e5565b60405161009794939291906122b7565b6100bb6100f6366004611e04565b6103f3565b6100bb610109366004611dcc565b610531565b6001546001600160a01b031681565b6002818154811061012a57fe5b6000918252602090912001546001600160a01b0316905081565b61014c6105f1565b6001600160a01b031661015d6101d6565b6001600160a01b03161461018c5760405162461bcd60e51b8152600401610183906121bf565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000806060806102296040518060400160405280601481526020017f6265666f72652065786563757465202e2e2e2e200000000000000000000000008152506105f5565b6000600280549050866040015151600101029050606061025187606001518860800151610669565b905060608267ffffffffffffffff8111801561026c57600080fd5b506040519080825280602002602001820160405280156102a057816020015b606081526020019060019003908161028b5790505b50905060608367ffffffffffffffff811180156102bc57600080fd5b506040519080825280602002602001820160405280156102e6578160200160208202803683370190505b5090506102f1611c35565b89516001600160a01b039081166020808401919091528b01511660608201526080810184905260a0808b01519082015260c0808b0151908201526000805b600254811015610383576002818154811061034657fe5b6000918252602090912001546001600160a01b0316835260408c01516103709084908787866106f7565b60408c015151600190810192500161032f565b5050506103c46040518060400160405280601c81526020017f6265666f7265205f66696e6442657374446973747269627574696f6e000000008152506105f5565b6103d28960800151836109cd565b96506103e2905089878484610f34565b919b909a5096985096505050505050565b6103fb6105f1565b6001600160a01b031661040c6101d6565b6001600160a01b0316146104325760405162461bcd60e51b8152600401610183906121bf565b60025460005b8181101561047557600280548061044b57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600101610438565b50815167ffffffffffffffff8111801561048e57600080fd5b506040519080825280602002602001820160405280156104b8578160200160208202803683370190505b5080516104cd91600291602090910190611c78565b5060005b825181101561052c578281815181106104e657fe5b6020026020010151600282815481106104fb57fe5b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556001016104d1565b505050565b6105396105f1565b6001600160a01b031661054a6101d6565b6001600160a01b0316146105705760405162461bcd60e51b8152600401610183906121bf565b6001600160a01b0381166105965760405162461bcd60e51b8152600401610183906120ce565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6106668160405160240161060991906120bb565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac000000000000000000000000000000000000000000000000000000001790526113c9565b50565b60608167ffffffffffffffff8111801561068257600080fd5b506040519080825280602002602001820160405280156106ac578160200160208202803683370190505b50905060005b828110156106f0576106d1836106cb86600185016113ea565b9061142d565b8282815181106106dd57fe5b60209081029190910101526001016106b2565b5092915050565b6000606060006107068861146f565b915091508085858151811061071757fe5b602002602001018181525050610746670de0b6b3a76400006106cb8a60c00151846113ea90919063ffffffff16565b9050815160010167ffffffffffffffff8111801561076357600080fd5b5060405190808252806020026020018201604052801561078d578160200160208202803683370190505b5086858151811061079a57fe5b602002602001018190525060005b825181101561083457818382815181106107be57fe5b6020026020010151038786815181106107d357fe5b602002602001015182600101815181106107e957fe5b602002602001018181525050838061082a5750600087868151811061080a57fe5b6020026020010151826001018151811061082057fe5b6020026020010151135b93506001016107a8565b5060019093019260005b87518110156109b45787818151811061085357fe5b60209081029190910101516001600160a01b031660408a015261087589611655565b80935081945050508186868151811061088a57fe5b6020026020010181815250506108b9670de0b6b3a76400006106cb8b60c00151856113ea90919063ffffffff16565b9150825160010167ffffffffffffffff811180156108d657600080fd5b50604051908082528060200260200182016040528015610900578160200160208202803683370190505b5087868151811061090d57fe5b602002602001018190525060005b83518110156109a7578284828151811061093157fe5b60200260200101510388878151811061094657fe5b6020026020010151826001018151811061095c57fe5b602002602001018181525050848061099d5750600088878151811061097d57fe5b6020026020010151826001018151811061099357fe5b6020026020010151135b945060010161091b565b506001948501940161083e565b5082156109c357600160e08901525b5050505050505050565b8051600090606090818167ffffffffffffffff811180156109ed57600080fd5b50604051908082528060200260200182016040528015610a2157816020015b6060815260200190600190039081610a0c5790505b50905060608267ffffffffffffffff81118015610a3d57600080fd5b50604051908082528060200260200182016040528015610a7157816020015b6060815260200190600190039081610a5c5790505b50905060005b83811015610b3f578760010167ffffffffffffffff81118015610a9957600080fd5b50604051908082528060200260200182016040528015610ac3578160200160208202803683370190505b50838281518110610ad057fe5b60200260200101819052508760010167ffffffffffffffff81118015610af557600080fd5b50604051908082528060200260200182016040528015610b1f578160200160208202803683370190505b50828281518110610b2c57fe5b6020908102919091010152600101610a77565b5060005b878111610c125786600081518110610b5757fe5b60200260200101518181518110610b6a57fe5b602002602001015183600081518110610b7f57fe5b60200260200101518281518110610b9257fe5b602090810291909101015260015b84811015610bdc576000848281518110610bb657fe5b60200260200101518381518110610bc957fe5b6020908102919091010152600101610ba0565b50600082600081518110610bec57fe5b60200260200101518281518110610bff57fe5b6020908102919091010152600101610b43565b5060015b83811015610dfb5760005b888111610df257836001830381518110610c3757fe5b60200260200101518181518110610c4a57fe5b6020026020010151848381518110610c5e57fe5b60200260200101518281518110610c7157fe5b60200260200101818152505080838381518110610c8a57fe5b60200260200101518281518110610c9d57fe5b602090810291909101015260015b818111610de957848381518110610cbe57fe5b60200260200101518281518110610cd157fe5b6020026020010151898481518110610ce557fe5b60200260200101518281518110610cf857fe5b6020026020010151866001860381518110610d0f57fe5b602002602001015183850381518110610d2457fe5b6020026020010151011315610de157888381518110610d3f57fe5b60200260200101518181518110610d5257fe5b6020026020010151856001850381518110610d6957fe5b602002602001015182840381518110610d7e57fe5b602002602001015101858481518110610d9357fe5b60200260200101518381518110610da657fe5b602002602001018181525050808203848481518110610dc157fe5b60200260200101518381518110610dd457fe5b6020026020010181815250505b600101610cab565b50600101610c21565b50600101610c16565b508267ffffffffffffffff81118015610e1357600080fd5b50604051908082528060200260200182016040528015610e3d578160200160208202803683370190505b5093508660001984015b8115610ec357828181518110610e5957fe5b60200260200101518281518110610e6c57fe5b60200260200101518203868281518110610e8257fe5b602002602001018181525050828181518110610e9a57fe5b60200260200101518281518110610ead57fe5b6020908102919091010151915060001901610e47565b50826001850381518110610ed357fe5b60200260200101518881518110610ee657fe5b6020026020010151600014610f2457826001850381518110610f0457fe5b60200260200101518881518110610f1757fe5b6020026020010151610f27565b60005b9550505050509250929050565b6000806060610f41611cdd565b60005b8751811015610f7d576000888281518110610f5b57fe5b60200260200101511115610f755760208201805160010190525b600101610f44565b5087516001600160a01b03168152602081015167ffffffffffffffff81118015610fa657600080fd5b50604051908082528060200260200182016040528015610fd0578160200160208202803683370190505b506060820152602081015167ffffffffffffffff81118015610ff157600080fd5b5060405190808252806020026020018201604052801561101b578160200160208202803683370190505b506080820152602081015167ffffffffffffffff8111801561103c57600080fd5b50604051908082528060200260200182016040528015611066578160200160208202803683370190505b5060a0820152602081015167ffffffffffffffff8111801561108757600080fd5b506040519080825280602002602001820160405280156110b1578160200160208202803683370190505b5060c0820152600080805b89518110156113935760008a82815181106110d357fe5b6020026020010151111561138b576111078882815181106110f057fe5b6020026020010151876116ec90919063ffffffff16565b95506000611141670de0b6b3a76400006106cb8e60c001518c868151811061112b57fe5b60200260200101516113ea90919063ffffffff16565b8a838151811061114d57fe5b60200260200101518c848151811061116157fe5b60200260200101518151811061117357fe5b602002602001015101905061119181896116ec90919063ffffffff16565b975060018560200151038314156111ca57838c6060015103856060015184815181106111b957fe5b602002602001018181525050611219565b6111fc8b83815181106111d957fe5b60200260200101516106cb8e608001518f606001516113ea90919063ffffffff16565b8560600151848151811061120c57fe5b6020026020010181815250505b808560800151848151811061122a57fe5b602002602001018181525050808560a00151848151811061124757fe5b6020026020010181815250508460600151838151811061126357fe5b6020026020010151840193508b6040015151600101828161128057fe5b066112f9576112d960028d6040015151600101848161129b57fe5b04815481106112a657fe5b9060005260206000200160009054906101000a90046001600160a01b03168d6000015160008f60200151620f3688611711565b8560e0015184815181106112e957fe5b6020026020010181905250611383565b61136760028d6040015151600101848161130f57fe5b048154811061131a57fe5b6000918252602090912001548d5160408f015180516001600160a01b0390931692600101868161134657fe5b068151811061135157fe5b60200260200101518f60200151620f3688611711565b8560e00151848151811061137757fe5b60200260200101819052505b506001909101905b6001016110bc565b506040808401879052516113ab9084906020016121f4565b60405160208183030381529060405293505050509450945094915050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000826113f957506000611427565b8282028284828161140657fe5b04146114245760405162461bcd60e51b815260040161018390612162565b90505b92915050565b600061142483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611ab5565b8051602082015160608381015160808501518051929460009490939092919067ffffffffffffffff811180156114a457600080fd5b506040519080825280602002602001820160405280156114ce578160200160208202803683370190505b50955060006114e5846001600160a01b0316611aee565b6114ef57836114fc565b6001546001600160a01b03165b90506000611512846001600160a01b0316611aee565b61151c5783611529565b6001546001600160a01b03165b90506000866001600160a01b031663e6a4390584846040518363ffffffff1660e01b815260040161155b9291906120a1565b60206040518083038186803b15801561157357600080fd5b505afa158015611587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ab9190611de8565b90506001600160a01b038116156116485760006115d16001600160a01b03851683611b27565b905060006115e86001600160a01b03851684611b27565b905060005b865181101561163357611614838389848151811061160757fe5b6020026020010151611be4565b8c828151811061162057fe5b60209081029190910101526001016115ed565b5061c350995061165098505050505050505050565b505050505050505b915091565b60606000611661611c35565b83516001600160a01b03908116825260208086015182169083015260408501511660608201526080808501519082015260a080850151908201526000806116a78361146f565b6080850182905260408801516001600160a01b0390811660208701526060808a01519091169086015290955091506116de8361146f565b909792019550909350505050565b6000828201838110156114245760405162461bcd60e51b81526004016101839061212b565b60a01b606080600061172b6001600160a01b038816611aee565b6117355786611742565b6001546001600160a01b03165b90506000611758866001600160a01b0316611aee565b611762578561176f565b6001546001600160a01b03165b905060606001600160a01b03881615611823576040805160018082528183019092529060208083019080368337505060408051600280825260608201835293975092915060208301908036833701905050905082816000815181106117d057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106117fe57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506118ef565b6040805160028082526060820183529091602083019080368337505060408051600380825260808201909252929650905060208201606080368337019050509050828160008151811061187257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505087816001815181106118a057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505081816002815181106118ce57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b60005b6001825103811015611aa657600082828151811061190c57fe5b60200260200101519050600083836001018151811061192757fe5b6020026020010151905060008d6001600160a01b031663e6a4390584846040518363ffffffff1660e01b81526004016119619291906120a1565b60206040518083038186803b15801561197957600080fd5b505afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190611de8565b90506000816001600160a01b03169050808b1790506000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0157600080fd5b505afa158015611a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a399190611de8565b9050846001600160a01b0316816001600160a01b031614611a7a577f8000000000000000000000000000000000000000000000000000000000000000821791505b8160001b8a8781518110611a8a57fe5b60209081029190910101525050600190930192506118f2915050565b50929998505050505050505050565b60008183611ad65760405162461bcd60e51b815260040161018391906120bb565b506000838581611ae257fe5b049150505b9392505050565b60006001600160a01b038216158061142757506001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1492915050565b6000611b3283611aee565b15611b4857506001600160a01b03811631611427565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038416906370a0823190611b8d90859060040161208d565b60206040518083038186803b158015611ba557600080fd5b505afa158015611bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdd9190611f6e565b9050611427565b600081611bf357506000611ae7565b611c2d611c17611c05846103e56113ea565b611c11876103e86113ea565b906116ec565b6106cb6103e5611c2786886113ea565b906113ea565b949350505050565b60408051610100810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c0810182905260e081019190915290565b828054828255906000526020600020908101928215611ccd579160200282015b82811115611ccd57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611c98565b50611cd9929150611d2b565b5090565b60405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160608152602001606081526020016060815260200160608152602001606081525090565b5b80821115611cd95780546001600160a01b0319168155600101611d2c565b803561142781612365565b600082601f830112611d65578081fd5b8135611d78611d7382612345565b61231e565b818152915060208083019084810181840286018201871015611d9957600080fd5b60005b84811015611dc1578135611daf81612365565b84529282019290820190600101611d9c565b505050505092915050565b600060208284031215611ddd578081fd5b813561142481612365565b600060208284031215611df9578081fd5b815161142481612365565b60006020808385031215611e16578182fd5b823567ffffffffffffffff811115611e2c578283fd5b8301601f81018513611e3c578283fd5b8035611e4a611d7382612345565b8181528381019083850185840285018601891015611e66578687fd5b8694505b83851015611e9057611e7c8982611d4a565b835260019490940193918501918501611e6a565b50979650505050505050565b600060208284031215611ead578081fd5b813567ffffffffffffffff80821115611ec4578283fd5b9083019060e08286031215611ed7578283fd5b611ee160e061231e565b611eeb8684611d4a565b8152611efa8660208501611d4a565b6020820152604083013582811115611f10578485fd5b611f1c87828601611d55565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013560c082015280935050505092915050565b600060208284031215611f67578081fd5b5035919050565b600060208284031215611f7f578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450848183028601828601855b85811015611ffb578383038952815180518085529086019086850190895b81811015611fe657835183529288019291880191600101611fca565b50509986019993505090840190600101611fac565b5090979650505050505050565b6000815180845260208085019450808401835b838110156120375781518752958201959082019060010161201b565b509495945050505050565b60008151808452815b818110156120675760208185018101518683018201520161204b565b818111156120785782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6000602082526114246020830184612042565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208252612208602083018451611f86565b60208301516040830152604083015160608301526060830151610100806080850152612238610120850183612008565b91506080850151601f19808685030160a08701526122568483612008565b935060a08701519150808685030160c08701526122738483612008565b935060c08701519150808685030160e08701526122908483612008565b935060e08701519150808685030183870152506122ad8382611f93565b9695505050505050565b600060808201868352602086818501526080604085015281865180845260a0860191508288019350845b818110156122fd578451835293830193918301916001016122e1565b505084810360608601526123118187612042565b9998505050505050505050565b60405181810167ffffffffffffffff8111828210171561233d57600080fd5b604052919050565b600067ffffffffffffffff82111561235b578081fd5b5060209081020190565b6001600160a01b038116811461066657600080fdfea264697066735822122006372c945c3aea964efdd948fcf540b1728c2874cbd7837f3802ea144bfdf3d564736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100bd57806397cf90d6146100c5578063ccacfdc1146100e8578063f2fde38b146100fb5761007d565b80633fc8cef314610082578063672383c4146100a0578063715018a6146100b3575b600080fd5b61008a61010e565b604051610097919061208d565b60405180910390f35b61008a6100ae366004611f56565b61011d565b6100bb610144565b005b61008a6101d6565b6100d86100d3366004611e9c565b6101e5565b60405161009794939291906122b7565b6100bb6100f6366004611e04565b6103f3565b6100bb610109366004611dcc565b610531565b6001546001600160a01b031681565b6002818154811061012a57fe5b6000918252602090912001546001600160a01b0316905081565b61014c6105f1565b6001600160a01b031661015d6101d6565b6001600160a01b03161461018c5760405162461bcd60e51b8152600401610183906121bf565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000806060806102296040518060400160405280601481526020017f6265666f72652065786563757465202e2e2e2e200000000000000000000000008152506105f5565b6000600280549050866040015151600101029050606061025187606001518860800151610669565b905060608267ffffffffffffffff8111801561026c57600080fd5b506040519080825280602002602001820160405280156102a057816020015b606081526020019060019003908161028b5790505b50905060608367ffffffffffffffff811180156102bc57600080fd5b506040519080825280602002602001820160405280156102e6578160200160208202803683370190505b5090506102f1611c35565b89516001600160a01b039081166020808401919091528b01511660608201526080810184905260a0808b01519082015260c0808b0151908201526000805b600254811015610383576002818154811061034657fe5b6000918252602090912001546001600160a01b0316835260408c01516103709084908787866106f7565b60408c015151600190810192500161032f565b5050506103c46040518060400160405280601c81526020017f6265666f7265205f66696e6442657374446973747269627574696f6e000000008152506105f5565b6103d28960800151836109cd565b96506103e2905089878484610f34565b919b909a5096985096505050505050565b6103fb6105f1565b6001600160a01b031661040c6101d6565b6001600160a01b0316146104325760405162461bcd60e51b8152600401610183906121bf565b60025460005b8181101561047557600280548061044b57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600101610438565b50815167ffffffffffffffff8111801561048e57600080fd5b506040519080825280602002602001820160405280156104b8578160200160208202803683370190505b5080516104cd91600291602090910190611c78565b5060005b825181101561052c578281815181106104e657fe5b6020026020010151600282815481106104fb57fe5b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556001016104d1565b505050565b6105396105f1565b6001600160a01b031661054a6101d6565b6001600160a01b0316146105705760405162461bcd60e51b8152600401610183906121bf565b6001600160a01b0381166105965760405162461bcd60e51b8152600401610183906120ce565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6106668160405160240161060991906120bb565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac000000000000000000000000000000000000000000000000000000001790526113c9565b50565b60608167ffffffffffffffff8111801561068257600080fd5b506040519080825280602002602001820160405280156106ac578160200160208202803683370190505b50905060005b828110156106f0576106d1836106cb86600185016113ea565b9061142d565b8282815181106106dd57fe5b60209081029190910101526001016106b2565b5092915050565b6000606060006107068861146f565b915091508085858151811061071757fe5b602002602001018181525050610746670de0b6b3a76400006106cb8a60c00151846113ea90919063ffffffff16565b9050815160010167ffffffffffffffff8111801561076357600080fd5b5060405190808252806020026020018201604052801561078d578160200160208202803683370190505b5086858151811061079a57fe5b602002602001018190525060005b825181101561083457818382815181106107be57fe5b6020026020010151038786815181106107d357fe5b602002602001015182600101815181106107e957fe5b602002602001018181525050838061082a5750600087868151811061080a57fe5b6020026020010151826001018151811061082057fe5b6020026020010151135b93506001016107a8565b5060019093019260005b87518110156109b45787818151811061085357fe5b60209081029190910101516001600160a01b031660408a015261087589611655565b80935081945050508186868151811061088a57fe5b6020026020010181815250506108b9670de0b6b3a76400006106cb8b60c00151856113ea90919063ffffffff16565b9150825160010167ffffffffffffffff811180156108d657600080fd5b50604051908082528060200260200182016040528015610900578160200160208202803683370190505b5087868151811061090d57fe5b602002602001018190525060005b83518110156109a7578284828151811061093157fe5b60200260200101510388878151811061094657fe5b6020026020010151826001018151811061095c57fe5b602002602001018181525050848061099d5750600088878151811061097d57fe5b6020026020010151826001018151811061099357fe5b6020026020010151135b945060010161091b565b506001948501940161083e565b5082156109c357600160e08901525b5050505050505050565b8051600090606090818167ffffffffffffffff811180156109ed57600080fd5b50604051908082528060200260200182016040528015610a2157816020015b6060815260200190600190039081610a0c5790505b50905060608267ffffffffffffffff81118015610a3d57600080fd5b50604051908082528060200260200182016040528015610a7157816020015b6060815260200190600190039081610a5c5790505b50905060005b83811015610b3f578760010167ffffffffffffffff81118015610a9957600080fd5b50604051908082528060200260200182016040528015610ac3578160200160208202803683370190505b50838281518110610ad057fe5b60200260200101819052508760010167ffffffffffffffff81118015610af557600080fd5b50604051908082528060200260200182016040528015610b1f578160200160208202803683370190505b50828281518110610b2c57fe5b6020908102919091010152600101610a77565b5060005b878111610c125786600081518110610b5757fe5b60200260200101518181518110610b6a57fe5b602002602001015183600081518110610b7f57fe5b60200260200101518281518110610b9257fe5b602090810291909101015260015b84811015610bdc576000848281518110610bb657fe5b60200260200101518381518110610bc957fe5b6020908102919091010152600101610ba0565b50600082600081518110610bec57fe5b60200260200101518281518110610bff57fe5b6020908102919091010152600101610b43565b5060015b83811015610dfb5760005b888111610df257836001830381518110610c3757fe5b60200260200101518181518110610c4a57fe5b6020026020010151848381518110610c5e57fe5b60200260200101518281518110610c7157fe5b60200260200101818152505080838381518110610c8a57fe5b60200260200101518281518110610c9d57fe5b602090810291909101015260015b818111610de957848381518110610cbe57fe5b60200260200101518281518110610cd157fe5b6020026020010151898481518110610ce557fe5b60200260200101518281518110610cf857fe5b6020026020010151866001860381518110610d0f57fe5b602002602001015183850381518110610d2457fe5b6020026020010151011315610de157888381518110610d3f57fe5b60200260200101518181518110610d5257fe5b6020026020010151856001850381518110610d6957fe5b602002602001015182840381518110610d7e57fe5b602002602001015101858481518110610d9357fe5b60200260200101518381518110610da657fe5b602002602001018181525050808203848481518110610dc157fe5b60200260200101518381518110610dd457fe5b6020026020010181815250505b600101610cab565b50600101610c21565b50600101610c16565b508267ffffffffffffffff81118015610e1357600080fd5b50604051908082528060200260200182016040528015610e3d578160200160208202803683370190505b5093508660001984015b8115610ec357828181518110610e5957fe5b60200260200101518281518110610e6c57fe5b60200260200101518203868281518110610e8257fe5b602002602001018181525050828181518110610e9a57fe5b60200260200101518281518110610ead57fe5b6020908102919091010151915060001901610e47565b50826001850381518110610ed357fe5b60200260200101518881518110610ee657fe5b6020026020010151600014610f2457826001850381518110610f0457fe5b60200260200101518881518110610f1757fe5b6020026020010151610f27565b60005b9550505050509250929050565b6000806060610f41611cdd565b60005b8751811015610f7d576000888281518110610f5b57fe5b60200260200101511115610f755760208201805160010190525b600101610f44565b5087516001600160a01b03168152602081015167ffffffffffffffff81118015610fa657600080fd5b50604051908082528060200260200182016040528015610fd0578160200160208202803683370190505b506060820152602081015167ffffffffffffffff81118015610ff157600080fd5b5060405190808252806020026020018201604052801561101b578160200160208202803683370190505b506080820152602081015167ffffffffffffffff8111801561103c57600080fd5b50604051908082528060200260200182016040528015611066578160200160208202803683370190505b5060a0820152602081015167ffffffffffffffff8111801561108757600080fd5b506040519080825280602002602001820160405280156110b1578160200160208202803683370190505b5060c0820152600080805b89518110156113935760008a82815181106110d357fe5b6020026020010151111561138b576111078882815181106110f057fe5b6020026020010151876116ec90919063ffffffff16565b95506000611141670de0b6b3a76400006106cb8e60c001518c868151811061112b57fe5b60200260200101516113ea90919063ffffffff16565b8a838151811061114d57fe5b60200260200101518c848151811061116157fe5b60200260200101518151811061117357fe5b602002602001015101905061119181896116ec90919063ffffffff16565b975060018560200151038314156111ca57838c6060015103856060015184815181106111b957fe5b602002602001018181525050611219565b6111fc8b83815181106111d957fe5b60200260200101516106cb8e608001518f606001516113ea90919063ffffffff16565b8560600151848151811061120c57fe5b6020026020010181815250505b808560800151848151811061122a57fe5b602002602001018181525050808560a00151848151811061124757fe5b6020026020010181815250508460600151838151811061126357fe5b6020026020010151840193508b6040015151600101828161128057fe5b066112f9576112d960028d6040015151600101848161129b57fe5b04815481106112a657fe5b9060005260206000200160009054906101000a90046001600160a01b03168d6000015160008f60200151620f3688611711565b8560e0015184815181106112e957fe5b6020026020010181905250611383565b61136760028d6040015151600101848161130f57fe5b048154811061131a57fe5b6000918252602090912001548d5160408f015180516001600160a01b0390931692600101868161134657fe5b068151811061135157fe5b60200260200101518f60200151620f3688611711565b8560e00151848151811061137757fe5b60200260200101819052505b506001909101905b6001016110bc565b506040808401879052516113ab9084906020016121f4565b60405160208183030381529060405293505050509450945094915050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000826113f957506000611427565b8282028284828161140657fe5b04146114245760405162461bcd60e51b815260040161018390612162565b90505b92915050565b600061142483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611ab5565b8051602082015160608381015160808501518051929460009490939092919067ffffffffffffffff811180156114a457600080fd5b506040519080825280602002602001820160405280156114ce578160200160208202803683370190505b50955060006114e5846001600160a01b0316611aee565b6114ef57836114fc565b6001546001600160a01b03165b90506000611512846001600160a01b0316611aee565b61151c5783611529565b6001546001600160a01b03165b90506000866001600160a01b031663e6a4390584846040518363ffffffff1660e01b815260040161155b9291906120a1565b60206040518083038186803b15801561157357600080fd5b505afa158015611587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ab9190611de8565b90506001600160a01b038116156116485760006115d16001600160a01b03851683611b27565b905060006115e86001600160a01b03851684611b27565b905060005b865181101561163357611614838389848151811061160757fe5b6020026020010151611be4565b8c828151811061162057fe5b60209081029190910101526001016115ed565b5061c350995061165098505050505050505050565b505050505050505b915091565b60606000611661611c35565b83516001600160a01b03908116825260208086015182169083015260408501511660608201526080808501519082015260a080850151908201526000806116a78361146f565b6080850182905260408801516001600160a01b0390811660208701526060808a01519091169086015290955091506116de8361146f565b909792019550909350505050565b6000828201838110156114245760405162461bcd60e51b81526004016101839061212b565b60a01b606080600061172b6001600160a01b038816611aee565b6117355786611742565b6001546001600160a01b03165b90506000611758866001600160a01b0316611aee565b611762578561176f565b6001546001600160a01b03165b905060606001600160a01b03881615611823576040805160018082528183019092529060208083019080368337505060408051600280825260608201835293975092915060208301908036833701905050905082816000815181106117d057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106117fe57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506118ef565b6040805160028082526060820183529091602083019080368337505060408051600380825260808201909252929650905060208201606080368337019050509050828160008151811061187257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505087816001815181106118a057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505081816002815181106118ce57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b60005b6001825103811015611aa657600082828151811061190c57fe5b60200260200101519050600083836001018151811061192757fe5b6020026020010151905060008d6001600160a01b031663e6a4390584846040518363ffffffff1660e01b81526004016119619291906120a1565b60206040518083038186803b15801561197957600080fd5b505afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190611de8565b90506000816001600160a01b03169050808b1790506000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0157600080fd5b505afa158015611a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a399190611de8565b9050846001600160a01b0316816001600160a01b031614611a7a577f8000000000000000000000000000000000000000000000000000000000000000821791505b8160001b8a8781518110611a8a57fe5b60209081029190910101525050600190930192506118f2915050565b50929998505050505050505050565b60008183611ad65760405162461bcd60e51b815260040161018391906120bb565b506000838581611ae257fe5b049150505b9392505050565b60006001600160a01b038216158061142757506001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1492915050565b6000611b3283611aee565b15611b4857506001600160a01b03811631611427565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038416906370a0823190611b8d90859060040161208d565b60206040518083038186803b158015611ba557600080fd5b505afa158015611bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdd9190611f6e565b9050611427565b600081611bf357506000611ae7565b611c2d611c17611c05846103e56113ea565b611c11876103e86113ea565b906116ec565b6106cb6103e5611c2786886113ea565b906113ea565b949350505050565b60408051610100810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c0810182905260e081019190915290565b828054828255906000526020600020908101928215611ccd579160200282015b82811115611ccd57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611c98565b50611cd9929150611d2b565b5090565b60405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160608152602001606081526020016060815260200160608152602001606081525090565b5b80821115611cd95780546001600160a01b0319168155600101611d2c565b803561142781612365565b600082601f830112611d65578081fd5b8135611d78611d7382612345565b61231e565b818152915060208083019084810181840286018201871015611d9957600080fd5b60005b84811015611dc1578135611daf81612365565b84529282019290820190600101611d9c565b505050505092915050565b600060208284031215611ddd578081fd5b813561142481612365565b600060208284031215611df9578081fd5b815161142481612365565b60006020808385031215611e16578182fd5b823567ffffffffffffffff811115611e2c578283fd5b8301601f81018513611e3c578283fd5b8035611e4a611d7382612345565b8181528381019083850185840285018601891015611e66578687fd5b8694505b83851015611e9057611e7c8982611d4a565b835260019490940193918501918501611e6a565b50979650505050505050565b600060208284031215611ead578081fd5b813567ffffffffffffffff80821115611ec4578283fd5b9083019060e08286031215611ed7578283fd5b611ee160e061231e565b611eeb8684611d4a565b8152611efa8660208501611d4a565b6020820152604083013582811115611f10578485fd5b611f1c87828601611d55565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013560c082015280935050505092915050565b600060208284031215611f67578081fd5b5035919050565b600060208284031215611f7f578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450848183028601828601855b85811015611ffb578383038952815180518085529086019086850190895b81811015611fe657835183529288019291880191600101611fca565b50509986019993505090840190600101611fac565b5090979650505050505050565b6000815180845260208085019450808401835b838110156120375781518752958201959082019060010161201b565b509495945050505050565b60008151808452815b818110156120675760208185018101518683018201520161204b565b818111156120785782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6000602082526114246020830184612042565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208252612208602083018451611f86565b60208301516040830152604083015160608301526060830151610100806080850152612238610120850183612008565b91506080850151601f19808685030160a08701526122568483612008565b935060a08701519150808685030160c08701526122738483612008565b935060c08701519150808685030160e08701526122908483612008565b935060e08701519150808685030183870152506122ad8382611f93565b9695505050505050565b600060808201868352602086818501526080604085015281865180845260a0860191508288019350845b818110156122fd578451835293830193918301916001016122e1565b505084810360608601526123118187612042565b9998505050505050505050565b60405181810167ffffffffffffffff8111828210171561233d57600080fd5b604052919050565b600067ffffffffffffffff82111561235b578081fd5b5060209081020190565b6001600160a01b038116811461066657600080fdfea264697066735822122006372c945c3aea964efdd948fcf540b1728c2874cbd7837f3802ea144bfdf3d564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3018,
        "contract": "contracts/swap/aggressive/OneSpilt.sol:OneSplit",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1249,
        "contract": "contracts/swap/aggressive/OneSpilt.sol:OneSplit",
        "label": "weth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IWETH)1148"
      },
      {
        "astId": 1259,
        "contract": "contracts/swap/aggressive/OneSpilt.sol:OneSplit",
        "label": "factories",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_contract(IUniswapV2Factory)1128)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IUniswapV2Factory)1128)dyn_storage": {
        "base": "t_contract(IUniswapV2Factory)1128",
        "encoding": "dynamic_array",
        "label": "contract IUniswapV2Factory[]",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Factory)1128": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)1148": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      }
    }
  }
}