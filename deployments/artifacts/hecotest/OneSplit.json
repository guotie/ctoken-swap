{
  "address": "0x52c2B894fd4b1138503163fE157554f9E72f4e67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ctokenFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLAG_SWAP_DIRECT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLAG_SWAP_ROUTER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ctokenFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_flag",
          "type": "uint256"
        }
      ],
      "name": "addCompoundSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_flag",
          "type": "uint256"
        }
      ],
      "name": "addCurveSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_flag",
          "type": "uint256"
        }
      ],
      "name": "addUniswap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ctokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "destToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "midTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "parts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slip",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "destTokenEthPriceTimesGasPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct OneSplit.Args",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "getExpectedReturnWithGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "estimateGasAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "distribution",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetSwaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swaps",
      "outputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5374a05278f735987598b1924e41f3304f0011b789fed0330c14440c32a9bc0",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x52c2B894fd4b1138503163fE157554f9E72f4e67",
    "transactionIndex": 12,
    "gasUsed": "3080143",
    "logsBloom": "0x
    "blockHash": "0xdce532d0322a2453befed0d8974a98ed18ae9fc5263a45be56b0201f0257ff39",
    "transactionHash": "0xe5374a05278f735987598b1924e41f3304f0011b789fed0330c14440c32a9bc0",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 6013441,
        "transactionHash": "0xe5374a05278f735987598b1924e41f3304f0011b789fed0330c14440c32a9bc0",
        "address": "0x52c2B894fd4b1138503163fE157554f9E72f4e67",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049d531908840fddac744543d57cb21b91c3d9094"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0xdce532d0322a2453befed0d8974a98ed18ae9fc5263a45be56b0201f0257ff39"
      }
    ],
    "blockNumber": 6013441,
    "cumulativeGasUsed": "7244227",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836",
    "0xC65d5ea738F466FEb518b6079732C7b03eE04CF0"
  ],
  "solcInputHash": "f83496fc5b65debe563e58c1c0cf72bf",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ctokenFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLAG_SWAP_DIRECT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLAG_SWAP_ROUTER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ctokenFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flag\",\"type\":\"uint256\"}],\"name\":\"addCompoundSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flag\",\"type\":\"uint256\"}],\"name\":\"addCurveSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flag\",\"type\":\"uint256\"}],\"name\":\"addUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"midTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTokenEthPriceTimesGasPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct OneSplit.Args\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"getExpectedReturnWithGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/aggressive/OneSpilt.sol\":\"OneSplit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/aggressive/Address.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc270a61a6f11c912d5c3755911d5ef996a8fe78ee32392334f9fdf6540228083\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/ICERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\ninterface ICERC20 {\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function exchangeRateCurrent() external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function accrualBlockNumber() external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xed463584a5a9991a05eb8b39ac6fcb454c9ff914d963db93f87a26d7dd8ba30f\",\"license\":\"MIT\"},\"contracts/swap/aggressive/ICTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\ninterface ICTokenFactory {\\r\\n    // \\u6839\\u636e token \\u5730\\u5740\\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 ctoken \\u5730\\u5740\\r\\n    function getCTokenAddressPure(address token) external view returns (address);\\r\\n\\r\\n    // \\u6839\\u636e ctoken \\u5730\\u5740\\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 token \\u5730\\u5740\\r\\n    function getTokenAddress(address cToken) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a01d37b64a4065fecc3d2fe735d2e151e632bc61317de0f212ee6d526568f77\",\"license\":\"MIT\"},\"contracts/swap/aggressive/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x23b94bd1e3bcc3eb3ed7f46e4b82e8ef11810af8c015794dd8bcf3d51a3cf0e7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/IUniswapV2Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Math.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./UniERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface IUniswapV2Exchange {\\r\\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n}\\r\\n\\r\\n\\r\\nlibrary UniswapV2ExchangeLib {\\r\\n    using Math for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using UniERC20 for IERC20;\\r\\n\\r\\n    function getReturn(\\r\\n        IUniswapV2Exchange exchange,\\r\\n        IERC20 fromToken,\\r\\n        IERC20 destToken,\\r\\n        uint amountIn\\r\\n    ) internal view returns (uint256 result, bool needSync, bool needSkim) {\\r\\n        uint256 reserveIn = fromToken.uniBalanceOf(address(exchange));\\r\\n        uint256 reserveOut = destToken.uniBalanceOf(address(exchange));\\r\\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\\r\\n        if (fromToken > destToken) {\\r\\n            (reserve0, reserve1) = (reserve1, reserve0);\\r\\n        }\\r\\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\\r\\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\\r\\n\\r\\n        uint256 amountInWithFee = amountIn.mul(997);\\r\\n        uint256 numerator = amountInWithFee.mul(Math.min(reserveOut, reserve1));\\r\\n        uint256 denominator = Math.min(reserveIn, reserve0).mul(1000).add(amountInWithFee);\\r\\n        result = (denominator == 0) ? 0 : numerator.div(denominator);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ab57d81100781c12e9cf32a68ba4afe6e0e209f620cb93a69a58bae9ddf2bdd\",\"license\":\"MIT\"},\"contracts/swap/aggressive/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./IUniswapV2Exchange.sol\\\";\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Exchange pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint reserveA, uint reserveB);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router {\\r\\n    function factory() external view returns (IUniswapV2Factory);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IEBankV2Router {\\r\\n    function factory() external view returns (IUniswapV2Factory);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokensUnderlying(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokensUnderlying(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETHUnderlying(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n}\",\"keccak256\":\"0x94ee921515fc1160f86cea3cad29a2d713b2a6e1a9114cbdb74604bd51c043e2\",\"license\":\"MIT\"},\"contracts/swap/aggressive/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract IWETH is IERC20 {\\r\\n    function deposit() external virtual payable;\\r\\n\\r\\n    function withdraw(uint256 amount) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x51352637310347dd11e7132157a7257ebd50e2f3ae19589fd7751d06d88800a9\",\"license\":\"MIT\"},\"contracts/swap/aggressive/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xae28964ea0ef66ab169ac55cd33922bbc329897791df496dd3f29fc5c2914f4d\",\"license\":\"MIT\"},\"contracts/swap/aggressive/OneSpilt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\nimport \\\"./UniERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Exchange.sol\\\";\\r\\nimport \\\"./ICTokenFactory.sol\\\";\\r\\nimport \\\"./ICERC20.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract OneSplit is Ownable {\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint256;\\r\\n    // using DisableFlags for uint256;\\r\\n\\r\\n    using UniERC20 for IERC20;\\r\\n    using UniERC20 for IWETH;\\r\\n    using UniswapV2ExchangeLib for IUniswapV2Exchange;\\r\\n    // using ChaiHelper for IChai;\\r\\n\\r\\n    IWETH public weth; // = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\r\\n    address public ctokenFactory;\\r\\n\\r\\n    struct SwapAddr {\\r\\n        address router;        // router \\r\\n        uint256 flag; // pool | flag, ctokenFactory | flag\\r\\n    }\\r\\n\\r\\n    SwapAddr[] public swaps;\\r\\n    // IUniswapV2Router[] public routers; // = [];\\r\\n    //   IUniswapV2Factory(0x6Cf6749FE8Be5Db551a9962504F10a8467361754),\\r\\n    //   IUniswapV2Factory(0x1eA875068D325AF621Dfd9B63C461E7536149b1F)\\r\\n    // ];\\r\\n    // IUniswapV2Factory mdexFactory = 0xb0b670fc1F7724119963018DB0BfA86aDb22d941;\\r\\n    // IUniswapV2Factory bxhFactory = 0xB6B1fE87cAa52D968832a5053116af08f4601475;\\r\\n    uint256 private constant _ADDRESS_MASK =   0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\r\\n    uint256 private constant _FLAG_MASK    =   0xffffffffffffffffffffffff0000000000000000000000000000000000000000;\\r\\n\\r\\n    uint256 private constant _REVERSE_MASK =   0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant _WETH_MASK =      0x4000000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n    // \\u7a33\\u5b9a\\u5e01\\u5151\\u6362\\r\\n    uint private constant _SWAP_CURVE    = 0x1000000000000000000000000000000000000000000000000000000000000000;\\r\\n    // ctoken \\u5151\\u6362\\r\\n    uint private constant _SWAP_COMPOUND = 0x0800000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n    // \\u5bf9\\u4e8e compound \\u4ea4\\u6613\\u6240, \\u76f4\\u63a5\\u5151\\u6362 ctoken \\r\\n    uint public constant FLAG_SWAP_DIRECT = 0x0400000000000000000000000000000000000000000000000000000000000000;\\r\\n    // \\u4f7f\\u7528 router \\u800c\\u4e0d\\u662f pair \\u6765\\u5151\\u6362\\r\\n    uint public constant FLAG_SWAP_ROUTER = 0x0200000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n    constructor(address _weth, address _ctokenFactory) public {\\r\\n        weth = IWETH(_weth);\\r\\n        ctokenFactory = _ctokenFactory;\\r\\n    }\\r\\n\\r\\n    struct Args {\\r\\n        IERC20 fromToken;\\r\\n        IERC20 destToken;\\r\\n        IERC20[] midTokens;\\r\\n        uint256 amount;\\r\\n        uint256 parts;\\r\\n        uint256 flags;\\r\\n        uint256 slip;  // \\u5206\\u6bcd 10000\\r\\n        uint256 destTokenEthPriceTimesGasPrice;\\r\\n    }\\r\\n\\r\\n    struct CalcVars {\\r\\n      IUniswapV2Factory factory;\\r\\n      IERC20 fromToken;\\r\\n      IERC20 midToken;\\r\\n      IERC20 destToken;\\r\\n      uint256[] amounts;\\r\\n      uint256 flags;\\r\\n      uint256 destTokenEthPriceTimesGasPrice;\\r\\n      bool atLeastOnePositive;\\r\\n    }\\r\\n\\r\\n    struct SwapParm {\\r\\n        address srcToken;\\r\\n        address destToken;\\r\\n        uint routes;\\r\\n        uint returnAmt;\\r\\n        uint[] amts;\\r\\n        uint[] outAmts;\\r\\n        uint[] minOutAmts;\\r\\n        uint[] flags;\\r\\n        bytes32[][] pools;\\r\\n    }\\r\\n\\r\\n    function resetSwaps() external onlyOwner {\\r\\n        uint total = swaps.length;\\r\\n        for (uint i = 0; i < total; i ++) {\\r\\n            swaps.pop();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addUniswap(address _router, uint _flag) external onlyOwner {\\r\\n        swaps.push(SwapAddr({\\r\\n            router: _router, \\r\\n            flag: _flag\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    function addCurveSwap(address _pool, uint _flag) external onlyOwner {\\r\\n        swaps.push(SwapAddr({\\r\\n            router: _pool,\\r\\n            flag: _SWAP_CURVE | _flag\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    // compound \\u4ea4\\u6613\\u6240\\u5fc5\\u987b\\u4f7f\\u7528 router \\u4ea4\\u6613 !!!\\r\\n    function addCompoundSwap(address _router, address _ctokenFactory, uint _flag) external onlyOwner {\\r\\n        swaps.push(SwapAddr({\\r\\n            router: _router,\\r\\n            flag: uint(_ctokenFactory) | _SWAP_COMPOUND | FLAG_SWAP_ROUTER | _flag\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    // ctoken, midToken \\u8f93\\u5165\\u8f93\\u51fa\\u90fd\\u662f ctoken\\r\\n    // function getExpectedReturnWithGasCToken(Args memory args) \\r\\n    //     public\\r\\n    //     view\\r\\n    //     returns(\\r\\n    //         uint256 returnAmount,\\r\\n    //         uint256 estimateGasAmount,\\r\\n    //         uint256[] memory distribution,\\r\\n    //         bytes memory data\\r\\n    //     ) {\\r\\n\\r\\n    // }\\r\\n\\r\\n    // token, midTokens \\u90fd\\u662f token\\r\\n    // amount \\u4e5f\\u662f\\u4ee5 token \\u7684\\u6570\\u91cf\\r\\n    function getExpectedReturnWithGas(Args memory args)\\r\\n        public\\r\\n        view\\r\\n        returns(\\r\\n            uint256 returnAmount,\\r\\n            uint256 estimateGasAmount,\\r\\n            uint256[] memory distribution,\\r\\n            bytes memory data\\r\\n        ) {\\r\\n        uint routes = (1 + args.midTokens.length) * swaps.length;\\r\\n        uint256[] memory amounts = _linearInterpolation(args.amount, args.parts);\\r\\n        int256[][] memory matrix = new int256[][](routes);\\r\\n        uint256[] memory gases = new uint256[](routes);\\r\\n\\r\\n        console.log(\\\"before _getFactoryResults\\\", swaps.length);\\r\\n        {\\r\\n          CalcVars memory localVar;\\r\\n          // todo fromToken destToken \\u8f6c\\u6362\\u4e3a token\\r\\n          localVar.fromToken = args.fromToken;\\r\\n          localVar.destToken = args.destToken;\\r\\n          localVar.amounts = amounts; // \\u662f\\u5426\\u9700\\u8981\\u6839\\u636e amount\\r\\n          localVar.destTokenEthPriceTimesGasPrice = args.destTokenEthPriceTimesGasPrice;\\r\\n\\r\\n          uint n = 0;\\r\\n          // bool atLeastOnePositive = false;\\r\\n          for (uint i = 0; i < swaps.length; i ++ ) {\\r\\n              console.log(\\\"swa[%d].router:\\\", i, swaps[i].router);\\r\\n              localVar.factory = IUniswapV2Router(swaps[i].router).factory();\\r\\n              console.log(\\\"factory\\\", address(localVar.factory));\\r\\n              localVar.flags = swaps[i].flag;\\r\\n              _getFactoryResults(localVar, args.midTokens, matrix, gases, n);\\r\\n              // bool pos = _getFactoryResults(localVar, midTokens, matrix, n, destTokenEthPriceTimesGasPrice);\\r\\n              // atLeastOnePositive = atLeastOnePositive || pos;\\r\\n              n += 1 + args.midTokens.length;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        console.log(\\\"before _findBestDistribution:\\\", args.parts, matrix.length);\\r\\n        \\r\\n        (, distribution) = _findBestDistribution(args.parts, matrix);\\r\\n\\r\\n        console.log(\\\"before _getReturnAndGasByDistribution\\\");\\r\\n\\r\\n        (returnAmount, estimateGasAmount, data) = _getReturnAndGasByDistribution(args, distribution, matrix, gases);\\r\\n        //     Args({\\r\\n        //         fromToken: fromToken,\\r\\n        //         destToken: destToken,\\r\\n        //         amount: amount,\\r\\n        //         parts: parts,\\r\\n        //         flags: flags,\\r\\n        //         destTokenEthPriceTimesGasPrice: destTokenEthPriceTimesGasPrice,\\r\\n        //         distribution: distribution,\\r\\n        //         matrix: matrix,\\r\\n        //         gases: gases,\\r\\n        //     })\\r\\n        // );\\r\\n        return (returnAmount, estimateGasAmount, distribution, data);\\r\\n    }\\r\\n\\r\\n    function _getReturnAndGasByDistribution(\\r\\n        Args memory args,\\r\\n        uint[] memory distribution,\\r\\n        int[][] memory matrix,\\r\\n        uint[] memory gases\\r\\n    ) internal view returns(uint256 returnAmount, uint256 estimateGasAmount, bytes memory data) {\\r\\n        SwapParm memory param;\\r\\n        // uint routes;\\r\\n        for (uint i = 0; i < distribution.length; i ++) {\\r\\n            if (distribution[i] > 0) {\\r\\n                param.routes ++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        param.srcToken = address(args.fromToken);\\r\\n        param.destToken = address(args.destToken);\\r\\n        param.amts = new uint[](param.routes);\\r\\n        param.outAmts = new uint[](param.routes);\\r\\n        param.minOutAmts = new uint[](param.routes);\\r\\n        param.flags = new uint[](param.routes);\\r\\n        param.pools = new bytes32[][](param.routes);\\r\\n\\r\\n        uint total;\\r\\n        uint idx;\\r\\n        // uint amtIn = args.amount.mul(args.parts);\\r\\n        // uint slip = 10000 - args.slip;\\r\\n        \\r\\n        for (uint i = 0; i < distribution.length; i ++) {\\r\\n            if (distribution[i] > 0) {\\r\\n                estimateGasAmount = estimateGasAmount.add(gases[i]);\\r\\n                int256 value = matrix[i][distribution[i]] + int256(gases[i].mul(args.destTokenEthPriceTimesGasPrice).div(1e18));\\r\\n                returnAmount = returnAmount.add(uint256(value));\\r\\n\\r\\n                if (idx == param.routes - 1) {\\r\\n                    // \\u5f25\\u8865\\u7cbe\\u5ea6\\r\\n                    param.amts[idx] = args.amount - total;\\r\\n                } else {\\r\\n                    param.amts[idx] = args.amount.mul(distribution[i]).div(args.parts);\\r\\n                }\\r\\n\\r\\n                {\\r\\n                    param.outAmts[idx] = uint256(value);\\r\\n                    param.minOutAmts[idx] = uint256(value).mul(10000 - args.slip).div(10000);\\r\\n                    total += param.amts[idx];\\r\\n                }\\r\\n\\r\\n                PairParam memory pp;\\r\\n                uint units = args.midTokens.length + 1;\\r\\n                pp.router = IUniswapV2Router(swaps[i/units].router);\\r\\n                pp.flag = args.flags | swaps[i/units].flag;\\r\\n                pp.srcToken = args.fromToken;\\r\\n                pp.destToken = args.destToken;\\r\\n                pp.feeRate = 997000;\\r\\n                    // uint units = args.midTokens.length+1;\\r\\n                    // uint flag = args.flags | swaps[i/(args.midTokens.length+1)].flag;\\r\\n                if ((i % units) != 0) {\\r\\n                    // \\u6709\\u4e2d\\u95f4\\u4ea4\\u6613\\u5bf9\\u7684\\u60c5\\u51b5\\r\\n                    // param.pools[idx] = \\r\\n                    pp.midToken = args.midTokens[(i%units)-1];\\r\\n                }\\r\\n                param.pools[idx] = _buildPoolData(pp);\\r\\n                param.flags[idx] = uint(swaps[i/units].flag & _FLAG_MASK);\\r\\n\\r\\n                idx ++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        param.returnAmt = returnAmount;\\r\\n        data = abi.encode(param);\\r\\n    }\\r\\n\\r\\n    struct PairParam {\\r\\n      IUniswapV2Router router;\\r\\n      uint flag;\\r\\n      IERC20 srcToken;\\r\\n      IERC20 midToken;\\r\\n      IERC20 destToken;\\r\\n      uint feeRate;\\r\\n    }\\r\\n\\r\\n    // \\u4f7f\\u7528 router \\u6765 swap\\r\\n    // \\r\\n    function _buildRouterData(PairParam memory pairParam, bool useCtoken) private view returns (bytes32[] memory) {\\r\\n        uint feeRate = pairParam.feeRate << 160;\\r\\n        //console.log(\\\"_buildPoolData:\\\", feeRate);\\r\\n        IERC20 fromTokenReal = pairParam.srcToken.isETH() ? weth : pairParam.srcToken;\\r\\n        IERC20 destTokenReal = pairParam.destToken.isETH() ? weth : pairParam.destToken;\\r\\n        IERC20 midToken = pairParam.midToken;\\r\\n        if (useCtoken) {\\r\\n            address _ctokenFactory = address(pairParam.flag & _ADDRESS_MASK);\\r\\n            midToken = IERC20(_getCtokenAddress(_ctokenFactory, midToken));\\r\\n            fromTokenReal = IERC20(_getCtokenAddress(_ctokenFactory, fromTokenReal));\\r\\n            destTokenReal = IERC20(_getCtokenAddress(_ctokenFactory, destTokenReal));\\r\\n        }\\r\\n\\r\\n        bytes32[] memory data;\\r\\n        if (address(pairParam.midToken) == address(0)) {\\r\\n            data = new bytes32[](3); //  router + path[2]\\r\\n            // data[0] = bytes32(pairParam.flag & _FLAG_MASK);\\r\\n            data[0] = bytes32(uint(address(pairParam.router)));\\r\\n            data[1] = bytes32(uint(address(fromTokenReal)));\\r\\n            data[2] = bytes32(uint(address(destTokenReal)));\\r\\n        } else {\\r\\n            data = new bytes32[](4); //  router + path[3]\\r\\n            // data[0] = bytes32(pairParam.flag & _FLAG_MASK);\\r\\n            data[0] = bytes32(uint(address(pairParam.router)));\\r\\n            data[1] = bytes32(uint(address(fromTokenReal)));\\r\\n            data[2] = bytes32(uint(address(midToken)));\\r\\n            data[3] = bytes32(uint(address(destTokenReal)));\\r\\n        }\\r\\n\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    // \\u6839\\u636e token \\u67e5\\u627e\\u5176 ctoken \\u5730\\u5740\\r\\n    function _getCtokenAddress(address _ctokenFactory, IERC20 token) private view returns (address) {\\r\\n        address ctoken = ICTokenFactory(_ctokenFactory).getCTokenAddressPure(address(token));\\r\\n\\r\\n        if (ctoken == address(0)) {\\r\\n            // \\u6b64\\u79cd\\u60c5\\u51b5\\u8ba4\\u4e3a token \\u5c31\\u662f ctoken\\r\\n            return address(0); // address(token);\\r\\n        }\\r\\n        return ctoken;\\r\\n    }\\r\\n\\r\\n    // pair  \\u4ea4\\u6613\\u65b9\\u5f0f: flag, pair|flag\\r\\n    // router \\u4ea4\\u6613\\u65b9\\u5f0f: flag, router, []path\\r\\n    // useCtoken: \\u662f\\u5426\\u662f\\u5151\\u6362ctoken, \\u5728\\u5151\\u6362\\u7684\\u65f6\\u5019\\u5904\\u7406\\u8be5\\u6807\\u8bc6\\r\\n    // feeRate \\u7684\\u5206\\u6bcd\\u662f 1000_000\\r\\n    function _buildPoolData(PairParam memory pairParam) private view returns (bytes32[] memory) {\\r\\n        bytes32[] memory data;\\r\\n        bool useRouter = (pairParam.flag & FLAG_SWAP_ROUTER) != 0;\\r\\n        bool useCtoken = (pairParam.flag & FLAG_SWAP_DIRECT) != 0;\\r\\n        \\r\\n        if (useRouter) {\\r\\n            return _buildRouterData(pairParam, useCtoken);\\r\\n        }\\r\\n\\r\\n        uint feeRate = pairParam.feeRate << 160;\\r\\n        //console.log(\\\"_buildPoolData:\\\", feeRate);\\r\\n        IERC20 fromTokenReal = pairParam.srcToken.isETH() ? weth : pairParam.srcToken;\\r\\n        IERC20 destTokenReal = pairParam.destToken.isETH() ? weth : pairParam.destToken;\\r\\n        // if (useCtoken) {\\r\\n        //     // \\u4e0d\\u9700\\u8981\\u5904\\u7406 path \\u90fd\\u662f token token/token \\u7684 pair \\u5730\\u5740\\u4e0e ctoken/ctoken \\u7684 pair \\u5730\\u5740\\u76f8\\u540c\\r\\n        // }\\r\\n        address[] memory path;\\r\\n\\r\\n        // data[0] = flag\\r\\n        if (address(pairParam.midToken) == address(0)) {\\r\\n            data = new bytes32[](1);\\r\\n            path = new address[](2);\\r\\n            path[0] = address(fromTokenReal);\\r\\n            path[1] = address(destTokenReal);\\r\\n        } else {\\r\\n            data = new bytes32[](2);\\r\\n            path = new address[](3);\\r\\n            if (useCtoken) {\\r\\n                address _ctokenFactory = address(pairParam.flag & _ADDRESS_MASK);\\r\\n                path[0] = _getCtokenAddress(_ctokenFactory, fromTokenReal);\\r\\n                path[1] = _getCtokenAddress(_ctokenFactory, pairParam.midToken);\\r\\n                path[2] = _getCtokenAddress(_ctokenFactory, destTokenReal);\\r\\n            } else {\\r\\n                path[0] = address(fromTokenReal);\\r\\n                path[1] = address(pairParam.midToken);\\r\\n                path[2] = address(destTokenReal);\\r\\n            }\\r\\n        }\\r\\n        // data[0] = bytes32(pairParam.flag & _FLAG_MASK);\\r\\n\\r\\n        for (uint i = 0; i < path.length - 1; i ++) {\\r\\n            address t0 = path[i];\\r\\n            address t1 = path[i+1];\\r\\n\\r\\n            address pair = address(pairParam.router.factory().getPair(IERC20(t0), IERC20(t1)));\\r\\n            require(pair != address(0), \\\"pair not exist\\\");\\r\\n            console.log(\\\"t0: %s t1: %s pair: %s\\\", t0, t1, pair);\\r\\n            uint pool = uint(pair);\\r\\n            pool = feeRate | pool;\\r\\n            // reverse\\r\\n            address token0 = IUniswapV2Pair(pair).token0();\\r\\n            console.log(\\\"token0: %s\\\", token0);\\r\\n            if (token0 != t0) {\\r\\n              pool = pool | _REVERSE_MASK;\\r\\n            }\\r\\n            data[i] = bytes32(pool);\\r\\n        }\\r\\n        if (pairParam.destToken.isETH()) {\\r\\n          data[data.length - 1] = bytes32(uint(data[data.length - 1]) | _WETH_MASK);\\r\\n        }\\r\\n\\r\\n        console.log(\\\"data[0]:\\\", uint(data[0]));\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    function _getFactoryResults(CalcVars memory localVar,\\r\\n      IERC20[] memory midTokens,\\r\\n      int256[][] memory matrix,\\r\\n      uint256[] memory gases,\\r\\n      uint n) internal view {\\r\\n        bool atLeastOnePositive = false;\\r\\n        // Prepend zero and sub gas\\r\\n\\r\\n        (uint256[] memory amts, uint gas) = _calculateUniswapV2(localVar);\\r\\n        gases[n] = gas;\\r\\n        gas = gas.mul(localVar.destTokenEthPriceTimesGasPrice).div(1e18);\\r\\n        matrix[n] = new int256[](amts.length + 1);\\r\\n        for (uint j = 0; j < amts.length; j++) {\\r\\n            matrix[n][j + 1] = int256(amts[j]) - int256(gas);\\r\\n            atLeastOnePositive = atLeastOnePositive || (matrix[n][j + 1] > 0);\\r\\n        }\\r\\n        n ++;\\r\\n\\r\\n        for (uint i = 0; i < midTokens.length; i ++) {\\r\\n            localVar.midToken = midTokens[i];\\r\\n            // (uint256[] memory amts, uint gas) = _calculateUniswapV2OverMidToken(localVar);\\r\\n            (amts, gas) = _calculateUniswapV2OverMidToken(localVar);\\r\\n            gases[n] = gas;\\r\\n            gas = gas.mul(localVar.destTokenEthPriceTimesGasPrice).div(1e18);\\r\\n            \\r\\n            matrix[n] = new int256[](amts.length + 1);\\r\\n            for (uint j = 0; j < amts.length; j++) {\\r\\n                matrix[n][j + 1] = int256(amts[j]) - int256(gas);\\r\\n                atLeastOnePositive = atLeastOnePositive || (matrix[n][j + 1] > 0);\\r\\n            }\\r\\n            n ++;\\r\\n        }\\r\\n\\r\\n        if (atLeastOnePositive) {\\r\\n          localVar.atLeastOnePositive = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _findBestDistribution(\\r\\n        uint256 s,                // parts\\r\\n        int256[][] memory amounts // exchangesReturns\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns(\\r\\n            int256 returnAmount,\\r\\n            uint256[] memory distribution\\r\\n        )\\r\\n    {\\r\\n        uint256 n = amounts.length;\\r\\n\\r\\n        int256[][] memory answer = new int256[][](n); // int[n][s+1]\\r\\n        uint256[][] memory parent = new uint256[][](n); // int[n][s+1]\\r\\n\\r\\n        for (uint i = 0; i < n; i++) {\\r\\n            answer[i] = new int256[](s + 1);\\r\\n            parent[i] = new uint256[](s + 1);\\r\\n        }\\r\\n\\r\\n        for (uint j = 0; j <= s; j++) {\\r\\n            answer[0][j] = amounts[0][j];\\r\\n            for (uint i = 1; i < n; i++) {\\r\\n                answer[i][j] = 0;\\r\\n            }\\r\\n            parent[0][j] = 0;\\r\\n        }\\r\\n\\r\\n        for (uint i = 1; i < n; i++) {\\r\\n            for (uint j = 0; j <= s; j++) {\\r\\n                answer[i][j] = answer[i - 1][j];\\r\\n                parent[i][j] = j;\\r\\n\\r\\n                for (uint k = 1; k <= j; k++) {\\r\\n                    if (answer[i - 1][j - k] + amounts[i][k] > answer[i][j]) {\\r\\n                        answer[i][j] = answer[i - 1][j - k] + amounts[i][k];\\r\\n                        parent[i][j] = j - k;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        distribution = new uint256[](n);\\r\\n\\r\\n        uint256 partsLeft = s;\\r\\n        for (uint curExchange = n - 1; partsLeft > 0; curExchange--) {\\r\\n            distribution[curExchange] = partsLeft - parent[curExchange][partsLeft];\\r\\n            partsLeft = parent[curExchange][partsLeft];\\r\\n        }\\r\\n\\r\\n        returnAmount = (answer[n - 1][s] == 0) ? 0 : answer[n - 1][s];\\r\\n    }\\r\\n\\r\\n    function _calculateUniswapFormula(uint256 fromBalance, uint256 toBalance, uint256 amount) internal pure returns(uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return amount.mul(toBalance).mul(997).div(\\r\\n            fromBalance.mul(1000).add(amount.mul(997))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _calculateUniswapFormulaCompound(uint256 fromBalance, uint256 toBalance, uint256 amount, uint rateIn, uint rateOut) internal pure returns(uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        amount = amount.mul(1e18).div(rateIn);\\r\\n        uint amtOut = amount.mul(toBalance).mul(997).div(\\r\\n                fromBalance.mul(1000).add(amount.mul(997))\\r\\n            );\\r\\n        return amtOut.mul(rateOut).div(1e18);\\r\\n    }\\r\\n\\r\\n    // \\u8ba1\\u7b97 ctoken \\u7684 exchange rate\\r\\n    function _calcExchangeRate(ICERC20 ctoken) private view returns (uint) {\\r\\n        uint rate = ctoken.exchangeRateStored();\\r\\n        uint supplyRate = ctoken.supplyRatePerBlock();\\r\\n        uint lastBlock = ctoken.accrualBlockNumber();\\r\\n        uint blocks = block.number.sub(lastBlock);\\r\\n        uint inc = rate.mul(supplyRate).mul(blocks);\\r\\n        return rate.add(inc);\\r\\n    }\\r\\n\\r\\n    // \\u4f7f\\u7528 token \\u6765\\u8ba1\\u7b97\\u6536\\u76ca\\r\\n    function _calculateUniswapV2(CalcVars memory lvar) internal view returns(uint256[] memory rets, uint256 gas) {\\r\\n        // IUniswapV2Factory factory = lvar.factory;\\r\\n        bool compound = (lvar.flags & _SWAP_COMPOUND) != 0;\\r\\n        uint exchangeRateFrom;\\r\\n        uint exchangeRateDest;\\r\\n        // uint256[] memory amounts = lvar.amounts;\\r\\n        // uint256 /*flags*/\\r\\n        rets = new uint256[](lvar.amounts.length);\\r\\n\\r\\n        IERC20 fromTokenReal = lvar.fromToken.isETH() ? weth : lvar.fromToken;\\r\\n        IERC20 destTokenReal = lvar.destToken.isETH() ? weth : lvar.destToken;\\r\\n        if (compound) {\\r\\n            address _ctokenFactory = address(lvar.flags & _ADDRESS_MASK);\\r\\n            fromTokenReal = IERC20(_getCtokenAddress(_ctokenFactory, fromTokenReal));\\r\\n            destTokenReal = IERC20(_getCtokenAddress(_ctokenFactory, destTokenReal));\\r\\n            // \\u4e0d\\u4f1a\\u8fd4\\u56de 0\\r\\n            if ((address(fromTokenReal) == address(0)) || (address(destTokenReal) == address(0))) {\\r\\n                // gas = 50_000;\\r\\n                return (rets, 50_000);\\r\\n            }\\r\\n\\r\\n            exchangeRateFrom = _calcExchangeRate(ICERC20(address(fromTokenReal)));\\r\\n            exchangeRateDest = _calcExchangeRate(ICERC20(address(destTokenReal)));\\r\\n\\r\\n            console.log(\\\"compound exchange rat:\\\", exchangeRateFrom, exchangeRateDest);\\r\\n        }\\r\\n\\r\\n        IUniswapV2Exchange exchange = lvar.factory.getPair(fromTokenReal, destTokenReal);\\r\\n        if (exchange != IUniswapV2Exchange(0)) {\\r\\n            uint256 fromTokenBalance = fromTokenReal.uniBalanceOf(address(exchange));\\r\\n            uint256 destTokenBalance = destTokenReal.uniBalanceOf(address(exchange));\\r\\n            for (uint i = 0; i < lvar.amounts.length; i++) {\\r\\n                if (compound) {\\r\\n                    rets[i] = _calculateUniswapFormulaCompound(fromTokenBalance, destTokenBalance, lvar.amounts[i], exchangeRateFrom, exchangeRateDest);\\r\\n                } else {\\r\\n                    rets[i] = _calculateUniswapFormula(fromTokenBalance, destTokenBalance, lvar.amounts[i]);\\r\\n                }\\r\\n            }\\r\\n            return (rets, 50_000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _linearInterpolation(\\r\\n        uint256 value,\\r\\n        uint256 parts\\r\\n    ) internal pure returns(uint256[] memory rets) {\\r\\n        rets = new uint256[](parts);\\r\\n        for (uint i = 0; i < parts; i++) {\\r\\n            rets[i] = value.mul(i + 1).div(parts);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calculateUniswapV2OverMidToken(\\r\\n        CalcVars memory lvar\\r\\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\\r\\n        // rets = _linearInterpolation(amount, parts);\\r\\n        // IUniswapV2Factory factory = var.factory;\\r\\n        // IERC20 fromToken = var.fromToken;\\r\\n        // IERC20 midToken = var.midToken;\\r\\n        // IERC20 destToken = var.destToken;\\r\\n        // uint256[] memory amounts = var.amounts;\\r\\n        // // uint256 parts,\\r\\n        // uint256 flags = var.flags;\\r\\n        CalcVars memory tmpVar;\\r\\n        tmpVar.factory = lvar.factory;\\r\\n        tmpVar.fromToken = lvar.fromToken;\\r\\n        // tmpVar.midToken = lvar.factory;\\r\\n        tmpVar.destToken = lvar.midToken;\\r\\n        tmpVar.amounts = lvar.amounts;\\r\\n        tmpVar.flags = lvar.flags;\\r\\n\\r\\n        uint256 gas1;\\r\\n        uint256 gas2;\\r\\n        (rets, gas1) = _calculateUniswapV2(tmpVar);\\r\\n        tmpVar.amounts = rets;\\r\\n        tmpVar.fromToken = lvar.midToken;\\r\\n        tmpVar.destToken = lvar.destToken;\\r\\n        (rets, gas2) = _calculateUniswapV2(tmpVar);\\r\\n        return (rets, gas1 + gas2);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5613c531be832b4c035ae5b2dd2985e9e643e8d1a11ae3cf5ecfd3f59bc8ab0e\",\"license\":\"MIT\"},\"contracts/swap/aggressive/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x51aa67982e68a104022e88a37a46efb6b04287a282033ab8688a35e52e7e7655\",\"license\":\"MIT\"},\"contracts/swap/aggressive/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x2c8388370e55c92685918acdafb0263e8e8882f56a50c7e922e4c8ba1c961aac\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant WAD = 10 ** 18;\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7d6656a8d66b238405e36506908726a329c023e7679a43c400e08a80e383d5fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/aggressive/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\nlibrary UniERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n    IERC20 private constant _ZERO_ADDRESS = IERC20(0);\\r\\n\\r\\n    function isETH(IERC20 token) internal pure returns (bool) {\\r\\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\r\\n    }\\r\\n\\r\\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\r\\n        if (isETH(token)) {\\r\\n            return account.balance;\\r\\n        } else {\\r\\n            return token.balanceOf(account);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\\r\\n        if (amount > 0) {\\r\\n            if (isETH(token)) {\\r\\n                to.transfer(amount);\\r\\n            } else {\\r\\n                _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uniApprove(IERC20 token, address to, uint256 amount) internal {\\r\\n        require(!isETH(token), \\\"Approve called on ETH\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(abi.encodeWithSelector(token.approve.selector, to, amount));\\r\\n\\r\\n        if (!success || (returndata.length > 0 && !abi.decode(returndata, (bool)))) {\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, 0));\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, amount));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa23b2015828893a7d57349ff7ea22219b006f86f03a7fb3043275454e77a4e6\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80639235aebb1161008c578063c7a8281111610066578063c7a8281114610182578063f09c58291461018a578063f2fde38b146101ab578063fd3eb91b146101be576100df565b80639235aebb14610144578063a6260e811461014c578063ba6c1d341461016f576100df565b8063715018a6116100bd578063715018a61461011f578063757607f8146101275780638da5cb5b1461013c576100df565b806325c9e276146100e45780633fc8cef3146101025780636382a58a1461010a575b600080fd5b6100ec6101d1565b6040516100f99190613129565b60405180910390f35b6100ec6101e0565b61011d610118366004612ef9565b6101ef565b005b61011d6102f2565b61012f61037b565b6040516100f99190613497565b6100ec610383565b61011d610392565b61015f61015a366004612f24565b610422565b6040516100f994939291906134a0565b61011d61017d366004612eb9565b6107b2565b61012f6108b1565b61019d610198366004612fec565b6108b9565b6040516100f992919061313d565b61011d6101b9366004612e81565b6108ee565b61011d6101cc366004612ef9565b6109ae565b6002546001600160a01b031681565b6001546001600160a01b031681565b6101f7610a82565b6001600160a01b0316610208610383565b6001600160a01b0316146102375760405162461bcd60e51b815260040161022e9061338b565b60405180910390fd5b604080518082019091526001600160a01b0392831681527f100000000000000000000000000000000000000000000000000000000000000091909117602082019081526003805460018101825560009190915291517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b600290930292830180546001600160a01b031916919094161790925590517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c90910155565b6102fa610a82565b6001600160a01b031661030b610383565b6001600160a01b0316146103315760405162461bcd60e51b815260040161022e9061338b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600160f91b81565b6000546001600160a01b031690565b61039a610a82565b6001600160a01b03166103ab610383565b6001600160a01b0316146103d15760405162461bcd60e51b815260040161022e9061338b565b60035460005b8181101561041e5760038054806103ea57fe5b60008281526020812060026000199093019283020180546001600160a01b03191681556001908101919091559155016103d7565b5050565b6000806060806000600380549050866040015151600101029050606061045087606001518860800151610a86565b905060608267ffffffffffffffff8111801561046b57600080fd5b5060405190808252806020026020018201604052801561049f57816020015b606081526020019060019003908161048a5790505b50905060608367ffffffffffffffff811180156104bb57600080fd5b506040519080825280602002602001820160405280156104e5578160200160208202803683370190505b5060408051808201909152601981527f6265666f7265205f676574466163746f7279526573756c747300000000000000602082015260035491925061052991610b14565b610531612d17565b89516001600160a01b039081166020808401919091528b01511660608201526080810184905260e08a015160c08201526000805b600354811015610718576105d56040518060400160405280600f81526020017f7377615b25645d2e726f757465723a000000000000000000000000000000000081525082600384815481106105b657fe5b60009182526020909120600290910201546001600160a01b0316610b72565b600381815481106105e257fe5b600091825260209182902060029091020154604080517fc45a015500000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263c45a015592600480840193829003018186803b15801561064957600080fd5b505afa15801561065d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106819190612e9d565b6001600160a01b0316835260408051808201909152600781527f666163746f727900000000000000000000000000000000000000000000000000602082015283516106cc9190610bd7565b600381815481106106d957fe5b9060005260206000209060020201600101548360a0018181525050610705838d60400151878786610c35565b60408c0151516001920182019101610565565b5050506107606040518060400160405280601d81526020017f6265666f7265205f66696e6442657374446973747269627574696f6e3a0000008152508a608001518451610f0b565b61076e896080015183610f6b565b905080965050610795604051806060016040528060258152602001613544602591396114d2565b6107a189878484611531565b919b909a5096985096505050505050565b6107ba610a82565b6001600160a01b03166107cb610383565b6001600160a01b0316146107f15760405162461bcd60e51b815260040161022e9061338b565b604080518082019091526001600160a01b039384168152918316177f0a00000000000000000000000000000000000000000000000000000000000000176020820190815260038054600181018255600091909152915160029092027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b81018054939094166001600160a01b03199093169290921790925590517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c90910155565b600160fa1b81565b600381815481106108c657fe5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b6108f6610a82565b6001600160a01b0316610907610383565b6001600160a01b03161461092d5760405162461bcd60e51b815260040161022e9061338b565b6001600160a01b0381166109535760405162461bcd60e51b815260040161022e90613263565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6109b6610a82565b6001600160a01b03166109c7610383565b6001600160a01b0316146109ed5760405162461bcd60e51b815260040161022e9061338b565b604080518082019091526001600160a01b039283168152602081019182526003805460018101825560009190915290517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b600290920291820180546001600160a01b0319169190941617909255517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c90910155565b3390565b60608167ffffffffffffffff81118015610a9f57600080fd5b50604051908082528060200260200182016040528015610ac9578160200160208202803683370190505b50905060005b82811015610b0d57610aee83610ae88660018501611abc565b90611aff565b828281518110610afa57fe5b6020908102919091010152600101610acf565b5092915050565b61041e8282604051602401610b2a9291906131ea565b60408051601f198184030181529190526020810180516001600160e01b03167f9710a9d000000000000000000000000000000000000000000000000000000000179052611b41565b610bd2838383604051602401610b8a9392919061320c565b60408051601f198184030181529190526020810180516001600160e01b03167fe3849f7900000000000000000000000000000000000000000000000000000000179052611b41565b505050565b61041e8282604051602401610bed929190613183565b60408051601f198184030181529190526020810180516001600160e01b03167f319af33300000000000000000000000000000000000000000000000000000000179052611b41565b600060606000610c4488611b62565b9150915080858581518110610c5557fe5b602002602001018181525050610c84670de0b6b3a7640000610ae88a60c0015184611abc90919063ffffffff16565b9050815160010167ffffffffffffffff81118015610ca157600080fd5b50604051908082528060200260200182016040528015610ccb578160200160208202803683370190505b50868581518110610cd857fe5b602002602001018190525060005b8251811015610d725781838281518110610cfc57fe5b602002602001015103878681518110610d1157fe5b60200260200101518260010181518110610d2757fe5b6020026020010181815250508380610d6857506000878681518110610d4857fe5b60200260200101518260010181518110610d5e57fe5b6020026020010151135b9350600101610ce6565b5060019093019260005b8751811015610ef257878181518110610d9157fe5b60209081029190910101516001600160a01b031660408a0152610db389611e95565b809350819450505081868681518110610dc857fe5b602002602001018181525050610df7670de0b6b3a7640000610ae88b60c0015185611abc90919063ffffffff16565b9150825160010167ffffffffffffffff81118015610e1457600080fd5b50604051908082528060200260200182016040528015610e3e578160200160208202803683370190505b50878681518110610e4b57fe5b602002602001018190525060005b8351811015610ee55782848281518110610e6f57fe5b602002602001015103888781518110610e8457fe5b60200260200101518260010181518110610e9a57fe5b6020026020010181815250508480610edb57506000888781518110610ebb57fe5b60200260200101518260010181518110610ed157fe5b6020026020010151135b9450600101610e59565b5060019485019401610d7c565b508215610f0157600160e08901525b5050505050505050565b610bd2838383604051602401610f239392919061323e565b60408051601f198184030181529190526020810180516001600160e01b03167f969cdd0300000000000000000000000000000000000000000000000000000000179052611b41565b8051600090606090818167ffffffffffffffff81118015610f8b57600080fd5b50604051908082528060200260200182016040528015610fbf57816020015b6060815260200190600190039081610faa5790505b50905060608267ffffffffffffffff81118015610fdb57600080fd5b5060405190808252806020026020018201604052801561100f57816020015b6060815260200190600190039081610ffa5790505b50905060005b838110156110dd578760010167ffffffffffffffff8111801561103757600080fd5b50604051908082528060200260200182016040528015611061578160200160208202803683370190505b5083828151811061106e57fe5b60200260200101819052508760010167ffffffffffffffff8111801561109357600080fd5b506040519080825280602002602001820160405280156110bd578160200160208202803683370190505b508282815181106110ca57fe5b6020908102919091010152600101611015565b5060005b8781116111b057866000815181106110f557fe5b6020026020010151818151811061110857fe5b60200260200101518360008151811061111d57fe5b6020026020010151828151811061113057fe5b602090810291909101015260015b8481101561117a57600084828151811061115457fe5b6020026020010151838151811061116757fe5b602090810291909101015260010161113e565b5060008260008151811061118a57fe5b6020026020010151828151811061119d57fe5b60209081029190910101526001016110e1565b5060015b838110156113995760005b888111611390578360018303815181106111d557fe5b602002602001015181815181106111e857fe5b60200260200101518483815181106111fc57fe5b6020026020010151828151811061120f57fe5b6020026020010181815250508083838151811061122857fe5b6020026020010151828151811061123b57fe5b602090810291909101015260015b8181116113875784838151811061125c57fe5b6020026020010151828151811061126f57fe5b602002602001015189848151811061128357fe5b6020026020010151828151811061129657fe5b60200260200101518660018603815181106112ad57fe5b6020026020010151838503815181106112c257fe5b602002602001015101131561137f578883815181106112dd57fe5b602002602001015181815181106112f057fe5b602002602001015185600185038151811061130757fe5b60200260200101518284038151811061131c57fe5b60200260200101510185848151811061133157fe5b6020026020010151838151811061134457fe5b60200260200101818152505080820384848151811061135f57fe5b6020026020010151838151811061137257fe5b6020026020010181815250505b600101611249565b506001016111bf565b506001016111b4565b508267ffffffffffffffff811180156113b157600080fd5b506040519080825280602002602001820160405280156113db578160200160208202803683370190505b5093508660001984015b8115611461578281815181106113f757fe5b6020026020010151828151811061140a57fe5b6020026020010151820386828151811061142057fe5b60200260200101818152505082818151811061143857fe5b6020026020010151828151811061144b57fe5b60209081029190910101519150600019016113e5565b5082600185038151811061147157fe5b6020026020010151888151811061148457fe5b60200260200101516000146114c2578260018503815181106114a257fe5b602002602001015188815181106114b557fe5b60200260200101516114c5565b60005b9550505050509250929050565b61152e816040516024016114e69190613170565b60408051601f198184030181529190526020810180516001600160e01b03167f41304fac00000000000000000000000000000000000000000000000000000000179052611b41565b50565b600080606061153e612d5a565b60005b875181101561157a57600088828151811061155857fe5b602002602001015111156115725760408201805160010190525b600101611541565b5087516001600160a01b0390811682526020808a015190911690820152604081015167ffffffffffffffff811180156115b257600080fd5b506040519080825280602002602001820160405280156115dc578160200160208202803683370190505b506080820152604081015167ffffffffffffffff811180156115fd57600080fd5b50604051908082528060200260200182016040528015611627578160200160208202803683370190505b5060a0820152604081015167ffffffffffffffff8111801561164857600080fd5b50604051908082528060200260200182016040528015611672578160200160208202803683370190505b5060c0820152604081015167ffffffffffffffff8111801561169357600080fd5b506040519080825280602002602001820160405280156116bd578160200160208202803683370190505b5060e0820152604081015167ffffffffffffffff811180156116de57600080fd5b5060405190808252806020026020018201604052801561171257816020015b60608152602001906001900390816116fd5790505b50610100820152600080805b8951811015611a855760008a828151811061173557fe5b60200260200101511115611a7d5761176988828151811061175257fe5b602002602001015187611f2c90919063ffffffff16565b955060006117a3670de0b6b3a7640000610ae88e60e001518c868151811061178d57fe5b6020026020010151611abc90919063ffffffff16565b8a83815181106117af57fe5b60200260200101518c84815181106117c357fe5b6020026020010151815181106117d557fe5b60200260200101510190506117f38189611f2c90919063ffffffff16565b9750600185604001510383141561182c57838c60600151038560800151848151811061181b57fe5b60200260200101818152505061187b565b61185e8c60800151610ae88d858151811061184357fe5b60200260200101518f60600151611abc90919063ffffffff16565b8560800151848151811061186e57fe5b6020026020010181815250505b808560a00151848151811061188c57fe5b6020026020010181815250506118b9612710610ae88e60c001516127100384611abc90919063ffffffff16565b8560c0015184815181106118c957fe5b602002602001018181525050846080015183815181106118e557fe5b6020026020010151840193506118f9612db8565b60408d015151600101600381858161190d57fe5b048154811061191857fe5b60009182526020909120600290910201546001600160a01b03168252600381858161193f57fe5b048154811061194a57fe5b9060005260206000209060020201600101548e60a00151178260200181815250508d6000015182604001906001600160a01b031690816001600160a01b0316815250508d6020015182608001906001600160a01b031690816001600160a01b031681525050620f36888260a00181815250508084816119c557fe5b0615611a01578d6040015160018286816119db57fe5b0603815181106119e757fe5b60209081029190910101516001600160a01b031660608301525b611a0a82611f51565b8761010001518681518110611a1b57fe5b60200260200101819052506001600160a01b03196003828681611a3a57fe5b0481548110611a4557fe5b906000526020600020906002020160010154168760e001518681518110611a6857fe5b60209081029190910101525050600190920191505b60010161171e565b5060608301869052604051611a9e9084906020016133c0565b60405160208183030381529060405293505050509450945094915050565b600082611acb57506000611af9565b82820282848281611ad857fe5b0414611af65760405162461bcd60e51b815260040161022e9061332e565b90505b92915050565b6000611af683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506125f6565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60606000807f08000000000000000000000000000000000000000000000000000000000000008460a001511660001415905060008085608001515167ffffffffffffffff81118015611bb357600080fd5b50604051908082528060200260200182016040528015611bdd578160200160208202803683370190505b5094506000611bf887602001516001600160a01b031661262f565b611c06578660200151611c13565b6001546001600160a01b03165b90506000611c2d88606001516001600160a01b031661262f565b611c3b578760600151611c48565b6001546001600160a01b03165b90508415611d015760a08801516001600160a01b0316611c688184612668565b9250611c748183612668565b91506001600160a01b0383161580611c9357506001600160a01b038216155b15611ca9575061c3509550611e90945050505050565b611cb283612701565b9450611cbd82612701565b9350611cff6040518060400160405280601681526020017f636f6d706f756e642065786368616e6765207261743a000000000000000000008152508686610f0b565b505b87516040517fe6a439050000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063e6a4390590611d4c9086908690600401613156565b60206040518083038186803b158015611d6457600080fd5b505afa158015611d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9c9190612e9d565b90506001600160a01b03811615611e89576000611dc26001600160a01b0385168361289c565b90506000611dd96001600160a01b0385168461289c565b905060005b8b6080015151811015611e75578815611e3257611e1583838e608001518481518110611e0657fe5b60200260200101518b8b612959565b8b8281518110611e2157fe5b602002602001018181525050611e6d565b611e5483838e608001518481518110611e4757fe5b60200260200101516129db565b8b8281518110611e6057fe5b6020026020010181815250505b600101611dde565b5061c3509850611e90975050505050505050565b5050505050505b915091565b60606000611ea1612d17565b83516001600160a01b03908116825260208086015182169083015260408501511660608201526080808501519082015260a08085015190820152600080611ee783611b62565b6080850182905260408801516001600160a01b0390811660208701526060808a0151909116908601529095509150611f1e83611b62565b909792019550909350505050565b600082820183811015611af65760405162461bcd60e51b815260040161022e906132c0565b60208101516060908190600160f91b811615801591600160fa1b16151590611f8757611f7d8582612a20565b93505050506125f1565b600060a08660a00151901b90506000611fac87604001516001600160a01b031661262f565b611fba578660400151611fc7565b6001546001600160a01b03165b90506000611fe188608001516001600160a01b031661262f565b611fef578760800151611ffc565b6001546001600160a01b03165b606089810151919250906001600160a01b03166120b45760408051600180825281830190925290602080830190803683375050604080516002808252606082018352939a50929150602083019080368337019050509050828160008151811061206157fe5b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061208f57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050612247565b604080516002808252606082018352909160208301908036833750506040805160038082526080820190925292995090506020820160608036833701905050905084156121b85760208901516001600160a01b03166121138185612668565b8260008151811061212057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061214e818b60600151612668565b8260018151811061215b57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506121858184612668565b8260028151811061219257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505050612247565b82816000815181106121c657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508860600151816001815181106121f857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050818160028151811061222657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b60005b600182510381101561251857600082828151811061226457fe5b60200260200101519050600083836001018151811061227f57fe5b6020026020010151905060008c600001516001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156122c857600080fd5b505afa1580156122dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123009190612e9d565b6001600160a01b031663e6a4390584846040518363ffffffff1660e01b815260040161232d929190613156565b60206040518083038186803b15801561234557600080fd5b505afa158015612359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237d9190612e9d565b90506001600160a01b0381166123a55760405162461bcd60e51b815260040161022e906132f7565b6123e66040518060400160405280601681526020017f74303a2025732074313a20257320706169723a20257300000000000000000000815250848484612c46565b6000816001600160a01b0316905080891790506000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561243457600080fd5b505afa158015612448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246c9190612e9d565b90506124ad6040518060400160405280600a81526020017f746f6b656e303a2025730000000000000000000000000000000000000000000081525082610bd7565b846001600160a01b0316816001600160a01b0316146124ec577f8000000000000000000000000000000000000000000000000000000000000000821791505b8160001b8d87815181106124fc57fe5b602090810291909101015250506001909301925061224a915050565b5061252f89608001516001600160a01b031661262f565b15612591577f40000000000000000000000000000000000000000000000000000000000000008760018951038151811061256557fe5b602002602001015160001c1760001b8760018951038151811061258457fe5b6020026020010181815250505b6125e76040518060400160405280600881526020017f646174615b305d3a000000000000000000000000000000000000000000000000815250886000815181106125d757fe5b602002602001015160001c610b14565b5094955050505050505b919050565b600081836126175760405162461bcd60e51b815260040161022e9190613170565b50600083858161262357fe5b049150505b9392505050565b60006001600160a01b0382161580611af957506001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1492915050565b600080836001600160a01b031663e297943e846040518263ffffffff1660e01b81526004016126979190613129565b60206040518083038186803b1580156126af57600080fd5b505afa1580156126c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e79190612e9d565b90506001600160a01b038116611af6576000915050611af9565b600080826001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561273d57600080fd5b505afa158015612751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127759190613004565b90506000836001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156127b257600080fd5b505afa1580156127c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ea9190613004565b90506000846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561282757600080fd5b505afa15801561283b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285f9190613004565b9050600061286d4383612cae565b905060006128858261287f8787611abc565b90611abc565b90506128918582611f2c565b979650505050505050565b60006128a78361262f565b156128bd57506001600160a01b03811631611af9565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038416906370a0823190612902908590600401613129565b60206040518083038186803b15801561291a57600080fd5b505afa15801561292e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129529190613004565b9050611af9565b600083612968575060006129d2565b61297e83610ae886670de0b6b3a7640000611abc565b935060006129b66129a6612994876103e5611abc565b6129a08a6103e8611abc565b90611f2c565b610ae86103e561287f898b611abc565b90506129ce670de0b6b3a7640000610ae88386611abc565b9150505b95945050505050565b6000816129ea57506000612628565b612a18612a086129fc846103e5611abc565b6129a0876103e8611abc565b610ae86103e561287f8688611abc565b949350505050565b6060600060a08460a00151901b90506000612a4785604001516001600160a01b031661262f565b612a55578460400151612a62565b6001546001600160a01b03165b90506000612a7c86608001516001600160a01b031661262f565b612a8a578560800151612a97565b6001546001600160a01b03165b60608701519091508515612ad95760208701516001600160a01b0316612abd8183612668565b9150612ac98185612668565b9350612ad58184612668565b9250505b6060878101516001600160a01b0316612b83576040805160038082526080820190925290602082016060803683375050895182519293506001600160a01b031691839150600090612b2657fe5b602002602001018181525050836001600160a01b031660001b81600181518110612b4c57fe5b602002602001018181525050826001600160a01b031660001b81600281518110612b7257fe5b602002602001018181525050612891565b60408051600480825260a0820190925290602082016080803683375050895182519293506001600160a01b031691839150600090612bbd57fe5b602002602001018181525050836001600160a01b031660001b81600181518110612be357fe5b602002602001018181525050816001600160a01b031660001b81600281518110612c0957fe5b602002602001018181525050826001600160a01b031660001b81600381518110612c2f57fe5b602002602001018181525050979650505050505050565b612ca884848484604051602401612c6094939291906131ae565b60408051601f198184030181529190526020810180516001600160e01b03167fed8f28f600000000000000000000000000000000000000000000000000000000179052611b41565b50505050565b6000611af683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060008184841115612d0f5760405162461bcd60e51b815260040161022e9190613170565b505050900390565b60408051610100810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c0810182905260e081019190915290565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082601f830112612dfd578081fd5b813567ffffffffffffffff811115612e13578182fd5b6020808202612e23828201613507565b83815293508184018583018287018401881015612e3f57600080fd5b600092505b84831015612e6b578035612e578161352e565b825260019290920191908301908301612e44565b505050505092915050565b8035611af98161352e565b600060208284031215612e92578081fd5b8135611af68161352e565b600060208284031215612eae578081fd5b8151611af68161352e565b600080600060608486031215612ecd578182fd5b8335612ed88161352e565b92506020840135612ee88161352e565b929592945050506040919091013590565b60008060408385031215612f0b578182fd5b8235612f168161352e565b946020939093013593505050565b600060208284031215612f35578081fd5b813567ffffffffffffffff80821115612f4c578283fd5b8184019150610100808387031215612f62578384fd5b612f6b81613507565b9050612f778684612e76565b8152612f868660208501612e76565b6020820152604083013582811115612f9c578485fd5b612fa887828601612ded565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e082015280935050505092915050565b600060208284031215612ffd578081fd5b5035919050565b600060208284031215613015578081fd5b5051919050565b6001600160a01b03169052565b60008282518085526020808601955080818302840101818601855b8481101561309757858303601f19018952815180518085529085019085850190895b8181101561308257835183529287019291870191600101613066565b50509985019993505090830190600101613044565b5090979650505050505050565b6000815180845260208085019450808401835b838110156130d3578151875295820195908201906001016130b7565b509495945050505050565b60008151808452815b81811015613103576020818501810151868301820152016130e7565b818111156131145782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b600060208252611af660208301846130de565b60006040825261319660408301856130de565b90506001600160a01b03831660208301529392505050565b6000608082526131c160808301876130de565b6001600160a01b0395861660208401529385166040830152509216606090920191909152919050565b6000604082526131fd60408301856130de565b90508260208301529392505050565b60006060825261321f60608301866130de565b90508360208301526001600160a01b0383166040830152949350505050565b60006060825261325160608301866130de565b60208301949094525060400152919050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600e908201527f70616972206e6f74206578697374000000000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082526133d460208301845161301c565b60208301516133e6604084018261301c565b50604083015160608301526060830151608083015260808301516101208060a08501526134176101408501836130a4565b915060a0850151601f19808685030160c087015261343584836130a4565b935060c08701519150808685030160e087015261345284836130a4565b935060e0870151915061010081878603018188015261347185846130a4565b90880151878203909201848801529350905061348d8382613029565b9695505050505050565b90815260200190565b600060808201868352602086818501526080604085015281865180845260a0860191508288019350845b818110156134e6578451835293830193918301916001016134ca565b505084810360608601526134fa81876130de565b9998505050505050505050565b60405181810167ffffffffffffffff8111828210171561352657600080fd5b604052919050565b6001600160a01b038116811461152e57600080fdfe6265666f7265205f67657452657475726e416e644761734279446973747269627574696f6ea2646970667358221220ef3547f8f3a0bb99599d325ebdd3d1a6453a54fbf61f4177de10c84fe99e899764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4085,
        "contract": "contracts/swap/aggressive/OneSpilt.sol:OneSplit",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1507,
        "contract": "contracts/swap/aggressive/OneSpilt.sol:OneSplit",
        "label": "weth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IWETH)1401"
      },
      {
        "astId": 1509,
        "contract": "contracts/swap/aggressive/OneSpilt.sol:OneSplit",
        "label": "ctokenFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1517,
        "contract": "contracts/swap/aggressive/OneSpilt.sol:OneSplit",
        "label": "swaps",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(SwapAddr)1514_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(SwapAddr)1514_storage)dyn_storage": {
        "base": "t_struct(SwapAddr)1514_storage",
        "encoding": "dynamic_array",
        "label": "struct OneSplit.SwapAddr[]",
        "numberOfBytes": "32"
      },
      "t_contract(IWETH)1401": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_struct(SwapAddr)1514_storage": {
        "encoding": "inplace",
        "label": "struct OneSplit.SwapAddr",
        "members": [
          {
            "astId": 1511,
            "contract": "contracts/swap/aggressive/OneSpilt.sol:OneSplit",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1513,
            "contract": "contracts/swap/aggressive/OneSpilt.sol:OneSplit",
            "label": "flag",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}