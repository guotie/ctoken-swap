{
  "address": "0x38973B798B221Fdc5863A8a1FA3067f28C5Fb9a0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cashPrior",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAccumulated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "AccrueInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "oldComptroller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "NewComptroller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "oldInterestRateModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "NewMarketInterestRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReserveFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewReserveFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "RepayBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "benefactor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesReduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_acceptAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        }
      ],
      "name": "_addReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_becomeImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        }
      ],
      "name": "_reduceReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_resignImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "_setComptroller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "_setInterestRateModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "_setPendingAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setReserveFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrualBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialExchangeRateMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialExchangeRateMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateModel",
      "outputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract CTokenInterface",
          "name": "cTokenCollateral",
          "type": "address"
        }
      ],
      "name": "liquidateBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrowsCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xafc7f3187cfe72b25e6068b6c15af0e616a4eb07c0144ca901f877821ca17843",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x38973B798B221Fdc5863A8a1FA3067f28C5Fb9a0",
    "transactionIndex": 4,
    "gasUsed": "4682005",
    "logsBloom": "0x
    "blockHash": "0x635228b6b2445f0d55286d58a583f6238e141c21d8decf1aaf59a768f9946468",
    "transactionHash": "0xafc7f3187cfe72b25e6068b6c15af0e616a4eb07c0144ca901f877821ca17843",
    "logs": [],
    "blockNumber": 4609932,
    "cumulativeGasUsed": "5610606",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3c3d18482f52e3655bada52f86f640f6",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"}],\"name\":\"_addReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_becomeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"}],\"name\":\"_reduceReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resignImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"_setComptroller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract CTokenInterface\",\"name\":\"cTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"kind\":\"dev\",\"methods\":{\"_acceptAdmin()\":{\"details\":\"Admin function for pending admin to accept role and update admin\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_addReserves(uint256)\":{\"params\":{\"addAmount\":\"The amount fo underlying token to add as reserves\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_becomeImplementation(bytes)\":{\"params\":{\"data\":\"The encoded bytes data for any initialization\"}},\"_reduceReserves(uint256)\":{\"params\":{\"reduceAmount\":\"Amount of reduction to reserves\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setComptroller(address)\":{\"details\":\"Admin function to set a new comptroller\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setInterestRateModel(address)\":{\"details\":\"Admin function to accrue interest and update the interest rate model\",\"params\":{\"newInterestRateModel\":\"the new interest rate model to use\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setPendingAdmin(address)\":{\"details\":\"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\",\"params\":{\"newPendingAdmin\":\"New pending admin.\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setReserveFactor(uint256)\":{\"details\":\"Admin function to accrue interest and set a new reserve factor\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"accrueInterest()\":{\"details\":\"This calculates interest accrued from the last checkpointed block   up to the current block and writes new checkpoint to storage.   \\u66f4\\u65b0\\u5229\\u606f \\u6bcf\\u4e2a\\u5757\\u53ea\\u8ba1\\u7b97\\u4e00\\u6b21\\u5229\\u606f\"},\"allowance(address,address)\":{\"params\":{\"owner\":\"The address of the account which owns the tokens to be spent\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"The number of tokens allowed to be spent (-1 means infinite)\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"amount\":\"The number of tokens that are approved (-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address of the account to query\"},\"returns\":{\"_0\":\"The number of tokens owned by `owner`\"}},\"balanceOfUnderlying(address)\":{\"details\":\"This also accrues interest in a transaction\",\"params\":{\"owner\":\"The address of the account to query\"},\"returns\":{\"_0\":\"The amount of underlying owned by `owner`\"}},\"borrow(uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset to borrow\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"borrowBalanceCurrent(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated after updating borrowIndex\"},\"returns\":{\"_0\":\"The calculated balance\"}},\"borrowBalanceStored(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated\"},\"returns\":{\"_0\":\"The calculated balance\"}},\"borrowRatePerBlock()\":{\"returns\":{\"_0\":\"The borrow interest rate per block, scaled by 1e18\"}},\"exchangeRateCurrent()\":{\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"exchangeRateStored()\":{\"details\":\"This function does not accrue interest before calculating the exchange rate\",\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"getAccountSnapshot(address)\":{\"details\":\"This is used by comptroller to more efficiently perform liquidity checks.\",\"params\":{\"account\":\"Address of the account to snapshot\"},\"returns\":{\"_0\":\"(possible error, token balance, borrow balance, exchange rate mantissa)\"}},\"getCash()\":{\"returns\":{\"_0\":\"The quantity of underlying asset owned by this contract\"}},\"initialize(address,address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"ERC-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"ERC-20 name of this token\",\"symbol_\":\"ERC-20 symbol of this token\",\"underlying_\":\"The address of the underlying asset\"}},\"initialize(address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"EIP-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"EIP-20 name of this token\",\"symbol_\":\"EIP-20 symbol of this token\"}},\"liquidateBorrow(address,uint256,address)\":{\"params\":{\"borrower\":\"The borrower of this cToken to be liquidated\",\"cTokenCollateral\":\"The market in which to seize collateral from the borrower\",\"repayAmount\":\"The amount of the underlying borrowed asset to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"mint(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"mintAmount\":\"The amount of the underlying asset to supply\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeem(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemTokens\":\"The number of cTokens to redeem into underlying\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeemUnderlying(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemAmount\":\"The amount of underlying to redeem\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrow(uint256)\":{\"params\":{\"repayAmount\":\"The amount to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrowBehalf(address,uint256)\":{\"params\":{\"borrower\":\"the account with the debt being payed off\",\"repayAmount\":\"The amount to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"seize(address,address,uint256)\":{\"details\":\"Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\",\"params\":{\"borrower\":\"The account having collateral seized\",\"liquidator\":\"The account receiving seized collateral\",\"seizeTokens\":\"The number of cTokens to seize\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"supplyRatePerBlock()\":{\"returns\":{\"_0\":\"The supply interest rate per block, scaled by 1e18\"}},\"totalBorrowsCurrent()\":{\"returns\":{\"_0\":\"The total borrows with interest\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"title\":\"Compound's CErc20Delegate Contract\",\"version\":1},\"userdoc\":{\"events\":{\"AccrueInterest(uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when interest is accrued\"},\"Approval(address,address,uint256)\":{\"notice\":\"EIP20 Approval event\"},\"Borrow(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when underlying is borrowed\"},\"LiquidateBorrow(address,address,uint256,address,uint256)\":{\"notice\":\"Event emitted when a borrow is liquidated\"},\"Mint(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are minted\"},\"NewAdmin(address,address)\":{\"notice\":\"Event emitted when pendingAdmin is accepted, which means admin is updated\"},\"NewComptroller(address,address)\":{\"notice\":\"Event emitted when comptroller is changed\"},\"NewMarketInterestRateModel(address,address)\":{\"notice\":\"Event emitted when interestRateModel is changed\"},\"NewPendingAdmin(address,address)\":{\"notice\":\"Event emitted when pendingAdmin is changed\"},\"NewReserveFactor(uint256,uint256)\":{\"notice\":\"Event emitted when the reserve factor is changed\"},\"Redeem(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are redeemed\"},\"RepayBorrow(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a borrow is repaid\"},\"ReservesAdded(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are added\"},\"ReservesReduced(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are reduced\"},\"Transfer(address,address,uint256)\":{\"notice\":\"EIP20 Transfer event\"}},\"kind\":\"user\",\"methods\":{\"_acceptAdmin()\":{\"notice\":\"Accepts transfer of admin rights. msg.sender must be pendingAdmin\"},\"_addReserves(uint256)\":{\"notice\":\"The sender adds to reserves.\"},\"_becomeImplementation(bytes)\":{\"notice\":\"Called by the delegator on a delegate to initialize it for duty\"},\"_reduceReserves(uint256)\":{\"notice\":\"Accrues interest and reduces reserves by transferring to admin\"},\"_resignImplementation()\":{\"notice\":\"Called by the delegator on a delegate to forfeit its responsibility\"},\"_setComptroller(address)\":{\"notice\":\"Sets a new comptroller for the market\"},\"_setInterestRateModel(address)\":{\"notice\":\"accrues interest and updates the interest rate model using _setInterestRateModelFresh\"},\"_setPendingAdmin(address)\":{\"notice\":\"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\"},\"_setReserveFactor(uint256)\":{\"notice\":\"accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\"},\"accrualBlockNumber()\":{\"notice\":\"Block number that interest was last accrued at\"},\"accrueInterest()\":{\"notice\":\"Applies accrued interest to total borrows and reserves\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allowance(address,address)\":{\"notice\":\"Get the current allowance from `owner` for `spender`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the token balance of the `owner`\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Get the underlying balance of the `owner`\"},\"borrow(uint256)\":{\"notice\":\"Sender borrows assets from the protocol to their own address\"},\"borrowBalanceCurrent(address)\":{\"notice\":\"Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\"},\"borrowBalanceStored(address)\":{\"notice\":\"Return the borrow balance of account based on stored data\"},\"borrowIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the opening of the market\"},\"borrowRatePerBlock()\":{\"notice\":\"Returns the current per-block borrow interest rate for this cToken\"},\"comptroller()\":{\"notice\":\"Contract which oversees inter-cToken operations\"},\"constructor\":{\"notice\":\"Construct an empty delegate\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"exchangeRateCurrent()\":{\"notice\":\"Accrue interest then return the up-to-date exchange rate\"},\"exchangeRateStored()\":{\"notice\":\"Calculates the exchange rate from the underlying to the CToken\"},\"getAccountSnapshot(address)\":{\"notice\":\"Get a snapshot of the account's balances, and the cached exchange rate\"},\"getCash()\":{\"notice\":\"Get cash balance of this cToken in the underlying asset\"},\"implementation()\":{\"notice\":\"Implementation address for this contract\"},\"initialize(address,address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the new money market\"},\"initialize(address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the money market\"},\"interestRateModel()\":{\"notice\":\"Model which tells what the current interest rate should be\"},\"isCToken()\":{\"notice\":\"Indicator that this is a CToken contract (for inspection)\"},\"liquidateBorrow(address,uint256,address)\":{\"notice\":\"The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator.\"},\"mint(uint256)\":{\"notice\":\"Sender supplies assets into the market and receives cTokens in exchange\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"redeem(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for the underlying asset\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for a specified amount of underlying asset\"},\"repayBorrow(uint256)\":{\"notice\":\"Sender repays their own borrow\"},\"repayBorrowBehalf(address,uint256)\":{\"notice\":\"Sender repays a borrow belonging to borrower\"},\"reserveFactorMantissa()\":{\"notice\":\"Fraction of interest currently set aside for reserves\"},\"seize(address,address,uint256)\":{\"notice\":\"Transfers collateral tokens (this market) to the liquidator.\"},\"supplyRatePerBlock()\":{\"notice\":\"Returns the current per-block supply interest rate for this cToken\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalBorrows()\":{\"notice\":\"Total amount of outstanding borrows of the underlying in this market\"},\"totalBorrowsCurrent()\":{\"notice\":\"Returns the current total borrows plus accrued interest\"},\"totalReserves()\":{\"notice\":\"Total amount of reserves of the underlying held in this market\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"underlying()\":{\"notice\":\"Underlying asset for this CToken\"}},\"notice\":\"CTokens which wrap an EIP-20 underlying and are delegated to\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/compound/LErc20Delegate.sol\":\"LErc20Delegate\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/common/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\n\\r\\ncontract CTokenStorage {\\r\\n    /**\\r\\n     * @dev Guard variable for re-entrancy checks\\r\\n     */\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token name for this token\\r\\n     */\\r\\n    string public name;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token symbol for this token\\r\\n     */\\r\\n    string public symbol;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token decimals for this token\\r\\n     */\\r\\n    uint8 public decimals;\\r\\n\\r\\n    /*\\r\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\r\\n     */\\r\\n\\r\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\r\\n\\r\\n    /*\\r\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\r\\n     */\\r\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\r\\n\\r\\n    /**\\r\\n     * @notice Administrator for this contract\\r\\n     */\\r\\n    address payable public admin;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending administrator for this contract\\r\\n     */\\r\\n    address payable public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract which oversees inter-cToken operations\\r\\n     */\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /**\\r\\n     * @notice Model which tells what the current interest rate should be\\r\\n     */\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    /*\\r\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\r\\n     */\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Fraction of interest currently set aside for reserves\\r\\n     */\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Block number that interest was last accrued at\\r\\n     */\\r\\n    uint public accrualBlockNumber;\\r\\n\\r\\n    /**\\r\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n     */\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\r\\n     */\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of reserves of the underlying held in this market\\r\\n     */\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /**\\r\\n     * @notice Total number of tokens in circulation\\r\\n     */\\r\\n    uint public totalSupply;\\r\\n\\r\\n    /*\\r\\n     * @notice Official record of token balances for each account\\r\\n     */\\r\\n    mapping (address => uint) internal accountTokens;\\r\\n\\r\\n    /*\\r\\n     * @notice Approved token transfer amounts on behalf of others\\r\\n     */\\r\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Mapping of account addresses to outstanding borrow balances\\r\\n     */\\r\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n}\\r\\n\\r\\nabstract contract CTokenInterface is CTokenStorage {\\r\\n    /**\\r\\n     * @notice Indicator that this is a CToken contract (for inspection)\\r\\n     */\\r\\n    bool public constant isCToken = true;\\r\\n\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interest is accrued\\r\\n     */\\r\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are minted\\r\\n     */\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are redeemed\\r\\n     */\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when underlying is borrowed\\r\\n     */\\r\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is repaid\\r\\n     */\\r\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is liquidated\\r\\n     */\\r\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\r\\n\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is changed\\r\\n     */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\r\\n     */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when comptroller is changed\\r\\n     */\\r\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interestRateModel is changed\\r\\n     */\\r\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserve factor is changed\\r\\n     */\\r\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are added\\r\\n     */\\r\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are reduced\\r\\n     */\\r\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Transfer event\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Approval event\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Failure event\\r\\n     */\\r\\n    // event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) virtual external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\\r\\n    function approve(address spender, uint amount) virtual external returns (bool);\\r\\n    function allowance(address owner, address spender) virtual external view returns (uint);\\r\\n    function balanceOf(address owner) virtual external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) virtual external returns (uint);\\r\\n    function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() virtual external view returns (uint);\\r\\n    function supplyRatePerBlock() virtual external view returns (uint);\\r\\n    function totalBorrowsCurrent() virtual external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) virtual external returns (uint);\\r\\n    function borrowBalanceStored(address account) virtual public view returns (uint);\\r\\n    function exchangeRateCurrent() virtual public returns (uint);\\r\\n    function exchangeRateStored() virtual public view returns (uint);\\r\\n    function getCash() virtual external view returns (uint);\\r\\n    function accrueInterest() virtual public returns (uint);\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingAdmin(address payable newPendingAdmin) virtual external returns (uint);\\r\\n    function _acceptAdmin() virtual external returns (uint);\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) virtual public returns (uint);\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) virtual external returns (uint);\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual public returns (uint);\\r\\n}\\r\\n\\r\\ncontract CErc20Storage {\\r\\n    /**\\r\\n     * @notice Underlying asset for this CToken\\r\\n     */\\r\\n    address public underlying;\\r\\n}\\r\\n\\r\\nabstract contract CErc20Interface is CErc20Storage {\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) virtual external returns (uint);\\r\\n    function redeem(uint redeemTokens) virtual external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\\r\\n    function borrow(uint borrowAmount) virtual external returns (uint);\\r\\n    function repayBorrow(uint repayAmount) virtual external returns (uint);\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _addReserves(uint addAmount) virtual external returns (uint);\\r\\n}\\r\\n\\r\\ncontract CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Implementation address for this contract\\r\\n     */\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\nabstract contract CDelegatorInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Emitted when implementation is changed\\r\\n     */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) virtual public;\\r\\n}\\r\\n\\r\\nabstract contract CDelegateInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) virtual public;\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n     */\\r\\n    function _resignImplementation() virtual public;\\r\\n}\\r\\n\",\"keccak256\":\"0xc4bb987882401b0956f3c5dece2b37860f772dd55b58cb69682ec335103a1d29\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nabstract contract ComptrollerInterface {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\r\\n    function exitMarket(address cToken) virtual external returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\r\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\r\\n\\r\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\r\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\r\\n\\r\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\r\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount) virtual external returns (uint);\\r\\n    function repayBorrowVerify(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex) virtual external;\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount) virtual external returns (uint);\\r\\n    function liquidateBorrowVerify(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens) virtual external;\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) virtual external returns (uint);\\r\\n    function seizeVerify(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) virtual external;\\r\\n\\r\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\r\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        uint repayAmount) virtual external view returns (uint, uint);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * \\u6839\\u636e token \\u5730\\u5740\\u67e5\\u627e cToken \\u5730\\u5740\\r\\n     * \\u5982\\u679c\\u662fETH/HT/BNB, \\u5e94\\u8be5\\u5148\\u53d8\\u6210\\u5bf9\\u5e94\\u7684 wrapped ETH/HT/BNB\\r\\n     */\\r\\n    function getCTokenAddress(address token) virtual external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x684c416cade958bc8022ac0aae0b5567e5ccb9a4d86ac168a79827aed1d253a1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\n/**\\r\\n  * @title LendHub's InterestRateModel Interface\\r\\n  * @author LendHub\\r\\n  */\\r\\nabstract contract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current borrow interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual external view returns (uint);\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current supply interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @param reserveFactorMantissa The current reserve factor the market has\\r\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual external view returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xd03a658d6c0c36f02c99d3a3845b9e28627473aa209d294699c21a5775c7424b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/compound/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport \\\"../common/ComptrollerInterface.sol\\\";\\r\\nimport \\\"../common/CTokenInterfaces.sol\\\";\\r\\nimport \\\"../common/InterestRateModel.sol\\\";\\r\\n\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./Exponential.sol\\\";\\r\\nimport \\\"./EIP20Interface.sol\\\";\\r\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LendHub's CToken Contract\\r\\n * @notice Abstract base for CTokens\\r\\n * @author LendHub\\r\\n */\\r\\nabstract contract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\r\\n    /**\\r\\n     * @notice Initialize the money market\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ EIP-20 name of this token\\r\\n     * @param symbol_ EIP-20 symbol of this token\\r\\n     * @param decimals_ EIP-20 decimal precision of this token\\r\\n     */\\r\\n    function initialize(ComptrollerInterface comptroller_,\\r\\n                        InterestRateModel interestRateModel_,\\r\\n                        uint initialExchangeRateMantissa_,\\r\\n                        string memory name_,\\r\\n                        string memory symbol_,\\r\\n                        uint8 decimals_) public {\\r\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\r\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\r\\n\\r\\n        // Set initial exchange rate\\r\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\r\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\r\\n\\r\\n        // Set the comptroller\\r\\n        uint err = _setComptroller(comptroller_);\\r\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\r\\n\\r\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\r\\n        accrualBlockNumber = getBlockNumber();\\r\\n        borrowIndex = mantissaOne;\\r\\n\\r\\n        // Set the interest rate model (depends on block number / borrow index)\\r\\n        err = _setInterestRateModelFresh(interestRateModel_);\\r\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\r\\n\\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n        decimals = decimals_;\\r\\n\\r\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\r\\n     * @dev Called by both `transfer` and `transferFrom` internally\\r\\n     * @param spender The address of the account performing the transfer\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param tokens The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\r\\n        /* Fail if transfer not allowed */\\r\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Do not allow self-transfers */\\r\\n        if (src == dst) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\r\\n        }\\r\\n\\r\\n        /* Get the allowance, infinite for the account owner */\\r\\n        uint startingAllowance = 0;\\r\\n        if (spender == src) {\\r\\n            startingAllowance = uint(-1);\\r\\n        } else {\\r\\n            startingAllowance = transferAllowances[src][spender];\\r\\n        }\\r\\n\\r\\n        /* Do the calculations, checking for {under,over}flow */\\r\\n        MathError mathErr;\\r\\n        uint allowanceNew;\\r\\n        uint srcTokensNew;\\r\\n        uint dstTokensNew;\\r\\n\\r\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\r\\n        }\\r\\n\\r\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\r\\n        }\\r\\n\\r\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        accountTokens[src] = srcTokensNew;\\r\\n        accountTokens[dst] = dstTokensNew;\\r\\n\\r\\n        /* Eat some of the allowance (if necessary) */\\r\\n        if (startingAllowance != uint(-1)) {\\r\\n            transferAllowances[src][spender] = allowanceNew;\\r\\n        }\\r\\n\\r\\n        /* We emit a Transfer event */\\r\\n        emit Transfer(src, dst, tokens);\\r\\n\\r\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address dst, uint256 amount) override external nonReentrant returns (bool) {\\r\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint256 amount) override external nonReentrant returns (bool) {\\r\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) override external returns (bool) {\\r\\n        address src = msg.sender;\\r\\n        transferAllowances[src][spender] = amount;\\r\\n        emit Approval(src, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\r\\n     */\\r\\n    function allowance(address owner, address spender) override external view returns (uint256) {\\r\\n        return transferAllowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the token balance of the `owner`\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The number of tokens owned by `owner`\\r\\n     */\\r\\n    function balanceOf(address owner) override external view returns (uint256) {\\r\\n        return accountTokens[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying balance of the `owner`\\r\\n     * @dev This also accrues interest in a transaction\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The amount of underlying owned by `owner`\\r\\n     */\\r\\n    function balanceOfUnderlying(address owner) override external returns (uint) {\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\r\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\r\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\r\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\r\\n     * @param account Address of the account to snapshot\\r\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\r\\n     */\\r\\n    function getAccountSnapshot(address account) override external view returns (uint, uint, uint, uint) {\\r\\n        uint cTokenBalance = accountTokens[account];\\r\\n        uint borrowBalance;\\r\\n        uint exchangeRateMantissa;\\r\\n\\r\\n        MathError mErr;\\r\\n\\r\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\r\\n        if (mErr != MathError.NO_ERROR) {\\r\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (mErr != MathError.NO_ERROR) {\\r\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to simply retrieve block number\\r\\n     *  This exists mainly for inheriting test contracts to stub this result.\\r\\n     */\\r\\n    function getBlockNumber() internal view returns (uint) {\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\r\\n     * @return The borrow interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function borrowRatePerBlock() override external view returns (uint) {\\r\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block supply interest rate for this cToken\\r\\n     * @return The supply interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function supplyRatePerBlock() override external view returns (uint) {\\r\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current total borrows plus accrued interest\\r\\n     * @return The total borrows with interest\\r\\n     */\\r\\n    function totalBorrowsCurrent() override external nonReentrant returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return totalBorrows;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\r\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceCurrent(address account) override external nonReentrant returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return borrowBalanceStored(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceStored(address account) override public view returns (uint) {\\r\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\r\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\r\\n     */\\r\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\r\\n        /* Note: we do not assert that the market is up to date */\\r\\n        MathError mathErr;\\r\\n        uint principalTimesIndex;\\r\\n        uint result;\\r\\n\\r\\n        /* Get borrowBalance and borrowIndex */\\r\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\r\\n\\r\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\r\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\r\\n         */\\r\\n        if (borrowSnapshot.principal == 0) {\\r\\n            return (MathError.NO_ERROR, 0);\\r\\n        }\\r\\n\\r\\n        /* Calculate new borrow balance using the interest index:\\r\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\r\\n         */\\r\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return (mathErr, 0);\\r\\n        }\\r\\n\\r\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return (mathErr, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest then return the up-to-date exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateCurrent() override public nonReentrant returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return exchangeRateStored();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateStored() override public view returns (uint) {\\r\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\r\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\r\\n     */\\r\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\r\\n        uint _totalSupply = totalSupply;\\r\\n        if (_totalSupply == 0) {\\r\\n            /*\\r\\n             * If there are no tokens minted:\\r\\n             *  exchangeRate = initialExchangeRate\\r\\n             */\\r\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\r\\n        } else {\\r\\n            /*\\r\\n             * Otherwise:\\r\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\r\\n             */\\r\\n            uint totalCash = getCashPrior();\\r\\n            uint cashPlusBorrowsMinusReserves;\\r\\n            Exp memory exchangeRate;\\r\\n            MathError mathErr;\\r\\n\\r\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\r\\n            if (mathErr != MathError.NO_ERROR) {\\r\\n                return (mathErr, 0);\\r\\n            }\\r\\n\\r\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\r\\n            if (mathErr != MathError.NO_ERROR) {\\r\\n                return (mathErr, 0);\\r\\n            }\\r\\n\\r\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get cash balance of this cToken in the underlying asset\\r\\n     * @return The quantity of underlying asset owned by this contract\\r\\n     */\\r\\n    function getCash() override external view returns (uint) {\\r\\n        return getCashPrior();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Applies accrued interest to total borrows and reserves\\r\\n     * @dev This calculates interest accrued from the last checkpointed block\\r\\n     *   up to the current block and writes new checkpoint to storage.\\r\\n     *   \\u66f4\\u65b0\\u5229\\u606f \\u6bcf\\u4e2a\\u5757\\u53ea\\u8ba1\\u7b97\\u4e00\\u6b21\\u5229\\u606f\\r\\n     */\\r\\n    function accrueInterest() override public returns (uint) {\\r\\n        /* Remember the initial block number */\\r\\n        uint currentBlockNumber = getBlockNumber();\\r\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\r\\n\\r\\n        /* Short-circuit accumulating 0 interest */\\r\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Read the previous values out of storage */\\r\\n        uint cashPrior = getCashPrior();  // token \\u7684\\u6570\\u91cf\\r\\n        uint borrowsPrior = totalBorrows;\\r\\n        uint reservesPrior = totalReserves;\\r\\n        uint borrowIndexPrior = borrowIndex;\\r\\n\\r\\n        /* Calculate the current borrow interest rate */\\r\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\r\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\r\\n\\r\\n        /* Calculate the number of blocks elapsed since the last accrual */\\r\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\r\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\r\\n\\r\\n        /*\\r\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\r\\n         *  simpleInterestFactor = borrowRate * blockDelta\\r\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\r\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\r\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\r\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\r\\n         */\\r\\n\\r\\n        Exp memory simpleInterestFactor;\\r\\n        uint interestAccumulated;\\r\\n        uint totalBorrowsNew;\\r\\n        uint totalReservesNew;\\r\\n        uint borrowIndexNew;\\r\\n\\r\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accrualBlockNumber = currentBlockNumber;\\r\\n        borrowIndex = borrowIndexNew;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* We emit an AccrueInterest event */\\r\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\r\\n        return mintFresh(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    struct MintLocalVars {\\r\\n        Error err;\\r\\n        MathError mathErr;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint mintTokens;\\r\\n        uint totalSupplyNew;\\r\\n        uint accountTokensNew;\\r\\n        uint actualMintAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param minter The address of the account which is supplying the assets\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\r\\n        /* Fail if mint not allowed */\\r\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        MintLocalVars memory vars;\\r\\n\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\r\\n         *  side-effects occurred. The function returns the amount actually transferred,\\r\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\r\\n         *  of cash.\\r\\n         */\\r\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\r\\n\\r\\n        /*\\r\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\r\\n         *  mintTokens = actualMintAmount / exchangeRate\\r\\n         */\\r\\n\\r\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\r\\n         *  totalSupplyNew = totalSupply + mintTokens\\r\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\r\\n         */\\r\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\r\\n\\r\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /* We write previously calculated values into storage */\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[minter] = vars.accountTokensNew;\\r\\n\\r\\n        /* We emit a Mint event, and a Transfer event */\\r\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\r\\n        emit Transfer(address(this), minter, vars.mintTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\r\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\r\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\r\\n    }\\r\\n\\r\\n    struct RedeemLocalVars {\\r\\n        Error err;\\r\\n        MathError mathErr;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint redeemTokens;\\r\\n        uint redeemAmount;\\r\\n        uint totalSupplyNew;\\r\\n        uint accountTokensNew;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param redeemer The address of the account which is redeeming the tokens\\r\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\r\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\r\\n\\r\\n        RedeemLocalVars memory vars;\\r\\n\\r\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /* If redeemTokensIn > 0: */\\r\\n        if (redeemTokensIn > 0) {\\r\\n            /*\\r\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\r\\n             *  redeemTokens = redeemTokensIn\\r\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\r\\n             */\\r\\n            vars.redeemTokens = redeemTokensIn;\\r\\n\\r\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n        } else {\\r\\n            /*\\r\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\r\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\r\\n             *  redeemAmount = redeemAmountIn\\r\\n             */\\r\\n\\r\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n\\r\\n            vars.redeemAmount = redeemAmountIn;\\r\\n        }\\r\\n\\r\\n        /* Fail if redeem not allowed */\\r\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\r\\n         *  totalSupplyNew = totalSupply - redeemTokens\\r\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\r\\n         */\\r\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient cash */\\r\\n        if (getCashPrior() < vars.redeemAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken has redeemAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(redeemer, vars.redeemAmount);\\r\\n\\r\\n        /* We write previously calculated values into storage */\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[redeemer] = vars.accountTokensNew;\\r\\n\\r\\n        /* We emit a Transfer event, and a Redeem event */\\r\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\r\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sender borrows assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        return borrowFresh(msg.sender, borrowAmount);\\r\\n    }\\r\\n\\r\\n    struct BorrowLocalVars {\\r\\n        MathError mathErr;\\r\\n        uint accountBorrows;\\r\\n        uint accountBorrowsNew;\\r\\n        uint totalBorrowsNew;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Users borrow assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\r\\n        /* Fail if borrow not allowed */\\r\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\r\\n        if (getCashPrior() < borrowAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\r\\n        }\\r\\n\\r\\n        BorrowLocalVars memory vars;\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\r\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\r\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\r\\n         */\\r\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken borrowAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(borrower, borrowAmount);\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = vars.totalBorrowsNew;\\r\\n\\r\\n        /* We emit a Borrow event */\\r\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\r\\n    }\\r\\n\\r\\n    struct RepayBorrowLocalVars {\\r\\n        Error err;\\r\\n        MathError mathErr;\\r\\n        uint repayAmount;\\r\\n        uint borrowerIndex;\\r\\n        uint accountBorrows;\\r\\n        uint accountBorrowsNew;\\r\\n        uint totalBorrowsNew;\\r\\n        uint actualRepayAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\r\\n     * @param payer the account paying off the borrow\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount the amount of undelrying tokens being returned\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\r\\n        /* Fail if repayBorrow not allowed */\\r\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        RepayBorrowLocalVars memory vars;\\r\\n\\r\\n        /* We remember the original borrowerIndex for verification purposes */\\r\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\r\\n\\r\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\r\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\r\\n        }\\r\\n\\r\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\r\\n        if (repayAmount == uint(-1)) {\\r\\n            vars.repayAmount = vars.accountBorrows;\\r\\n        } else {\\r\\n            vars.repayAmount = repayAmount;\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the payer and the repayAmount\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken holds an additional repayAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *   it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\r\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\r\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\r\\n         */\\r\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = vars.totalBorrowsNew;\\r\\n\\r\\n        /* We emit a RepayBorrow event */\\r\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        error = cTokenCollateral.accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The liquidator liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param liquidator The address repaying the borrow and seizing collateral\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\r\\n        /* Fail if liquidate not allowed */\\r\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify cTokenCollateral market's block number equals current block number */\\r\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = 0 */\\r\\n        if (repayAmount == 0) {\\r\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = -1 */\\r\\n        if (repayAmount == uint(-1)) {\\r\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\r\\n        }\\r\\n\\r\\n\\r\\n        /* Fail if repayBorrow fails */\\r\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\r\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\r\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We calculate the number of collateral tokens that will be seized */\\r\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\r\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\r\\n\\r\\n        /* Revert if borrower collateral token balance < seizeTokens */\\r\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\r\\n\\r\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\r\\n        uint seizeError;\\r\\n        if (address(cTokenCollateral) == address(this)) {\\r\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\r\\n        } else {\\r\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\r\\n        }\\r\\n\\r\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\r\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\r\\n\\r\\n        /* We emit a LiquidateBorrow event */\\r\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\r\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of cTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) override external nonReentrant returns (uint) {\\r\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\r\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\r\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of cTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\r\\n        /* Fail if seize not allowed */\\r\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\r\\n        }\\r\\n\\r\\n        MathError mathErr;\\r\\n        uint borrowerTokensNew;\\r\\n        uint liquidatorTokensNew;\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\r\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\r\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\r\\n         */\\r\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountTokens[borrower] = borrowerTokensNew;\\r\\n        accountTokens[liquidator] = liquidatorTokensNew;\\r\\n\\r\\n        /* Emit a Transfer event */\\r\\n        emit Transfer(borrower, liquidator, seizeTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address payable newPendingAdmin) override external returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() external override returns (uint) {\\r\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\r\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new comptroller for the market\\r\\n      * @dev Admin function to set a new comptroller\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) override public returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        ComptrollerInterface oldComptroller = comptroller;\\r\\n        // Ensure invoke comptroller.isComptroller() returns true\\r\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set market's comptroller to newComptroller\\r\\n        comptroller = newComptroller;\\r\\n\\r\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\r\\n        emit NewComptroller(oldComptroller, newComptroller);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\r\\n      * @dev Admin function to accrue interest and set a new reserve factor\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) override external nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\r\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\r\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\r\\n      * @dev Admin function to set a new reserve factor\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Verify market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\r\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\r\\n        }\\r\\n\\r\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\r\\n        reserveFactorMantissa = newReserveFactorMantissa;\\r\\n\\r\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\r\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n\\r\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\r\\n        (error, ) = _addReservesFresh(addAmount);\\r\\n        return error;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add reserves by transferring from caller\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\r\\n     */\\r\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\r\\n        // totalReserves + actualAddAmount\\r\\n        uint totalReservesNew;\\r\\n        uint actualAddAmount;\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the caller and the addAmount\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken holds an additional addAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *  it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n\\r\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\r\\n\\r\\n        totalReservesNew = totalReserves + actualAddAmount;\\r\\n\\r\\n        /* Revert on overflow */\\r\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\r\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\r\\n\\r\\n        /* Return (NO_ERROR, actualAddAmount) */\\r\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReserves(uint reduceAmount) override external nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\r\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\r\\n        return _reduceReservesFresh(reduceAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reduces reserves by transferring to admin\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\r\\n        // totalReserves - reduceAmount\\r\\n        uint totalReservesNew;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Fail gracefully if protocol has insufficient underlying cash\\r\\n        if (getCashPrior() < reduceAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\r\\n        }\\r\\n\\r\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\r\\n        if (reduceAmount > totalReserves) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        totalReservesNew = totalReserves - reduceAmount;\\r\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\r\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n        doTransferOut(admin, reduceAmount);\\r\\n\\r\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\r\\n     * @dev Admin function to accrue interest and update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) override public returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\r\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\r\\n        return _setInterestRateModelFresh(newInterestRateModel);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\r\\n     * @dev Admin function to update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\r\\n\\r\\n        // Used to store old model for use in the event that is emitted on success\\r\\n        InterestRateModel oldInterestRateModel;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Track the market's current interest rate model\\r\\n        oldInterestRateModel = interestRateModel;\\r\\n\\r\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\r\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set the interest rate model to newInterestRateModel\\r\\n        interestRateModel = newInterestRateModel;\\r\\n\\r\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\r\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying owned by this contract\\r\\n     */\\r\\n    function getCashPrior() virtual internal view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\r\\n     *  This may revert due to insufficient balance or insufficient allowance.\\r\\n     */\\r\\n    function doTransferIn(address from, uint amount) virtual internal returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\r\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\r\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint amount) virtual internal;\\r\\n\\r\\n\\r\\n    /*** Reentrancy Guard ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc30ae0cc2c9a3705f3960f10327c714c0a3e78f1161809ad49cd637f5867d8c4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/compound/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\n/**\\r\\n  * @title Careful Math\\r\\n  * @author LendHub\\r\\n  * @notice Derived from OpenZeppelin's SafeMath library\\r\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\r\\n  */\\r\\ncontract CarefulMath {\\r\\n\\r\\n    /**\\r\\n     * @dev Possible error codes that we can return\\r\\n     */\\r\\n    enum MathError {\\r\\n        NO_ERROR,\\r\\n        DIVISION_BY_ZERO,\\r\\n        INTEGER_OVERFLOW,\\r\\n        INTEGER_UNDERFLOW\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Multiplies two numbers, returns an error on overflow.\\r\\n    */\\r\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (a == 0) {\\r\\n            return (MathError.NO_ERROR, 0);\\r\\n        }\\r\\n\\r\\n        uint c = a * b;\\r\\n\\r\\n        if (c / a != b) {\\r\\n            return (MathError.INTEGER_OVERFLOW, 0);\\r\\n        } else {\\r\\n            return (MathError.NO_ERROR, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Integer division of two numbers, truncating the quotient.\\r\\n    */\\r\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (b == 0) {\\r\\n            return (MathError.DIVISION_BY_ZERO, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (b <= a) {\\r\\n            return (MathError.NO_ERROR, a - b);\\r\\n        } else {\\r\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two numbers, returns an error on overflow.\\r\\n    */\\r\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        uint c = a + b;\\r\\n\\r\\n        if (c >= a) {\\r\\n            return (MathError.NO_ERROR, c);\\r\\n        } else {\\r\\n            return (MathError.INTEGER_OVERFLOW, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev add a and b and then subtract c\\r\\n    */\\r\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\r\\n        (MathError err0, uint sum) = addUInt(a, b);\\r\\n\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, 0);\\r\\n        }\\r\\n\\r\\n        return subUInt(sum, c);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6c4b002e45d64b108f743c82bff461e66d0954c3d4aea7aacb05a6fd0e362b3c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/compound/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\n/**\\r\\n * @title ERC 20 Token Standard Interface\\r\\n *  https://eips.ethereum.org/EIPS/eip-20\\r\\n */\\r\\ninterface EIP20Interface {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the total number of tokens in circulation\\r\\n      * @return The supply of tokens\\r\\n      */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return success Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return success Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n      * @return success Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x66878b95de67b00405646609dde41a24b27ab6abd65126f79c78196138238b1b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/compound/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\n/**\\r\\n * @title EIP20NonStandardInterface\\r\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\r\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n */\\r\\ninterface EIP20NonStandardInterface {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total number of tokens in circulation\\r\\n     * @return The supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external;\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved\\r\\n      * @return success Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return remaining The number of tokens allowed to be spent\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x447d3dcebe9712fcc1294e87f79e9f6bb6857f1fdb75c1fa3e2301b0df48ff78\",\"license\":\"GPL-3.0-or-later\"},\"contracts/compound/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\ncontract ComptrollerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        COMPTROLLER_MISMATCH,\\r\\n        INSUFFICIENT_SHORTFALL,\\r\\n        INSUFFICIENT_LIQUIDITY,\\r\\n        INVALID_CLOSE_FACTOR,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        INVALID_LIQUIDATION_INCENTIVE,\\r\\n        MARKET_NOT_ENTERED, // no longer possible\\r\\n        MARKET_NOT_LISTED,\\r\\n        MARKET_ALREADY_LISTED,\\r\\n        MATH_ERROR,\\r\\n        NONZERO_BORROW_BALANCE,\\r\\n        PRICE_ERROR,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        TOO_MANY_ASSETS,\\r\\n        TOO_MUCH_REPAY\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        EXIT_MARKET_BALANCE_OWED,\\r\\n        EXIT_MARKET_REJECTION,\\r\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\r\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\r\\n        SUPPORT_MARKET_EXISTS,\\r\\n        SUPPORT_MARKET_OWNER_CHECK,\\r\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        BAD_INPUT,\\r\\n        COMPTROLLER_REJECTION,\\r\\n        COMPTROLLER_CALCULATION_ERROR,\\r\\n        INTEREST_RATE_MODEL_ERROR,\\r\\n        INVALID_ACCOUNT_PAIR,\\r\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        MATH_ERROR,\\r\\n        MARKET_NOT_FRESH,\\r\\n        MARKET_NOT_LISTED,\\r\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\r\\n        TOKEN_INSUFFICIENT_BALANCE,\\r\\n        TOKEN_INSUFFICIENT_CASH,\\r\\n        TOKEN_TRANSFER_IN_FAILED,\\r\\n        TOKEN_TRANSFER_OUT_FAILED\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\r\\n     *       This is because FailureInfo grows significantly faster, and\\r\\n     *       the order of Error has some meaning, while the order of FailureInfo\\r\\n     *       is entirely arbitrary.\\r\\n     */\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\r\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        BORROW_CASH_NOT_AVAILABLE,\\r\\n        BORROW_FRESHNESS_CHECK,\\r\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_MARKET_NOT_LISTED,\\r\\n        BORROW_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\r\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\r\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\r\\n        LIQUIDATE_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\r\\n        MINT_ACCRUE_INTEREST_FAILED,\\r\\n        MINT_COMPTROLLER_REJECTION,\\r\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\r\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\r\\n        MINT_FRESHNESS_CHECK,\\r\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        MINT_TRANSFER_IN_FAILED,\\r\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\r\\n        REDEEM_COMPTROLLER_REJECTION,\\r\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\r\\n        REDEEM_FRESHNESS_CHECK,\\r\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\r\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        REDUCE_RESERVES_ADMIN_CHECK,\\r\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\r\\n        REDUCE_RESERVES_FRESH_CHECK,\\r\\n        REDUCE_RESERVES_VALIDATION,\\r\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\r\\n        REPAY_BORROW_FRESHNESS_CHECK,\\r\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COMPTROLLER_OWNER_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\r\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_ORACLE_MARKET_NOT_LISTED,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\r\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\r\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\r\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\r\\n        TRANSFER_COMPTROLLER_REJECTION,\\r\\n        TRANSFER_NOT_ALLOWED,\\r\\n        TRANSFER_NOT_ENOUGH,\\r\\n        TRANSFER_TOO_MUCH,\\r\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        ADD_RESERVES_FRESH_CHECK,\\r\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x327c6373d004e7e0ae5f5094834e83fcf866fdc937a20173849c93d01feb17b9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/compound/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport \\\"./CarefulMath.sol\\\";\\r\\nimport \\\"./ExponentialNoError.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author LendHub\\r\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract Exponential is CarefulMath, ExponentialNoError {\\r\\n    /**\\r\\n     * @dev Creates an exponential from numerator and denominator values.\\r\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\r\\n     *            or if `denom` is zero.\\r\\n     */\\r\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\r\\n        if (err1 != MathError.NO_ERROR) {\\r\\n            return (err1, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\r\\n\\r\\n        return (error, Exp({mantissa: result}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\r\\n\\r\\n        return (error, Exp({mantissa: result}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\r\\n     */\\r\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\r\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, truncate(product));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\r\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return addUInt(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\r\\n     */\\r\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\r\\n     */\\r\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\r\\n        /*\\r\\n          We are doing this as:\\r\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\r\\n\\r\\n          How it works:\\r\\n          Exp = a / b;\\r\\n          Scalar = s;\\r\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\r\\n        */\\r\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n        return getExp(numerator, divisor.mantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\r\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, truncate(fraction));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\r\\n\\r\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\r\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\r\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\r\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\r\\n        if (err1 != MathError.NO_ERROR) {\\r\\n            return (err1, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\r\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\r\\n        assert(err2 == MathError.NO_ERROR);\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\r\\n     */\\r\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\r\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies three exponentials, returning a new exponential.\\r\\n     */\\r\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, ab);\\r\\n        }\\r\\n        return mulExp(ab, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two exponentials, returning a new exponential.\\r\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\r\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\r\\n     */\\r\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\r\\n        return getExp(a.mantissa, b.mantissa);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x30df25c7ebda5dca1fd028755c2734ff01e7c4275f47f2f6ef66bac6e4efaf32\",\"license\":\"GPL-3.0-or-later\"},\"contracts/compound/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author LendHub\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract ExponentialNoError {\\r\\n    uint constant expScale = 1e18;\\r\\n    uint constant doubleScale = 1e36;\\r\\n    uint constant halfExpScale = expScale/2;\\r\\n    uint constant mantissaOne = expScale;\\r\\n\\r\\n    struct Exp {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    struct Double {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Truncates the given exp to a whole number value.\\r\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\r\\n     */\\r\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\r\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\r\\n        return exp.mantissa / expScale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return truncate(product);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return add_(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if first Exp is less than second Exp.\\r\\n     */\\r\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa < right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp <= right Exp.\\r\\n     */\\r\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa <= right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp > right Exp.\\r\\n     */\\r\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa > right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns true if Exp is exactly zero\\r\\n     */\\r\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\r\\n        return value.mantissa == 0;\\r\\n    }\\r\\n\\r\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\r\\n        require(n < 2**224, errorMessage);\\r\\n        return uint224(n);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b) pure internal returns (uint) {\\r\\n        return add_(a, b, \\\"addition overflow\\\");\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        uint c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\r\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / expScale;\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / doubleScale;\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\r\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        if (a == 0 || b == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, expScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, doubleScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b) pure internal returns (uint) {\\r\\n        return div_(a, b, \\\"divide by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x60ad9347f9508972e834c1cbf4c70c04e6184359907f5709e7b68b4eab8b2a10\",\"license\":\"GPL-3.0-or-later\"},\"contracts/compound/LErc20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LendHub's LErc20 Contract\\r\\n * @notice CTokens which wrap an EIP-20 underlying\\r\\n * @author LendHub\\r\\n */\\r\\ncontract LErc20 is CToken, CErc20Interface {\\r\\n    /**\\r\\n     * @notice Initialize the new money market\\r\\n     * @param underlying_ The address of the underlying asset\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ ERC-20 name of this token\\r\\n     * @param symbol_ ERC-20 symbol of this token\\r\\n     * @param decimals_ ERC-20 decimal precision of this token\\r\\n     */\\r\\n    function initialize(address underlying_,\\r\\n                        ComptrollerInterface comptroller_,\\r\\n                        InterestRateModel interestRateModel_,\\r\\n                        uint initialExchangeRateMantissa_,\\r\\n                        string memory name_,\\r\\n                        string memory symbol_,\\r\\n                        uint8 decimals_) public {\\r\\n        // CToken initialize does the bulk of the work\\r\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\r\\n        // Set underlying and sanity check it\\r\\n        underlying = underlying_;\\r\\n        EIP20Interface(underlying).totalSupply();\\r\\n    }\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function mint(uint mintAmount) override external returns (uint) {\\r\\n        (uint err,) = mintInternal(mintAmount);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeem(uint redeemTokens) override external returns (uint) {\\r\\n        return redeemInternal(redeemTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to redeem\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemUnderlying(uint redeemAmount) override external returns (uint) {\\r\\n        return redeemUnderlyingInternal(redeemAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sender borrows assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrow(uint borrowAmount) override external returns (uint) {\\r\\n        return borrowInternal(borrowAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function repayBorrow(uint repayAmount) override external returns (uint) {\\r\\n        (uint err,) = repayBorrowInternal(repayAmount);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) override external returns (uint) {\\r\\n        (uint err,) = repayBorrowBehalfInternal(borrower, repayAmount);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function liquidateBorrow(address borrower,\\r\\n                        uint repayAmount,\\r\\n                        CTokenInterface cTokenCollateral) override external returns (uint) {\\r\\n        (uint err,) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender adds to reserves.\\r\\n     * @param addAmount The amount fo underlying token to add as reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _addReserves(uint addAmount) override external returns (uint) {\\r\\n        return _addReservesInternal(addAmount);\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying tokens owned by this contract\\r\\n     */\\r\\n    function getCashPrior() override internal view returns (uint) {\\r\\n        EIP20Interface token = EIP20Interface(underlying);\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\r\\n     *      This will revert due to insufficient balance or insufficient allowance.\\r\\n     *      This function returns the actual amount received,\\r\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\r\\n     *\\r\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\r\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n     */\\r\\n    function doTransferIn(address from, uint amount) override internal returns (uint) {\\r\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\r\\n        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\r\\n        token.transferFrom(from, address(this), amount);\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            switch returndatasize()\\r\\n                case 0 {                       // This is a non-standard ERC-20\\r\\n                    success := not(0)          // set success to true\\r\\n                }\\r\\n                case 32 {                      // This is a compliant ERC-20\\r\\n                    returndatacopy(0, 0, 32)\\r\\n                    success := mload(0)        // Set `success = returndata` of external call\\r\\n                }\\r\\n                default {                      // This is an excessively non-compliant ERC-20, revert.\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n        }\\r\\n        require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\r\\n\\r\\n        // Calculate the amount that was *actually* transferred\\r\\n        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\r\\n        require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\r\\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\r\\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\r\\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\r\\n     *      it is >= amount, this should not revert in normal conditions.\\r\\n     *\\r\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\r\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint amount) override internal {\\r\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\r\\n        token.transfer(to, amount);\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            switch returndatasize()\\r\\n                case 0 {                      // This is a non-standard ERC-20\\r\\n                    success := not(0)          // set success to true\\r\\n                }\\r\\n                case 32 {                     // This is a complaint ERC-20\\r\\n                    returndatacopy(0, 0, 32)\\r\\n                    success := mload(0)        // Set `success = returndata` of external call\\r\\n                }\\r\\n                default {                     // This is an excessively non-compliant ERC-20, revert.\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n        }\\r\\n        require(success, \\\"TOKEN_TRANSFER_OUT_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x862f5ba18957b6ff5de34ec20c59e99a4e490104c7d731aa99d46437f63b0602\",\"license\":\"GPL-3.0-or-later\"},\"contracts/compound/LErc20Delegate.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport \\\"./LErc20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Compound's CErc20Delegate Contract\\r\\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\\r\\n * @author Compound\\r\\n */\\r\\ncontract LErc20Delegate is LErc20, CDelegateInterface {\\r\\n    /**\\r\\n     * @notice Construct an empty delegate\\r\\n     */\\r\\n    constructor() {}\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) override public {\\r\\n        // Shh -- currently unused\\r\\n        data;\\r\\n\\r\\n        // Shh -- we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            implementation = address(0);\\r\\n        }\\r\\n\\r\\n        require(msg.sender == admin, \\\"only the admin may call _becomeImplementation\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n     */\\r\\n    function _resignImplementation() override public {\\r\\n        // Shh -- we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            implementation = address(0);\\r\\n        }\\r\\n\\r\\n        require(msg.sender == admin, \\\"only the admin may call _resignImplementation\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7bb98ada3695affde6010ca7a636941df95754bdd28e07c9a310e42555402dad\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103415760003560e01c806373acee98116101bd578063bd6d894d116100f9578063f2b3abbd116100a2578063f851a4401161007c578063f851a44014610b8c578063f8f9da2814610b94578063fca7820b14610b9c578063fe9c44ae14610bb957610341565b8063f2b3abbd14610b28578063f3fdb15a14610b4e578063f5e3c46214610b5657610341565b8063db006a75116100d3578063db006a7514610ad5578063dd62ed3e14610af2578063e9c714f214610b2057610341565b8063bd6d894d14610a64578063c37f68e214610a6c578063c5ebeaec14610ab857610341565b8063a0712d6811610166578063aa5af0fd11610140578063aa5af0fd146109f8578063ae9d70b014610a00578063b2a02ff114610a08578063b71d1a0c14610a3e57610341565b8063a0712d68146109a7578063a6afed95146109c4578063a9059cbb146109cc57610341565b806395d89b411161019757806395d89b411461082757806395dd91931461082f57806399d8c1b41461085557610341565b806373acee98146107fa578063852a12e3146108025780638f840ddd1461081f57610341565b8063313ce5671161028c57806356e6772811610235578063601a0bf11161020f578063601a0bf1146107a75780636c540baf146107c45780636f307dc3146107cc57806370a08231146107d457610341565b806356e67728146106f15780635c60da1b146107975780635fe3b5671461079f57610341565b80633e941010116102665780633e941010146106a65780634576b5db146106c357806347bd3718146106e957610341565b8063313ce5671461065a5780633af9e669146106785780633b1d21a21461069e57610341565b806318160ddd116102ee57806323b872dd116102c857806323b872dd146105d45780632608f8181461060a578063267822471461063657610341565b806318160ddd1461046a578063182df0f5146104725780631a31d4651461047a57610341565b8063153ab5051161031f578063153ab50514610432578063173b99041461043c57806317bfdfbc1461044457610341565b806306fdde0314610346578063095ea7b3146103c35780630e75270214610403575b600080fd5b61034e610bc1565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610388578181015183820152602001610370565b50505050905090810190601f1680156103b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ef600480360360408110156103d957600080fd5b506001600160a01b038135169060200135610c4e565b604080519115158252519081900360200190f35b6104206004803603602081101561041957600080fd5b5035610cbb565b60408051918252519081900360200190f35b61043a610cd1565b005b610420610d21565b6104206004803603602081101561045a57600080fd5b50356001600160a01b0316610d27565b610420610dee565b610420610df4565b61043a600480360360e081101561049057600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a0810160808201356401000000008111156104d357600080fd5b8201836020820111156104e557600080fd5b8035906020019184600183028401116401000000008311171561050757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561055a57600080fd5b82018360208201111561056c57600080fd5b8035906020019184600183028401116401000000008311171561058e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff169150610e579050565b6103ef600480360360608110156105ea57600080fd5b506001600160a01b03813581169160208101359091169060400135610f0f565b6104206004803603604081101561062057600080fd5b506001600160a01b038135169060200135610f81565b61063e610f97565b604080516001600160a01b039092168252519081900360200190f35b610662610fa6565b6040805160ff9092168252519081900360200190f35b6104206004803603602081101561068e57600080fd5b50356001600160a01b0316610faf565b61042061105e565b610420600480360360208110156106bc57600080fd5b503561106d565b610420600480360360208110156106d957600080fd5b50356001600160a01b0316611078565b6104206111e6565b61043a6004803603602081101561070757600080fd5b81019060208101813564010000000081111561072257600080fd5b82018360208201111561073457600080fd5b8035906020019184600183028401116401000000008311171561075657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506111ec945050505050565b61063e61123d565b61063e61124c565b610420600480360360208110156107bd57600080fd5b503561125b565b6104206112f6565b61063e6112fc565b610420600480360360208110156107ea57600080fd5b50356001600160a01b031661130b565b610420611326565b6104206004803603602081101561081857600080fd5b50356113e3565b6104206113ee565b61034e6113f4565b6104206004803603602081101561084557600080fd5b50356001600160a01b031661144c565b61043a600480360360c081101561086b57600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156108a657600080fd5b8201836020820111156108b857600080fd5b803590602001918460018302840111640100000000831117156108da57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561092d57600080fd5b82018360208201111561093f57600080fd5b8035906020019184600183028401116401000000008311171561096157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff1691506114a99050565b610420600480360360208110156109bd57600080fd5b5035611690565b61042061169c565b6103ef600480360360408110156109e257600080fd5b506001600160a01b038135169060200135611a0d565b610420611a7e565b610420611a84565b61042060048036036060811015610a1e57600080fd5b506001600160a01b03813581169160208101359091169060400135611b23565b61042060048036036020811015610a5457600080fd5b50356001600160a01b0316611b94565b610420611c20565b610a9260048036036020811015610a8257600080fd5b50356001600160a01b0316611ce3565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61042060048036036020811015610ace57600080fd5b5035611d78565b61042060048036036020811015610aeb57600080fd5b5035611d83565b61042060048036036040811015610b0857600080fd5b506001600160a01b0381358116916020013516611d8e565b610420611db9565b61042060048036036020811015610b3e57600080fd5b50356001600160a01b0316611ed3565b61063e611f0d565b61042060048036036060811015610b6c57600080fd5b506001600160a01b03813581169160208101359160409091013516611f1c565b61063e611f34565b610420611f48565b61042060048036036020811015610bb257600080fd5b5035611fac565b6103ef61202a565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b505050505081565b336000818152600f602090815260408083206001600160a01b03871680855290835281842086905581518681529151939493909284927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a360019150505b92915050565b600080610cc78361202f565b509150505b919050565b60035461010090046001600160a01b03163314610d1f5760405162461bcd60e51b815260040180806020018281038252602d81526020018061519d602d913960400191505060405180910390fd5b565b60085481565b6000805460ff16610d6c576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155610d7e61169c565b14610dd0576040805162461bcd60e51b815260206004820152601660248201527f61636372756520696e746572657374206661696c656400000000000000000000604482015290519081900360640190fd5b610dd98261144c565b90505b6000805460ff19166001179055919050565b600d5481565b6000806000610e016120d7565b90925090506000826003811115610e1457fe5b14610e505760405162461bcd60e51b81526004018080602001828103825260358152602001806152ca6035913960400191505060405180910390fd5b9150505b90565b610e658686868686866114a9565b601180546001600160a01b0319166001600160a01b038981169190911791829055604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905192909116916318160ddd91600480820192602092909190829003018186803b158015610eda57600080fd5b505afa158015610eee573d6000803e3d6000fd5b505050506040513d6020811015610f0457600080fd5b505050505050505050565b6000805460ff16610f54576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155610f6a33868686612186565b1490506000805460ff191660011790559392505050565b600080610f8e84846124de565b50949350505050565b6004546001600160a01b031681565b60035460ff1681565b6000806040518060200160405280610fc5611c20565b90526001600160a01b0384166000908152600e6020526040812054919250908190610ff1908490612588565b9092509050600082600381111561100457fe5b14611056576040805162461bcd60e51b815260206004820152601f60248201527f62616c616e636520636f756c64206e6f742062652063616c63756c6174656400604482015290519081900360640190fd5b949350505050565b60006110686125d5565b905090565b6000610cb582612655565b60035460009061010090046001600160a01b031633146110a55761109e6001603f6126e9565b9050610ccc565b600554604080517e7e3dd200000000000000000000000000000000000000000000000000000000815290516001600160a01b0392831692851691627e3dd2916004808301926020929190829003018186803b15801561110357600080fd5b505afa158015611117573d6000803e3d6000fd5b505050506040513d602081101561112d57600080fd5b5051611180576040805162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c736500000000604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b03858116918217909255604080519284168352602083019190915280517f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d9281900390910190a160005b9392505050565b600b5481565b60035461010090046001600160a01b0316331461123a5760405162461bcd60e51b815260040180806020018281038252602d81526020018061537f602d913960400191505060405180910390fd5b50565b6012546001600160a01b031681565b6005546001600160a01b031681565b6000805460ff166112a0576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556112b261169c565b905080156112d8576112d08160108111156112c957fe5b60306126e9565b915050610ddc565b6112e18361274f565b9150506000805460ff19166001179055919050565b60095481565b6011546001600160a01b031681565b6001600160a01b03166000908152600e602052604090205490565b6000805460ff1661136b576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561137d61169c565b146113cf576040805162461bcd60e51b815260206004820152601660248201527f61636372756520696e746572657374206661696c656400000000000000000000604482015290519081900360640190fd5b50600b546000805460ff1916600117905590565b6000610cb582612882565b600c5481565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610c465780601f10610c1b57610100808354040283529160200191610c46565b600080600061145a84612903565b9092509050600082600381111561146d57fe5b146111df5760405162461bcd60e51b81526004018080602001828103825260378152602001806151f56037913960400191505060405180910390fd5b60035461010090046001600160a01b031633146114f75760405162461bcd60e51b81526004018080602001828103825260248152602001806151046024913960400191505060405180910390fd5b6009541580156115075750600a54155b6115425760405162461bcd60e51b81526004018080602001828103825260238152602001806151286023913960400191505060405180910390fd5b6007849055836115835760405162461bcd60e51b815260040180806020018281038252603081526020018061514b6030913960400191505060405180910390fd5b600061158e87611078565b905080156115e3576040805162461bcd60e51b815260206004820152601a60248201527f73657474696e6720636f6d7074726f6c6c6572206661696c6564000000000000604482015290519081900360640190fd5b6115eb6129b6565b600955670de0b6b3a7640000600a55611603866129ba565b905080156116425760405162461bcd60e51b815260040180806020018281038252602281526020018061517b6022913960400191505060405180910390fd5b8351611655906001906020870190614fa2565b508251611669906002906020860190614fa2565b50506003805460ff90921660ff199283161790556000805490911660011790555050505050565b600080610cc783612b2f565b6000806116a76129b6565b600954909150808214156116c057600092505050610e54565b60006116ca6125d5565b600b54600c54600a54600654604080517f15f2405300000000000000000000000000000000000000000000000000000000815260048101879052602481018690526044810185905290519596509394929391926000926001600160a01b03909216916315f24053916064808301926020929190829003018186803b15801561175157600080fd5b505afa158015611765573d6000803e3d6000fd5b505050506040513d602081101561177b57600080fd5b5051905065048c273950008111156117da576040805162461bcd60e51b815260206004820152601c60248201527f626f72726f772072617465206973206162737572646c79206869676800000000604482015290519081900360640190fd5b6000806117e78989612bb0565b909250905060008260038111156117fa57fe5b1461184c576040805162461bcd60e51b815260206004820152601f60248201527f636f756c64206e6f742063616c63756c61746520626c6f636b2064656c746100604482015290519081900360640190fd5b61185461502e565b60008060008061187260405180602001604052808a81525087612bd3565b9097509450600087600381111561188557fe5b146118b7576118a26009600689600381111561189d57fe5b612c3b565b9e505050505050505050505050505050610e54565b6118c1858c612588565b909750935060008760038111156118d457fe5b146118ec576118a26009600189600381111561189d57fe5b6118f6848c612ca1565b9097509250600087600381111561190957fe5b14611921576118a26009600489600381111561189d57fe5b61193c6040518060200160405280600854815250858c612cc7565b9097509150600087600381111561194f57fe5b14611967576118a26009600589600381111561189d57fe5b611972858a8b612cc7565b9097509050600087600381111561198557fe5b1461199d576118a26009600389600381111561189d57fe5b60098e9055600a819055600b839055600c829055604080518d8152602081018690528082018390526060810185905290517f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc049181900360800190a160009e50505050505050505050505050505090565b6000805460ff16611a52576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155611a6833338686612186565b1490506000805460ff1916600117905592915050565b600a5481565b6006546000906001600160a01b031663b8168816611aa06125d5565b600b54600c546008546040518563ffffffff1660e01b81526004018085815260200184815260200183815260200182815260200194505050505060206040518083038186803b158015611af257600080fd5b505afa158015611b06573d6000803e3d6000fd5b505050506040513d6020811015611b1c57600080fd5b5051905090565b6000805460ff16611b68576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055611b7e33858585612d1c565b90506000805460ff191660011790559392505050565b60035460009061010090046001600160a01b03163314611bba5761109e600160456126e9565b600480546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9929181900390910190a160006111df565b6000805460ff16611c65576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155611c7761169c565b14611cc9576040805162461bcd60e51b815260206004820152601660248201527f61636372756520696e746572657374206661696c656400000000000000000000604482015290519081900360640190fd5b611cd1610df4565b90506000805460ff1916600117905590565b6001600160a01b0381166000908152600e6020526040812054819081908190818080611d0e89612903565b935090506000816003811115611d2057fe5b14611d3e5760095b6000806000975097509750975050505050611d71565b611d466120d7565b925090506000816003811115611d5857fe5b14611d64576009611d28565b5060009650919450925090505b9193509193565b6000610cb582612fc6565b6000610cb582613045565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b6004546000906001600160a01b031633141580611dd4575033155b15611dec57611de5600160006126e9565b9050610e54565b60038054600480546001600160a01b038181166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff871617968790556001600160a01b031990931690935560408051948390048216808652929095041660208401528351909391927ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc92908290030190a1600454604080516001600160a01b038085168252909216602083015280517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99281900390910190a160009250505090565b600080611ede61169c565b90508015611f0457611efc816010811115611ef557fe5b60406126e9565b915050610ccc565b6111df836129ba565b6006546001600160a01b031681565b600080611f2a8585856130bf565b5095945050505050565b60035461010090046001600160a01b031681565b6006546000906001600160a01b03166315f24053611f646125d5565b600b54600c546040518463ffffffff1660e01b815260040180848152602001838152602001828152602001935050505060206040518083038186803b158015611af257600080fd5b6000805460ff16611ff1576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561200361169c565b90508015612021576112d081601081111561201a57fe5b60466126e9565b6112e1836131f0565b600181565b60008054819060ff16612076576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561208861169c565b905080156120b2576120a681601081111561209f57fe5b60366126e9565b600092509250506120c3565b6120bd333386613298565b92509250505b6000805460ff191660011790559092909150565b600d546000908190806120f257505060075460009150612182565b60006120fc6125d5565b9050600061210861502e565b600061211984600b54600c546136ad565b93509050600081600381111561212b57fe5b14612140579550600094506121829350505050565b61214a83866136eb565b92509050600081600381111561215c57fe5b14612171579550600094506121829350505050565b505160009550935061218292505050565b9091565b600554604080517fbdcdc2580000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03868116602483015285811660448301526064820185905291516000938493169163bdcdc25891608480830192602092919082900301818787803b15801561220457600080fd5b505af1158015612218573d6000803e3d6000fd5b505050506040513d602081101561222e57600080fd5b50519050801561224d576122456003604a83612c3b565b915050611056565b836001600160a01b0316856001600160a01b03161415612273576122456002604b6126e9565b6000856001600160a01b0316876001600160a01b0316141561229857506000196122c0565b506001600160a01b038086166000908152600f60209081526040808320938a16835292905220545b6000806000806122d08589612bb0565b909450925060008460038111156122e357fe5b14612301576122f46009604b6126e9565b9650505050505050611056565b6001600160a01b038a166000908152600e60205260409020546123249089612bb0565b9094509150600084600381111561233757fe5b14612348576122f46009604c6126e9565b6001600160a01b0389166000908152600e602052604090205461236b9089612ca1565b9094509050600084600381111561237e57fe5b1461238f576122f46009604d6126e9565b6001600160a01b03808b166000908152600e6020526040808220859055918b1681522081905560001985146123e7576001600160a01b03808b166000908152600f60209081526040808320938f168352929052208390555b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a6040518082815260200191505060405180910390a3600554604080517f6a56947e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038d811660248301528c81166044830152606482018c905291519190921691636a56947e91608480830192600092919082900301818387803b1580156124ae57600080fd5b505af11580156124c2573d6000803e3d6000fd5b50600092506124cf915050565b9b9a5050505050505050505050565b60008054819060ff16612525576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561253761169c565b905080156125615761255581601081111561254e57fe5b60356126e9565b60009250925050612572565b61256c338686613298565b92509250505b6000805460ff1916600117905590939092509050565b6000806000806125988686612bd3565b909250905060008260038111156125ab57fe5b146125bc57509150600090506125ce565b60006125c78261379c565b9350935050505b9250929050565b601154604080516370a0823160e01b815230600482015290516000926001600160a01b03169182916370a0823191602480820192602092909190829003018186803b15801561262357600080fd5b505afa158015612637573d6000803e3d6000fd5b505050506040513d602081101561264d57600080fd5b505191505090565b6000805460ff1661269a576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556126ac61169c565b905080156126ca576112d08160108111156126c357fe5b604e6126e9565b6126d3836137ab565b509150506000805460ff19166001179055919050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601081111561271857fe5b83605081111561272457fe5b604080519283526020830191909152600082820152519081900360600190a18260108111156111df57fe5b600354600090819061010090046001600160a01b0316331461277757611efc600160316126e9565b61277f6129b6565b6009541461279357611efc600a60336126e9565b8261279c6125d5565b10156127ae57611efc600e60326126e9565b600c548311156127c457611efc600260346126e9565b50600c548281039081111561280a5760405162461bcd60e51b815260040180806020018281038252602481526020018061535b6024913960400191505060405180910390fd5b600c81905560035461282a9061010090046001600160a01b031684613893565b600354604080516101009092046001600160a01b0316825260208201859052818101839052517f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e916060908290030190a160006111df565b6000805460ff166128c7576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556128d961169c565b905080156128f7576112d08160108111156128f057fe5b60276126e9565b6112e1336000856139a3565b6001600160a01b0381166000908152601060205260408120805482918291829182916129395760008095509550505050506129b1565b6129498160000154600a54613eb1565b9094509250600084600381111561295c57fe5b146129715783600095509550505050506129b1565b61297f838260010154613ef0565b9094509150600084600381111561299257fe5b146129a75783600095509550505050506129b1565b5060009450925050505b915091565b4390565b600354600090819061010090046001600160a01b031633146129e257611efc600160426126e9565b6129ea6129b6565b600954146129fe57611efc600a60416126e9565b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a4f57600080fd5b505afa158015612a63573d6000803e3d6000fd5b505050506040513d6020811015612a7957600080fd5b5051612acc576040805162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c736500000000604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b03858116918217909255604080519284168352602083019190915280517fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f9269281900390910190a160006111df565b60008054819060ff16612b76576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155612b8861169c565b90508015612ba6576120a6816010811115612b9f57fe5b601e6126e9565b6120bd3385613f1b565b600080838311612bc75750600090508183036125ce565b506003905060006125ce565b6000612bdd61502e565b600080612bee866000015186613eb1565b90925090506000826003811115612c0157fe5b14612c20575060408051602081019091526000815290925090506125ce565b60408051602081019091529081526000969095509350505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846010811115612c6a57fe5b846050811115612c7657fe5b604080519283526020830191909152818101859052519081900360600190a183601081111561105657fe5b600080838301848110612cb9576000925090506125ce565b6002600092509250506125ce565b600080600080612cd78787612bd3565b90925090506000826003811115612cea57fe5b14612cfb5750915060009050612d14565b612d0d612d078261379c565b86612ca1565b9350935050505b935093915050565b600554604080517fd02f73510000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038781166024830152868116604483015285811660648301526084820185905291516000938493169163d02f73519160a480830192602092919082900301818787803b158015612da257600080fd5b505af1158015612db6573d6000803e3d6000fd5b505050506040513d6020811015612dcc57600080fd5b505190508015612de3576122456003601b83612c3b565b846001600160a01b0316846001600160a01b03161415612e09576122456006601c6126e9565b6001600160a01b0384166000908152600e602052604081205481908190612e309087612bb0565b90935091506000836003811115612e4357fe5b14612e6657612e5b6009601a85600381111561189d57fe5b945050505050611056565b6001600160a01b0388166000908152600e6020526040902054612e899087612ca1565b90935090506000836003811115612e9c57fe5b14612eb457612e5b6009601985600381111561189d57fe5b6001600160a01b038088166000818152600e60209081526040808320879055938c168083529184902085905583518a8152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3600554604080517f6d35bf910000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038c811660248301528b811660448301528a81166064830152608482018a905291519190921691636d35bf919160a480830192600092919082900301818387803b158015612f9857600080fd5b505af1158015612fac573d6000803e3d6000fd5b5060009250612fb9915050565b9998505050505050505050565b6000805460ff1661300b576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561301d61169c565b9050801561303b576112d081601081111561303457fe5b60086126e9565b6112e133846143bc565b6000805460ff1661308a576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561309c61169c565b905080156130b3576112d08160108111156128f057fe5b6112e1338460006139a3565b60008054819060ff16613106576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561311861169c565b905080156131425761313681601081111561312f57fe5b600f6126e9565b600092509250506131d9565b836001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561317d57600080fd5b505af1158015613191573d6000803e3d6000fd5b505050506040513d60208110156131a757600080fd5b5051905080156131c7576131368160108111156131c057fe5b60106126e9565b6131d3338787876146fc565b92509250505b6000805460ff191660011790559094909350915050565b60035460009061010090046001600160a01b031633146132165761109e600160476126e9565b61321e6129b6565b600954146132325761109e600a60486126e9565b670de0b6b3a764000082111561324e5761109e600260496126e9565b6008805490839055604080518281526020810185905281517faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f821460929181900390910190a160006111df565b600554604080517f24008a620000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0386811660248301528581166044830152606482018590529151600093849384939116916324008a629160848082019260209290919082900301818787803b15801561331a57600080fd5b505af115801561332e573d6000803e3d6000fd5b505050506040513d602081101561334457600080fd5b5051905080156133675761335b6003603883612c3b565b60009250925050612d14565b61336f6129b6565b600954146133835761335b600a60396126e9565b61338b615041565b6001600160a01b03861660009081526010602052604090206001015460608201526133b586612903565b60808301819052602083018260038111156133cc57fe5b60038111156133d757fe5b90525060009050816020015160038111156133ee57fe5b146134175761340a600960378360200151600381111561189d57fe5b6000935093505050612d14565b6000198514156134305760808101516040820152613438565b604081018590525b613446878260400151614cd5565b60e08201819052608082015161345b91612bb0565b60a083018190526020830182600381111561347257fe5b600381111561347d57fe5b905250600090508160200151600381111561349457fe5b146134d05760405162461bcd60e51b815260040180806020018281038252603a81526020018061522c603a913960400191505060405180910390fd5b6134e0600b548260e00151612bb0565b60c08301819052602083018260038111156134f757fe5b600381111561350257fe5b905250600090508160200151600381111561351957fe5b146135555760405162461bcd60e51b81526004018080602001828103825260318152602001806152666031913960400191505060405180910390fd5b60a080820180516001600160a01b03808a16600081815260106020908152604091829020948555600a5460019095019490945560c0870151600b81905560e088015195518251948f16855294840192909252828101949094526060820192909252608081019190915290517f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a1929181900390910190a160055460e08201516060830151604080517f1ededc910000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038c811660248301528b8116604483015260648201949094526084810192909252519190921691631ededc919160a480830192600092919082900301818387803b15801561367957600080fd5b505af115801561368d573d6000803e3d6000fd5b506000925061369a915050565b8160e00151935093505050935093915050565b6000806000806136bd8787612ca1565b909250905060008260038111156136d057fe5b146136e15750915060009050612d14565b612d0d8186612bb0565b60006136f561502e565b60008061370a86670de0b6b3a7640000613eb1565b9092509050600082600381111561371d57fe5b1461373c575060408051602081019091526000815290925090506125ce565b6000806137498388613ef0565b9092509050600082600381111561375c57fe5b1461377f57816040518060200160405280600081525095509550505050506125ce565b604080516020810190915290815260009890975095505050505050565b51670de0b6b3a7640000900490565b6000806000806137b96129b6565b600954146137d8576137cd600a604f6126e9565b935091506129b19050565b6137e23386614cd5565b905080600c54019150600c54821015613842576040805162461bcd60e51b815260206004820181905260248201527f61646420726573657276657320756e6578706563746564206f766572666c6f77604482015290519081900360640190fd5b600c829055604080513381526020810183905280820184905290517fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc59181900360600190a160009350915050915091565b601154604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820185905291519190921691829163a9059cbb9160448082019260009290919082900301818387803b15801561390457600080fd5b505af1158015613918573d6000803e3d6000fd5b5050505060003d60008114613934576020811461393e57600080fd5b600019915061394a565b60206000803e60005191505b508061399d576040805162461bcd60e51b815260206004820152601960248201527f544f4b454e5f5452414e534645525f4f55545f4641494c454400000000000000604482015290519081900360640190fd5b50505050565b60008215806139b0575081155b6139eb5760405162461bcd60e51b81526004018080602001828103825260348152602001806153276034913960400191505060405180910390fd5b6139f3615087565b6139fb6120d7565b6040830181905260208301826003811115613a1257fe5b6003811115613a1d57fe5b9052506000905081602001516003811115613a3457fe5b14613a5857613a506009602b8360200151600381111561189d57fe5b9150506111df565b8315613ad9576060810184905260408051602081018252908201518152613a7f9085612588565b6080830181905260208301826003811115613a9657fe5b6003811115613aa157fe5b9052506000905081602001516003811115613ab857fe5b14613ad457613a50600960298360200151600381111561189d57fe5b613b52565b613af58360405180602001604052808460400151815250614f38565b6060830181905260208301826003811115613b0c57fe5b6003811115613b1757fe5b9052506000905081602001516003811115613b2e57fe5b14613b4a57613a506009602a8360200151600381111561189d57fe5b608081018390525b6005546060820151604080517feabe7d910000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03898116602483015260448201939093529051600093929092169163eabe7d919160648082019260209290919082900301818787803b158015613bd057600080fd5b505af1158015613be4573d6000803e3d6000fd5b505050506040513d6020811015613bfa57600080fd5b505190508015613c1a57613c116003602883612c3b565b925050506111df565b613c226129b6565b60095414613c3657613c11600a602c6126e9565b613c46600d548360600151612bb0565b60a0840181905260208401826003811115613c5d57fe5b6003811115613c6857fe5b9052506000905082602001516003811115613c7f57fe5b14613c9b57613c116009602e8460200151600381111561189d57fe5b6001600160a01b0386166000908152600e60205260409020546060830151613cc39190612bb0565b60c0840181905260208401826003811115613cda57fe5b6003811115613ce557fe5b9052506000905082602001516003811115613cfc57fe5b14613d1857613c116009602d8460200151600381111561189d57fe5b8160800151613d256125d5565b1015613d3757613c11600e602f6126e9565b613d45868360800151613893565b60a0820151600d5560c08201516001600160a01b0387166000818152600e60209081526040918290209390935560608501518151908152905130937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a37fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929868360800151846060015160405180846001600160a01b03168152602001838152602001828152602001935050505060405180910390a160055460808301516060840151604080517f51dff9890000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038b81166024830152604482019490945260648101929092525191909216916351dff98991608480830192600092919082900301818387803b158015613e8657600080fd5b505af1158015613e9a573d6000803e3d6000fd5b5060009250613ea7915050565b9695505050505050565b60008083613ec4575060009050806125ce565b83830283858281613ed157fe5b0414613ee5576002600092509250506125ce565b6000925090506125ce565b60008082613f0457506001905060006125ce565b6000838581613f0f57fe5b04915091509250929050565b600554604080517f4ef4c3e10000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03858116602483015260448201859052915160009384938493911691634ef4c3e19160648082019260209290919082900301818787803b158015613f9557600080fd5b505af1158015613fa9573d6000803e3d6000fd5b505050506040513d6020811015613fbf57600080fd5b505190508015613fe257613fd66003601f83612c3b565b600092509250506125ce565b613fea6129b6565b60095414613ffe57613fd6600a60226126e9565b614006615087565b61400e6120d7565b604083018190526020830182600381111561402557fe5b600381111561403057fe5b905250600090508160200151600381111561404757fe5b1461407057614063600960218360200151600381111561189d57fe5b60009350935050506125ce565b61407a8686614cd5565b60c082018190526040805160208101825290830151815261409b9190614f38565b60608301819052602083018260038111156140b257fe5b60038111156140bd57fe5b90525060009050816020015160038111156140d457fe5b14614126576040805162461bcd60e51b815260206004820181905260248201527f4d494e545f45584348414e47455f43414c43554c4154494f4e5f4641494c4544604482015290519081900360640190fd5b614136600d548260600151612ca1565b608083018190526020830182600381111561414d57fe5b600381111561415857fe5b905250600090508160200151600381111561416f57fe5b146141ab5760405162461bcd60e51b81526004018080602001828103825260288152602001806152ff6028913960400191505060405180910390fd5b6001600160a01b0386166000908152600e602052604090205460608201516141d39190612ca1565b60a08301819052602083018260038111156141ea57fe5b60038111156141f557fe5b905250600090508160200151600381111561420c57fe5b146142485760405162461bcd60e51b815260040180806020018281038252602b8152602001806151ca602b913960400191505060405180910390fd5b6080810151600d5560a08101516001600160a01b0387166000818152600e60209081526040918290209390935560c084015160608086015183519485529484019190915282820193909352517f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f929181900390910190a1606081015160408051918252516001600160a01b0388169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a360055460c08201516060830151604080517f41c728b90000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038b81166024830152604482019490945260648101929092525191909216916341c728b991608480830192600092919082900301818387803b15801561438957600080fd5b505af115801561439d573d6000803e3d6000fd5b50600092506143aa915050565b8160c001519350935050509250929050565b600554604080517fda3d454c0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0385811660248301526044820185905291516000938493169163da3d454c91606480830192602092919082900301818787803b15801561443257600080fd5b505af1158015614446573d6000803e3d6000fd5b505050506040513d602081101561445c57600080fd5b50519050801561447b576144736003600e83612c3b565b915050610cb5565b6144836129b6565b6009541461449657614473600a806126e9565b8261449f6125d5565b10156144b157614473600e60096126e9565b6144b96150c5565b6144c285612903565b60208301819052828260038111156144d657fe5b60038111156144e157fe5b90525060009050815160038111156144f557fe5b1461451a57614511600960078360000151600381111561189d57fe5b92505050610cb5565b614528816020015185612ca1565b604083018190528282600381111561453c57fe5b600381111561454757fe5b905250600090508151600381111561455b57fe5b14614577576145116009600c8360000151600381111561189d57fe5b614583600b5485612ca1565b606083018190528282600381111561459757fe5b60038111156145a257fe5b90525060009050815160038111156145b657fe5b146145d2576145116009600b8360000151600381111561189d57fe5b6145dc8585613893565b604080820180516001600160a01b03881660008181526010602090815290859020928355600a54600190930192909255606080860151600b81905593518551928352928201899052818501929092529081019190915290517f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809181900360800190a1600554604080517f5c7786050000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0388811660248301526044820188905291519190921691635c77860591606480830192600092919082900301818387803b1580156146d257600080fd5b505af11580156146e6573d6000803e3d6000fd5b50600092506146f3915050565b95945050505050565b600554604080517f5fc7e71e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301528781166044830152868116606483015260848201869052915160009384938493911691635fc7e71e9160a48082019260209290919082900301818787803b15801561478657600080fd5b505af115801561479a573d6000803e3d6000fd5b505050506040513d60208110156147b057600080fd5b5051905080156147d3576147c76003601283612c3b565b60009250925050614ccc565b6147db6129b6565b600954146147ef576147c7600a60166126e9565b6147f76129b6565b846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561483057600080fd5b505afa158015614844573d6000803e3d6000fd5b505050506040513d602081101561485a57600080fd5b50511461486d576147c7600a60116126e9565b866001600160a01b0316866001600160a01b03161415614893576147c7600660176126e9565b846148a4576147c7600760156126e9565b6000198514156148ba576147c7600760146126e9565b6000806148c8898989613298565b909250905081156148f7576148e98260108111156148e257fe5b60186126e9565b600094509450505050614ccc565b600554604080517fc488847b0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038981166024830152604482018590528251600094859492169263c488847b926064808301939192829003018186803b15801561496a57600080fd5b505afa15801561497e573d6000803e3d6000fd5b505050506040513d604081101561499457600080fd5b508051602090910151909250905081156149df5760405162461bcd60e51b81526004018080602001828103825260338152602001806152976033913960400191505060405180910390fd5b80886001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614a2d57600080fd5b505afa158015614a41573d6000803e3d6000fd5b505050506040513d6020811015614a5757600080fd5b50511015614aac576040805162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d5543480000000000000000604482015290519081900360640190fd5b60006001600160a01b038916301415614ad257614acb308d8d85612d1c565b9050614b69565b886001600160a01b031663b2a02ff18d8d856040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015614b3a57600080fd5b505af1158015614b4e573d6000803e3d6000fd5b505050506040513d6020811015614b6457600080fd5b505190505b8015614bbc576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e207365697a757265206661696c6564000000000000000000000000604482015290519081900360640190fd5b604080516001600160a01b03808f168252808e1660208301528183018790528b1660608201526080810184905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a1600554604080517f47ef3b3b0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038c811660248301528f811660448301528e811660648301526084820188905260a48201869052915191909216916347ef3b3b9160c480830192600092919082900301818387803b158015614ca057600080fd5b505af1158015614cb4573d6000803e3d6000fd5b5060009250614cc1915050565b975092955050505050505b94509492505050565b601154604080516370a0823160e01b815230600482015290516000926001600160a01b031691839183916370a08231916024808301926020929190829003018186803b158015614d2457600080fd5b505afa158015614d38573d6000803e3d6000fd5b505050506040513d6020811015614d4e57600080fd5b5051604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152306024830152604482018890529151929350908416916323b872dd9160648082019260009290919082900301818387803b158015614dc457600080fd5b505af1158015614dd8573d6000803e3d6000fd5b5050505060003d60008114614df45760208114614dfe57600080fd5b6000199150614e0a565b60206000803e60005191505b5080614e5d576040805162461bcd60e51b815260206004820152601860248201527f544f4b454e5f5452414e534645525f494e5f4641494c45440000000000000000604482015290519081900360640190fd5b601154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015614ea857600080fd5b505afa158015614ebc573d6000803e3d6000fd5b505050506040513d6020811015614ed257600080fd5b5051905082811015614f2b576040805162461bcd60e51b815260206004820152601a60248201527f544f4b454e5f5452414e534645525f494e5f4f564552464c4f57000000000000604482015290519081900360640190fd5b9190910395945050505050565b60008060008061259886866000614f4d61502e565b600080614f62670de0b6b3a764000087613eb1565b90925090506000826003811115614f7557fe5b14614f94575060408051602081019091526000815290925090506125ce565b6125c78186600001516136eb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282614fd8576000855561501e565b82601f10614ff157805160ff191683800117855561501e565b8280016001018555821561501e579182015b8281111561501e578251825591602001919060010190615003565b5061502a9291506150ee565b5090565b6040518060200160405280600081525090565b6040805161010081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160e0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516080810190915280600081526020016000815260200160008152602001600081525090565b5b8082111561502a57600081556001016150ef56fe6f6e6c792061646d696e206d617920696e697469616c697a6520746865206d61726b65746d61726b6574206d6179206f6e6c7920626520696e697469616c697a6564206f6e6365696e697469616c2065786368616e67652072617465206d7573742062652067726561746572207468616e207a65726f2e73657474696e6720696e7465726573742072617465206d6f64656c206661696c65646f6e6c79207468652061646d696e206d61792063616c6c205f72657369676e496d706c656d656e746174696f6e4d494e545f4e45575f4143434f554e545f42414c414e43455f43414c43554c4154494f4e5f4641494c4544626f72726f7742616c616e636553746f7265643a20626f72726f7742616c616e636553746f726564496e7465726e616c206661696c656452455041595f424f52524f575f4e45575f4143434f554e545f424f52524f575f42414c414e43455f43414c43554c4154494f4e5f4641494c454452455041595f424f52524f575f4e45575f544f54414c5f42414c414e43455f43414c43554c4154494f4e5f4641494c45444c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f414d4f554e545f5345495a455f4641494c454465786368616e67655261746553746f7265643a2065786368616e67655261746553746f726564496e7465726e616c206661696c65644d494e545f4e45575f544f54414c5f535550504c595f43414c43554c4154494f4e5f4641494c45446f6e65206f662072656465656d546f6b656e73496e206f722072656465656d416d6f756e74496e206d757374206265207a65726f72656475636520726573657276657320756e657870656374656420756e646572666c6f776f6e6c79207468652061646d696e206d61792063616c6c205f6265636f6d65496d706c656d656e746174696f6ea2646970667358221220ed583c562dbaf2234512f8d7ee230f5ba35578138dd09bd6ed24c3e3c22bfcf264736f6c63430007060033",
  "devdoc": {
    "author": "Compound",
    "kind": "dev",
    "methods": {
      "_acceptAdmin()": {
        "details": "Admin function for pending admin to accept role and update admin",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_addReserves(uint256)": {
        "params": {
          "addAmount": "The amount fo underlying token to add as reserves"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_becomeImplementation(bytes)": {
        "params": {
          "data": "The encoded bytes data for any initialization"
        }
      },
      "_reduceReserves(uint256)": {
        "params": {
          "reduceAmount": "Amount of reduction to reserves"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setComptroller(address)": {
        "details": "Admin function to set a new comptroller",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setInterestRateModel(address)": {
        "details": "Admin function to accrue interest and update the interest rate model",
        "params": {
          "newInterestRateModel": "the new interest rate model to use"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setPendingAdmin(address)": {
        "details": "Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
        "params": {
          "newPendingAdmin": "New pending admin."
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setReserveFactor(uint256)": {
        "details": "Admin function to accrue interest and set a new reserve factor",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "accrueInterest()": {
        "details": "This calculates interest accrued from the last checkpointed block   up to the current block and writes new checkpoint to storage.   更新利息 每个块只计算一次利息"
      },
      "allowance(address,address)": {
        "params": {
          "owner": "The address of the account which owns the tokens to be spent",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "The number of tokens allowed to be spent (-1 means infinite)"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "amount": "The number of tokens that are approved (-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address of the account to query"
        },
        "returns": {
          "_0": "The number of tokens owned by `owner`"
        }
      },
      "balanceOfUnderlying(address)": {
        "details": "This also accrues interest in a transaction",
        "params": {
          "owner": "The address of the account to query"
        },
        "returns": {
          "_0": "The amount of underlying owned by `owner`"
        }
      },
      "borrow(uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset to borrow"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "borrowBalanceCurrent(address)": {
        "params": {
          "account": "The address whose balance should be calculated after updating borrowIndex"
        },
        "returns": {
          "_0": "The calculated balance"
        }
      },
      "borrowBalanceStored(address)": {
        "params": {
          "account": "The address whose balance should be calculated"
        },
        "returns": {
          "_0": "The calculated balance"
        }
      },
      "borrowRatePerBlock()": {
        "returns": {
          "_0": "The borrow interest rate per block, scaled by 1e18"
        }
      },
      "exchangeRateCurrent()": {
        "returns": {
          "_0": "Calculated exchange rate scaled by 1e18"
        }
      },
      "exchangeRateStored()": {
        "details": "This function does not accrue interest before calculating the exchange rate",
        "returns": {
          "_0": "Calculated exchange rate scaled by 1e18"
        }
      },
      "getAccountSnapshot(address)": {
        "details": "This is used by comptroller to more efficiently perform liquidity checks.",
        "params": {
          "account": "Address of the account to snapshot"
        },
        "returns": {
          "_0": "(possible error, token balance, borrow balance, exchange rate mantissa)"
        }
      },
      "getCash()": {
        "returns": {
          "_0": "The quantity of underlying asset owned by this contract"
        }
      },
      "initialize(address,address,address,uint256,string,string,uint8)": {
        "params": {
          "comptroller_": "The address of the Comptroller",
          "decimals_": "ERC-20 decimal precision of this token",
          "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
          "interestRateModel_": "The address of the interest rate model",
          "name_": "ERC-20 name of this token",
          "symbol_": "ERC-20 symbol of this token",
          "underlying_": "The address of the underlying asset"
        }
      },
      "initialize(address,address,uint256,string,string,uint8)": {
        "params": {
          "comptroller_": "The address of the Comptroller",
          "decimals_": "EIP-20 decimal precision of this token",
          "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
          "interestRateModel_": "The address of the interest rate model",
          "name_": "EIP-20 name of this token",
          "symbol_": "EIP-20 symbol of this token"
        }
      },
      "liquidateBorrow(address,uint256,address)": {
        "params": {
          "borrower": "The borrower of this cToken to be liquidated",
          "cTokenCollateral": "The market in which to seize collateral from the borrower",
          "repayAmount": "The amount of the underlying borrowed asset to repay"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "mint(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "mintAmount": "The amount of the underlying asset to supply"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "redeem(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemTokens": "The number of cTokens to redeem into underlying"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "redeemUnderlying(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemAmount": "The amount of underlying to redeem"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "repayBorrow(uint256)": {
        "params": {
          "repayAmount": "The amount to repay"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "repayBorrowBehalf(address,uint256)": {
        "params": {
          "borrower": "the account with the debt being payed off",
          "repayAmount": "The amount to repay"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.",
        "params": {
          "borrower": "The account having collateral seized",
          "liquidator": "The account receiving seized collateral",
          "seizeTokens": "The number of cTokens to seize"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "supplyRatePerBlock()": {
        "returns": {
          "_0": "The supply interest rate per block, scaled by 1e18"
        }
      },
      "totalBorrowsCurrent()": {
        "returns": {
          "_0": "The total borrows with interest"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      }
    },
    "title": "Compound's CErc20Delegate Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AccrueInterest(uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when interest is accrued"
      },
      "Approval(address,address,uint256)": {
        "notice": "EIP20 Approval event"
      },
      "Borrow(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when underlying is borrowed"
      },
      "LiquidateBorrow(address,address,uint256,address,uint256)": {
        "notice": "Event emitted when a borrow is liquidated"
      },
      "Mint(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are minted"
      },
      "NewAdmin(address,address)": {
        "notice": "Event emitted when pendingAdmin is accepted, which means admin is updated"
      },
      "NewComptroller(address,address)": {
        "notice": "Event emitted when comptroller is changed"
      },
      "NewMarketInterestRateModel(address,address)": {
        "notice": "Event emitted when interestRateModel is changed"
      },
      "NewPendingAdmin(address,address)": {
        "notice": "Event emitted when pendingAdmin is changed"
      },
      "NewReserveFactor(uint256,uint256)": {
        "notice": "Event emitted when the reserve factor is changed"
      },
      "Redeem(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are redeemed"
      },
      "RepayBorrow(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a borrow is repaid"
      },
      "ReservesAdded(address,uint256,uint256)": {
        "notice": "Event emitted when the reserves are added"
      },
      "ReservesReduced(address,uint256,uint256)": {
        "notice": "Event emitted when the reserves are reduced"
      },
      "Transfer(address,address,uint256)": {
        "notice": "EIP20 Transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "_acceptAdmin()": {
        "notice": "Accepts transfer of admin rights. msg.sender must be pendingAdmin"
      },
      "_addReserves(uint256)": {
        "notice": "The sender adds to reserves."
      },
      "_becomeImplementation(bytes)": {
        "notice": "Called by the delegator on a delegate to initialize it for duty"
      },
      "_reduceReserves(uint256)": {
        "notice": "Accrues interest and reduces reserves by transferring to admin"
      },
      "_resignImplementation()": {
        "notice": "Called by the delegator on a delegate to forfeit its responsibility"
      },
      "_setComptroller(address)": {
        "notice": "Sets a new comptroller for the market"
      },
      "_setInterestRateModel(address)": {
        "notice": "accrues interest and updates the interest rate model using _setInterestRateModelFresh"
      },
      "_setPendingAdmin(address)": {
        "notice": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer."
      },
      "_setReserveFactor(uint256)": {
        "notice": "accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh"
      },
      "accrualBlockNumber()": {
        "notice": "Block number that interest was last accrued at"
      },
      "accrueInterest()": {
        "notice": "Applies accrued interest to total borrows and reserves"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "allowance(address,address)": {
        "notice": "Get the current allowance from `owner` for `spender`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the token balance of the `owner`"
      },
      "balanceOfUnderlying(address)": {
        "notice": "Get the underlying balance of the `owner`"
      },
      "borrow(uint256)": {
        "notice": "Sender borrows assets from the protocol to their own address"
      },
      "borrowBalanceCurrent(address)": {
        "notice": "Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex"
      },
      "borrowBalanceStored(address)": {
        "notice": "Return the borrow balance of account based on stored data"
      },
      "borrowIndex()": {
        "notice": "Accumulator of the total earned interest rate since the opening of the market"
      },
      "borrowRatePerBlock()": {
        "notice": "Returns the current per-block borrow interest rate for this cToken"
      },
      "comptroller()": {
        "notice": "Contract which oversees inter-cToken operations"
      },
      "constructor": {
        "notice": "Construct an empty delegate"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "exchangeRateCurrent()": {
        "notice": "Accrue interest then return the up-to-date exchange rate"
      },
      "exchangeRateStored()": {
        "notice": "Calculates the exchange rate from the underlying to the CToken"
      },
      "getAccountSnapshot(address)": {
        "notice": "Get a snapshot of the account's balances, and the cached exchange rate"
      },
      "getCash()": {
        "notice": "Get cash balance of this cToken in the underlying asset"
      },
      "implementation()": {
        "notice": "Implementation address for this contract"
      },
      "initialize(address,address,address,uint256,string,string,uint8)": {
        "notice": "Initialize the new money market"
      },
      "initialize(address,address,uint256,string,string,uint8)": {
        "notice": "Initialize the money market"
      },
      "interestRateModel()": {
        "notice": "Model which tells what the current interest rate should be"
      },
      "isCToken()": {
        "notice": "Indicator that this is a CToken contract (for inspection)"
      },
      "liquidateBorrow(address,uint256,address)": {
        "notice": "The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator."
      },
      "mint(uint256)": {
        "notice": "Sender supplies assets into the market and receives cTokens in exchange"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "redeem(uint256)": {
        "notice": "Sender redeems cTokens in exchange for the underlying asset"
      },
      "redeemUnderlying(uint256)": {
        "notice": "Sender redeems cTokens in exchange for a specified amount of underlying asset"
      },
      "repayBorrow(uint256)": {
        "notice": "Sender repays their own borrow"
      },
      "repayBorrowBehalf(address,uint256)": {
        "notice": "Sender repays a borrow belonging to borrower"
      },
      "reserveFactorMantissa()": {
        "notice": "Fraction of interest currently set aside for reserves"
      },
      "seize(address,address,uint256)": {
        "notice": "Transfers collateral tokens (this market) to the liquidator."
      },
      "supplyRatePerBlock()": {
        "notice": "Returns the current per-block supply interest rate for this cToken"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalBorrows()": {
        "notice": "Total amount of outstanding borrows of the underlying in this market"
      },
      "totalBorrowsCurrent()": {
        "notice": "Returns the current total borrows plus accrued interest"
      },
      "totalReserves()": {
        "notice": "Total amount of reserves of the underlying held in this market"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "underlying()": {
        "notice": "Underlying asset for this CToken"
      }
    },
    "notice": "CTokens which wrap an EIP-20 underlying and are delegated to",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2076,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "_notEntered",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2079,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2082,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2085,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 2094,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "admin",
        "offset": 1,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 2097,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 2100,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "comptroller",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ComptrollerInterface)2775"
      },
      {
        "astId": 2103,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "interestRateModel",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(InterestRateModel)2809"
      },
      {
        "astId": 2105,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "initialExchangeRateMantissa",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2108,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "reserveFactorMantissa",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2111,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "accrualBlockNumber",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2114,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "borrowIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2117,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "totalBorrows",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2120,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "totalReserves",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2123,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "totalSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2127,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "accountTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2133,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "transferAllowances",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2142,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "accountBorrows",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(BorrowSnapshot)2138_storage)"
      },
      {
        "astId": 2456,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "underlying",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 2525,
        "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
        "label": "implementation",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ComptrollerInterface)2775": {
        "encoding": "inplace",
        "label": "contract ComptrollerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(InterestRateModel)2809": {
        "encoding": "inplace",
        "label": "contract InterestRateModel",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(BorrowSnapshot)2138_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CTokenStorage.BorrowSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowSnapshot)2138_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BorrowSnapshot)2138_storage": {
        "encoding": "inplace",
        "label": "struct CTokenStorage.BorrowSnapshot",
        "members": [
          {
            "astId": 2135,
            "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2137,
            "contract": "contracts/compound/LErc20Delegate.sol:LErc20Delegate",
            "label": "interestIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}