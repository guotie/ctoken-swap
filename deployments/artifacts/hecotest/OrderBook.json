{
  "address": "0x224235330ebC9261DB21934E86959799967A3442",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ctokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_margin",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "CancelOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "CreateOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtOut",
          "type": "uint256"
        }
      ],
      "name": "FulFilOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "addrIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "guaranteeAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ctokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeMaker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeTaker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtToTaken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isToken",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "partialFill",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fulfilOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isToken",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "filled",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAmtToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amtDest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amtDestToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderBook.FulFilAmt",
          "name": "fulFilAmt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pairAddrIdx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pair",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flag",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "srcToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "destToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "srcEToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "destEToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountInMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "fulfiled",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "guaranteeAmountOut",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.TokenAmount",
              "name": "tokenAmt",
              "type": "tuple"
            }
          ],
          "internalType": "struct DataTypes.OrderItem[]",
          "name": "allOrders",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pair",
          "type": "uint256"
        }
      ],
      "name": "getMakerFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pair",
          "type": "uint256"
        }
      ],
      "name": "getTakerFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "isMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marginOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "addrIdx",
          "type": "uint256"
        }
      ],
      "name": "maskAddrPairIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairAddrIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pair",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "destToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "srcEToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "destEToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fulfiled",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "guaranteeAmountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.TokenAmount",
          "name": "tokenAmt",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pair",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "pairIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "setMinOrderAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setPairMakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setPairTakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "addrIdx",
          "type": "uint256"
        }
      ],
      "name": "updateAddrIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairIdx",
          "type": "uint256"
        }
      ],
      "name": "updatePairIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x167c3d4df557a0b06d22e40a6f377f93c2fecaa34a3da4190f7c552cb968a16b",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x224235330ebC9261DB21934E86959799967A3442",
    "transactionIndex": 0,
    "gasUsed": "4429358",
    "logsBloom": "0x
    "blockHash": "0x5d5f43e79e0209dc351ae25c7449de0b41af79ca09579202c990280406e25a97",
    "transactionHash": "0x167c3d4df557a0b06d22e40a6f377f93c2fecaa34a3da4190f7c552cb968a16b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6620455,
        "transactionHash": "0x167c3d4df557a0b06d22e40a6f377f93c2fecaa34a3da4190f7c552cb968a16b",
        "address": "0x224235330ebC9261DB21934E86959799967A3442",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049d531908840fddac744543d57cb21b91c3d9094"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5d5f43e79e0209dc351ae25c7449de0b41af79ca09579202c990280406e25a97"
      }
    ],
    "blockNumber": 6620455,
    "cumulativeGasUsed": "4429358",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x71B01154717678BD2380b6B96273F3f8CB06C7A9",
    "0x406AbB3387f9b52E741bC1F1D9b8406BfB9D5B4f",
    "0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "a2db663172882f31b4b299cb8fa408f2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ctokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_margin\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"CreateOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtOut\",\"type\":\"uint256\"}],\"name\":\"FulFilOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"addrIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeMaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeTaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtToTaken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"partialFill\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fulfilOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmtToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtDest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtDestToken\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.FulFilAmt\",\"name\":\"fulFilAmt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAddrIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcEToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destEToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfiled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.TokenAmount\",\"name\":\"tokenAmt\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.OrderItem[]\",\"name\":\"allOrders\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"}],\"name\":\"getMakerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"}],\"name\":\"getTakerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"isMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marginOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addrIdx\",\"type\":\"uint256\"}],\"name\":\"maskAddrPairIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAddrIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcEToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destEToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfiled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.TokenAmount\",\"name\":\"tokenAmt\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pairIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setMinOrderAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPairMakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPairTakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addrIdx\",\"type\":\"uint256\"}],\"name\":\"updateAddrIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairIdx\",\"type\":\"uint256\"}],\"name\":\"updatePairIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fulfilOrder(uint256,uint256,address,bool,bool,bytes)\":{\"params\":{\"amtToTaken\":\"\\u6210\\u4ea4\\u591a\\u5c11\\u91cf\",\"data\":\"flashloan \\u5408\\u7ea6\\u6267\\u884c\\u4ee3\\u7801\",\"isToken\":\"\\u7528\\u6237\\u8f93\\u5165 token \\u4e14\\u5f97\\u5230 token, \\u8c03\\u7528\\u8005\\u987b approve \\u4e14\\u786e\\u4fdd srcEToken \\u7684 cash \\u8db3\\u591f\\u5151\\u4ed8\",\"orderId\":\"order id\",\"partialFill\":\"\\u662f\\u5426\\u5141\\u8bb8\\u90e8\\u5206\\u6210\\u4ea4(\\u6b63\\u597d\\u6b64\\u65f6\\u90e8\\u5206\\u88ab\\u5176\\u4ed6\\u4ebataken)\",\"to\":\"\\u5408\\u7ea6\\u5730\\u5740\\u6216\\u8005 msg.sender\"},\"returns\":{\"fulFilAmt\":\"(\\u4e70\\u5230\\u7684\\u5e01\\u6570\\u91cf, \\u4ed8\\u51fa\\u7684\\u5e01\\u6570\\u91cf)\"}},\"getMakerFeeRate(uint256)\":{\"details\":\"get maker fee rate\"},\"getTakerFeeRate(uint256)\":{\"details\":\"get taker fee rate\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFeeTo(address)\":{\"details\":\"\\u8bbe\\u7f6e feeTo \\u5730\\u5740\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/orderbook/Orderbook.sol\":\"OrderBook\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/orderbook/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    uint constant internal  SRC_IS_ETOKEN = 0x00001; // prettier-ignore\\r\\n    uint constant internal DEST_IS_ETOKEN = 0x00002;\\r\\n \\r\\n    struct TokenAmount {\\r\\n        // uint isEToken;            // \\u6302\\u5355\\u5356\\u51fa\\u7684\\u5e01\\u662f\\u5426\\u662f eToken\\r\\n        address srcToken;\\r\\n        address destToken;\\r\\n        address srcEToken;             // srcToken \\u5bf9\\u5e94\\u7684 eToken\\r\\n        address destEToken;            // destToken \\u5bf9\\u5e94\\u7684 eToken\\r\\n        uint amountIn;                 // \\u521d\\u59cb\\u6302\\u5355\\u6570\\u91cf\\r\\n        uint amountInMint;             // \\u5982\\u679c srcToken \\u4e0d\\u662f eToken, mint \\u6210\\u4e3a etoken \\u7684\\u6570\\u91cf\\r\\n        uint fulfiled;                 // \\u5df2\\u7ecf\\u6210\\u4ea4\\u90e8\\u5206, \\u5355\\u4f4d etoken\\r\\n        uint guaranteeAmountOut;       // \\u6700\\u4f4e\\u5151\\u6362\\u540e\\u8981\\u6c42\\u5f97\\u5230\\u7684\\u6570\\u91cf\\r\\n        // uint guaranteeAmountOutEToken; // \\u6700\\u4f4e\\u5151\\u6362\\u540e\\u8981\\u6c42\\u5f97\\u5230\\u7684 etoken \\u6570\\u91cf\\r\\n    }\\r\\n\\r\\n    struct OrderItem {\\r\\n      uint orderId;\\r\\n      uint pairAddrIdx;        // pairIdx | addrIdx\\r\\n      uint pair;               // hash(srcToken, destToken)\\r\\n      uint timestamp;          // \\u8fc7\\u671f\\u65f6\\u95f4 | \\u6302\\u5355\\u65f6\\u95f4 \\r\\n      uint flag;\\r\\n      address owner;\\r\\n      address to;              // \\u5151\\u6362\\u5f97\\u5230\\u7684token\\u53d1\\u9001\\u5730\\u5740 \\u672a\\u4f7f\\u7528\\r\\n      TokenAmount tokenAmt;\\r\\n    }\\r\\n\\r\\n    struct OBPairConfigMap {\\r\\n      // bit 0-127 min amount\\r\\n      // bit 128-191 maker fee rate\\r\\n      // bit 192-255 taker fee rate\\r\\n      uint256 data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcedf82602b579a7163f61b8af76e901e25e7f189f93be7e3958e9434c714b744\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/ICETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface ICETH {\\r\\n\\r\\n    function mint() external payable;\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function exchangeRateCurrent() external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n    function accrualBlockNumber() external view returns (uint);\\r\\n    // function getCash() virtual external view returns (uint);\\r\\n    // function accrueInterest() virtual public returns (uint);\\r\\n    // function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xc1272b5a849866ce8ae836092fa867ddff927f3bbfa40dd081151d6dfd1c88e8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface ICToken {\\r\\n\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function exchangeRateCurrent() external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n    function accrualBlockNumber() external view returns (uint);\\r\\n    // function getCash() virtual external view returns (uint);\\r\\n    // function accrueInterest() virtual public returns (uint);\\r\\n    // function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x9f4f5bc3abbbdcf757dee2de1dbde83af5feafa10ccc733cba4f7ab1b211dd2f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/ICTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\ninterface ICTokenFactory {\\r\\n    // \\u6839\\u636e token \\u5730\\u5740\\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 ctoken \\u5730\\u5740, \\u5982\\u679c\\u4e0d\\u5b58\\u5728, \\u521b\\u5efa\\u5bf9\\u5e94\\u7684 etoekn\\r\\n    function getCTokenAddress(address token) external returns (address);\\r\\n\\r\\n    // \\u6839\\u636e token \\u5730\\u5740\\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 ctoken \\u5730\\u5740\\r\\n    function getCTokenAddressPure(address token) external view returns (address);\\r\\n\\r\\n    // \\u6839\\u636e ctoken \\u5730\\u5740\\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 token \\u5730\\u5740\\r\\n    function getTokenAddress(address cToken) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x85fbabe31bd8eb7e402b2378b0a809a600c939cc10ac2acf5fc7a854f7968e19\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/OBPairConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport { DataTypes } from \\\"./DataTypes.sol\\\";\\r\\n\\r\\nlibrary OBPairConfig {\\r\\n    uint constant internal MASK_FEE_MAKER  = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff; // prettier-ignore\\r\\n    uint constant internal MASK_FEE_TAKER  = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000; // prettier-ignore\\r\\n    // uint constant internal FEE_DENOMINATOR = 10000;\\r\\n\\r\\n    uint constant internal MAX_FEE_RATE = 1000; // 10%\\r\\n\\r\\n    uint constant internal SHIFT_FEE_TAKER = 128;\\r\\n\\r\\n    /**\\r\\n    * @dev Gets the maker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @return The maker fee + 1 if fee exist or else 0\\r\\n    **/\\r\\n    function feeMaker(DataTypes.OBPairConfigMap storage self) public view returns (uint256) {\\r\\n        return (self.data & MASK_FEE_MAKER);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Gets the taker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @return The taker fee + 1 if fee exist or else 0\\r\\n    **/\\r\\n    function feeTaker(DataTypes.OBPairConfigMap storage self) public view returns (uint256) {\\r\\n        return ((self.data & MASK_FEE_TAKER) >> SHIFT_FEE_TAKER);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @dev Sets the maker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @param fee taker fee to set\\r\\n    **/\\r\\n    function setFeeMaker(DataTypes.OBPairConfigMap storage self, uint fee) public {\\r\\n        require(fee < MAX_FEE_RATE, \\\"maker fee invalid\\\");\\r\\n        self.data = (self.data & ~MASK_FEE_MAKER) | (fee+1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Sets the maker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @param fee maker fee to set\\r\\n    **/\\r\\n    function setFeeTaker(DataTypes.OBPairConfigMap storage self, uint fee) public {\\r\\n        require(fee < MAX_FEE_RATE, \\\"taker fee invalid\\\");\\r\\n        self.data = (self.data & ~MASK_FEE_TAKER) | ((fee+1) << SHIFT_FEE_TAKER);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x544cb3af78f5c88c1b23ad230292082e201d16bf1597727b9ea1551396f9b5df\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/OBPriceLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ICToken.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./DataTypes.sol\\\";\\r\\n\\r\\n// \\u6839\\u636ecompound \\u6700\\u65b0\\u7684 exchange rate \\u6362\\u7b97 \\u6302\\u5355\\u65f6\\u7684\\u4ef7\\u683c, \\u6839\\u636e taker \\u7684\\u5403\\u5355\\u91cf\\u6362\\u7b97\\u6302\\u5355\\u8005\\r\\n// 1. tokenIn \\u548c tokenOut\\u90fd\\u662f etoken: \\u4e0d\\u9700\\u8981\\u6362\\u7b97\\r\\n// 2. tokenIn tokenOut \\u90fd\\u662f token: \\r\\nlibrary OBPriceLogic {\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // struct OBPrice {\\r\\n    //     address src;\\r\\n    //     address srcEToken;\\r\\n    //     address dst;\\r\\n    //     address dstEToken;\\r\\n    //     uint256 amtIn;\\r\\n    //     uint256 eAmtIn;\\r\\n    //     uint256 amtOut;\\r\\n    //     uint256 eAmtOut;\\r\\n    //     // uint256 feeTaker;\\r\\n    //     // uint256 feeMaker;\\r\\n    // }\\r\\n\\r\\n    // uint256 constant public DENOMINATOR = 10000;\\r\\n\\r\\n    function getCurrentExchangeRate(ICToken ctoken) public view returns (uint256) {\\r\\n        uint rate = ctoken.exchangeRateStored();\\r\\n        uint supplyRate = ctoken.supplyRatePerBlock();\\r\\n        uint lastBlock = ctoken.accrualBlockNumber();\\r\\n        uint blocks = block.number.sub(lastBlock);\\r\\n        uint inc = rate.mul(supplyRate).mul(blocks);\\r\\n        return rate.add(inc);\\r\\n    }\\r\\n\\r\\n    function refreshTokenExchangeRate(ICToken ctoken) public returns (uint256) {\\r\\n        return ctoken.exchangeRateCurrent();\\r\\n    }\\r\\n\\r\\n    /// @dev \\u6839\\u636e\\u4ef7\\u683c\\u8ba1\\u7b97 amtToTaken \\u5bf9\\u5e94\\u7684 amtOut. \\u5982\\u679c\\u6302\\u5355\\u65f6 destToken \\u662f ctoken, \\u5219\\u76f4\\u63a5\\u8ba1\\u7b97\\u6bd4\\u4f8b; \\u5426\\u5219, \\u9700\\u8981\\u5c06\\u6302\\u5355\\u8bbe\\u7f6e\\u7684guaranteeAmountOut\\u8f6c\\u6362\\u4e3a etoken \\u6570\\u91cf, \\u518d\\u8ba1\\u7b97\\r\\n    /// @param data OBPrice to calcutation\\r\\n    /// @param amtToTaken amount to taken, in etoken\\r\\n    /// @return maker \\u5f97\\u5230\\u7684\\u5e01\\u6570\\u91cf; \\u5355\\u4f4d etoken \\r\\n    function convertBuyAmountByETokenIn(\\r\\n                    DataTypes.TokenAmount memory data,\\r\\n                    uint amtToTaken\\r\\n                )\\r\\n                public\\r\\n                view\\r\\n                returns (uint) {\\r\\n        // address src = data.srcToken;\\r\\n        // address srcEToken = data.srcEToken;\\r\\n        address dst = data.destToken;\\r\\n        address dstEToken = data.destEToken;\\r\\n        // // uint256 feeTaker = DENOMINATOR - data.feeTaker;\\r\\n        // // uint256 feeMaker = DENOMINATOR - data.feeMaker;\\r\\n\\r\\n        if (dst == dstEToken) {\\r\\n            // \\u6302\\u5355\\u5c31\\u662f\\u4ee5 etoken \\u6765\\u6302\\u7684\\r\\n            return amtToTaken.mul(data.guaranteeAmountOut).div(data.amountInMint);\\r\\n        }\\r\\n        uint destRate = getCurrentExchangeRate(ICToken(dstEToken));\\r\\n        uint destEAmt = data.guaranteeAmountOut.mul(1e18).div(destRate);\\r\\n        return amtToTaken.mul(destEAmt).div(data.amountInMint);\\r\\n\\r\\n        // // \\u7531\\u4e8e\\u76ee\\u524d create order\\u5df2\\u7ecf\\u9650\\u5236\\u4e86\\u5fc5\\u987b\\u540c\\u65f6\\u4e3a token \\u6216\\u8005 etoken\\r\\n        // require(src != srcEToken && dst != dstEToken, \\\"invalid orderbook tokens\\\");\\r\\n        \\r\\n        // // price = amtOut/amtIn = eAmtOut*rateOut/(eAmtIn*rateIn)\\r\\n        // // eprice = (price*rateIn)/rateOut = (amtOut*rateIn)/(amtIn*rateOut)\\r\\n        // uint256 rateIn = getCurrentExchangeRate(ICToken(srcEToken));\\r\\n        // uint256 rateOut = getCurrentExchangeRate(ICToken(dstEToken));\\r\\n\\r\\n        // // \\u5403\\u5355\\u8005\\u9700\\u8981\\u8f6c\\u5165\\u7684\\u5e01\\u7684\\u6570\\u91cf\\r\\n        // return amtToTaken.mul(rateIn).mul(data.guaranteeAmountOut).div(data.amountIn).div(rateOut);\\r\\n        // // return (amtToSendByEToken, amtToTaken);\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xecdc26fc00ad1d72807acc6a5436c2f3b33c6cd383fe7a4c59cb1d2004a2567e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/OBStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport { DataTypes } from \\\"./DataTypes.sol\\\";\\r\\nimport { OBPairConfig } from \\\"./OBPairConfig.sol\\\";\\r\\n\\r\\n// \\u5b58\\u50a8\\r\\ncontract OBStorage is Ownable {\\r\\n    using OBPairConfig for DataTypes.OBPairConfigMap;\\r\\n\\r\\n    uint private constant _PAIR_INDEX_MASK = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;   // 128 bit\\r\\n    uint private constant _ADDR_INDEX_MASK = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;   // 128 bit\\r\\n    uint private constant _MARGIN_MASK     = 0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n    uint private constant _EXPIRED_AT_MASK = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;   // 128 bit\\r\\n    uint private constant _ADDR_INDEX_OFFSET = 128;\\r\\n    // uint private constant _EXPIRED_AT_OFFSET = 128;\\r\\n\\r\\n    uint256 public constant DENOMINATOR = 10000;\\r\\n\\r\\n    // // \\u8ba1\\u7b97\\u4ef7\\u683c\\u7684\\u4e58\\u6570 price = token0 * priceRatio / token1, such as 1e30\\r\\n    // uint public priceRatio = 1e30; \\r\\n\\r\\n    uint public orderId;   // order Id \\u81ea\\u589e\\r\\n\\r\\n    // \\u5173\\u95ed\\u8ba2\\u5355\\u8584\\u529f\\u80fd\\r\\n    bool    public closed; // prettier-ignore\\r\\n    // address public router;\\r\\n    address public wETH;\\r\\n    address public cETH;  // compound ETH token\\r\\n    address public ctokenFactory;\\r\\n    address public marginAddr;  // \\u4ee3\\u6301\\u5408\\u7ea6\\r\\n    address public feeTo;       // \\u624b\\u7eed\\u8d39\\u5730\\u5740\\r\\n\\r\\n    // maker \\u624b\\u7eed\\u8d39 && taker \\u624b\\u7eed\\u8d39\\r\\n    uint public defaultFeeMaker = 30;\\r\\n    uint public defaultFeeTaker = 30;\\r\\n    mapping(uint256 => DataTypes.OBPairConfigMap) public pairFeeRate;\\r\\n    // \\u6700\\u4f4e\\u6302\\u5355\\u91cf\\r\\n    mapping(address => uint256) public minAmounts;\\r\\n    mapping(address => mapping(address => uint)) public balanceOf;   // \\u4ee3\\u6301\\u7528\\u6237\\u7684\\u5e01\\r\\n\\r\\n    // orders\\r\\n    mapping (uint => DataTypes.OrderItem) public orders;\\r\\n    mapping (address => uint[]) public marginOrders;   // \\u6760\\u6746\\u5408\\u7ea6\\u4ee3\\u6301\\u7684\\u6302\\u5355\\r\\n    mapping (address => uint[]) public addressOrders;\\r\\n    mapping (uint => uint[]) public pairOrders;\\r\\n\\r\\n    function pairIndex(uint id) public pure returns(uint) {\\r\\n        return (id & _PAIR_INDEX_MASK);\\r\\n    }\\r\\n\\r\\n    function addrIndex(uint id) public pure returns(uint) {\\r\\n        return (id & _ADDR_INDEX_MASK) >> _ADDR_INDEX_OFFSET;\\r\\n    }\\r\\n\\r\\n    // pairIdx \\u4e0d\\u53d8, addrIdx \\u66f4\\u65b0\\r\\n    function updateAddrIdx(uint idx, uint addrIdx) public pure returns(uint) {\\r\\n      return pairIndex(idx) | addrIndex(addrIdx);\\r\\n    }\\r\\n\\r\\n    // pairIdx \\u4e0d\\u53d8, addrIdx \\u66f4\\u65b0\\r\\n    function updatePairIdx(uint idx, uint pairIdx) public pure returns(uint) {\\r\\n      return (idx & _ADDR_INDEX_MASK) | pairIdx;\\r\\n    }\\r\\n\\r\\n    function maskAddrPairIndex(uint pairIdx, uint addrIdx) public pure returns (uint) {\\r\\n        return (pairIdx) | (addrIdx << _ADDR_INDEX_OFFSET);\\r\\n    }\\r\\n\\r\\n    function isMargin(uint flag) public pure returns (bool) {\\r\\n      return (flag & _MARGIN_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    // function getExpiredAt(uint ts) public pure returns (uint) {\\r\\n    //   return (ts & _EXPIRED_AT_MASK) >> _EXPIRED_AT_OFFSET;\\r\\n    // }\\r\\n\\r\\n    // function maskTimestamp(uint ts, uint expired) public pure returns (uint) {\\r\\n    //   return (ts) | (expired << _EXPIRED_AT_OFFSET);\\r\\n    // }\\r\\n    \\r\\n    // function setSwapMining(address _swapMininng) public onlyOwner {\\r\\n    //     swapMining = _swapMininng;\\r\\n    // }\\r\\n}\\r\\n\",\"keccak256\":\"0xd5c368f51576aabe21b4d70c4dc979b8c41916e25a13d3529989a03455b3773b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/Orderbook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./OBStorage.sol\\\";\\r\\nimport \\\"./ICTokenFactory.sol\\\";\\r\\nimport \\\"./ICToken.sol\\\";\\r\\nimport \\\"./ICETH.sol\\\";\\r\\nimport \\\"./OBPriceLogic.sol\\\";\\r\\nimport \\\"./OBPairConfig.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IWHT {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\\r\\ninterface IHswapV2Callee {\\r\\n    function hswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface IMarginHolding {\\r\\n  // owner: \\u6760\\u6746\\u7528\\u6237\\r\\n  // fulfiled: \\u4e70\\u5230\\u7684token\\u6570\\u91cf(tokenIn)\\r\\n  // amt: \\u5356\\u51fa\\u7684token\\u6570\\u91cf(tokenOut)\\r\\n  function onFulfiled(address owner, address tokenOut, address tokenIn, uint fulfiled, uint amt) external;\\r\\n  // tokenOut: \\u5f85\\u5356\\u51fa\\u7684\\u5e01 srcToken\\r\\n  // tokenIn: \\u5f85\\u4e70\\u5165\\u7684\\u5e01 destToken\\r\\n  // tokenReturn: tokenOut\\r\\n  // amt: \\u8fd4\\u8fd8\\u7684tokenOut\\u6570\\u91cf\\r\\n  function onCanceled(address owner, address token0, address token1, address tokenReturn, uint amt) external;\\r\\n}\\r\\n\\r\\n\\r\\n// interface ICTokenFactory {\\r\\n//     function getCTokenAddressPure(address cToken) external view returns (address);\\r\\n//     function getTokenAddress(address cToken) external view returns (address);\\r\\n// }\\r\\n\\r\\ninterface IOrderBook {\\r\\n    event CreateOrder(address indexed owner,\\r\\n          address indexed srcToken,\\r\\n          address indexed destToken,\\r\\n          uint orderId,\\r\\n          uint amountIn,\\r\\n          uint minAmountOut,\\r\\n          uint flag);\\r\\n\\r\\n    event FulFilOrder(address indexed maker,\\r\\n          address indexed taker,\\r\\n          uint orderId,\\r\\n          uint amt,\\r\\n          uint amtOut);\\r\\n          // uint remaining);\\r\\n\\r\\n    event CancelOrder(address indexed owner,\\r\\n          address indexed srcToken,\\r\\n          address indexed destToken,\\r\\n          uint orderId);\\r\\n}\\r\\n\\r\\ncontract OrderBook is IOrderBook, OBStorage, ReentrancyGuard {\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint256;\\r\\n    using OBPairConfig for DataTypes.OBPairConfigMap;\\r\\n\\r\\n    uint private constant _ORDER_CLOSED = 0x00000000000000000000000000000001;   // 128 bit\\r\\n\\r\\n    // _ctokenFactory: ctoken \\u5de5\\u5382\\r\\n    // _wETH: eth/bnb/ht\\r\\n    // _margin: \\u4ee3\\u6301\\u5408\\u7ea6\\u5730\\u5740\\r\\n    // \\u8fd9\\u4e2a\\u5730\\u5740\\u5fc5\\u987b\\u662f payable !!!\\r\\n    constructor(address _ctokenFactory, address _cETH, address _wETH, address _margin) public payable {\\r\\n      cETH = _cETH;\\r\\n      wETH = _wETH;\\r\\n      marginAddr    = _margin;\\r\\n      ctokenFactory = _ctokenFactory;\\r\\n      feeTo = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier whenOpen() {\\r\\n        require(closed == false, \\\"order book closed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        //  cETH \\u4e2d\\u8d4e\\u56de\\r\\n        // assert(msg.sender == cWHT);\\r\\n        // only accept HT via fallback from the WHT contract\\r\\n    }\\r\\n\\r\\n    function closeOrderBook() external onlyOwner {\\r\\n      closed = true;\\r\\n    }\\r\\n\\r\\n    function openOrderBook() external onlyOwner {\\r\\n      closed = false;\\r\\n    }\\r\\n\\r\\n    function setMinOrderAmount(address token, uint amt) external onlyOwner {\\r\\n      minAmounts[token] = amt;\\r\\n    }\\r\\n\\r\\n    function _putOrder(DataTypes.OrderItem storage order) internal {\\r\\n      uint orderId = order.orderId;\\r\\n      uint flag = order.flag;\\r\\n      bool margin = isMargin(flag);\\r\\n      uint addrIdx;\\r\\n      uint pairIdx;\\r\\n      address owner = order.owner;\\r\\n\\r\\n      if (margin) {\\r\\n          // margin \\u8ba2\\u5355\\u53d6 to \\u5730\\u5740\\r\\n          owner = order.to;\\r\\n          addrIdx = marginOrders[owner].length;\\r\\n          marginOrders[owner].push(orderId);\\r\\n      } else {\\r\\n          addrIdx = addressOrders[owner].length;\\r\\n          addressOrders[owner].push(orderId);\\r\\n      }\\r\\n\\r\\n      pairIdx = pairOrders[order.pair].length;\\r\\n      pairOrders[order.pair].push(orderId);\\r\\n\\r\\n      order.pairAddrIdx = maskAddrPairIndex(pairIdx, addrIdx);\\r\\n\\r\\n      emit CreateOrder(owner,\\r\\n          order.tokenAmt.srcToken,\\r\\n          order.tokenAmt.destToken,\\r\\n          orderId,\\r\\n          order.tokenAmt.amountIn,\\r\\n          order.tokenAmt.guaranteeAmountOut,\\r\\n          flag);\\r\\n    }\\r\\n\\r\\n    function _removeOrder(DataTypes.OrderItem memory order) private {\\r\\n        // uint orderId = order.orderId;\\r\\n        uint pairIdx = pairIndex(order.pairAddrIdx);\\r\\n        uint addrIdx = addrIndex(order.pairAddrIdx);\\r\\n        address owner = order.owner;\\r\\n        uint rIdx;\\r\\n        bool margin = isMargin(order.flag);\\r\\n\\r\\n        if (margin) {\\r\\n            owner = order.to;\\r\\n            uint lastIdx = marginOrders[owner].length-1;\\r\\n            if (addrIdx != lastIdx) {\\r\\n              rIdx = marginOrders[owner][lastIdx];\\r\\n              marginOrders[owner][addrIdx] = rIdx;\\r\\n              orders[rIdx].pairAddrIdx = updateAddrIdx(orders[rIdx].pairAddrIdx, addrIdx);\\r\\n            }\\r\\n            marginOrders[owner].pop();\\r\\n        } else {\\r\\n            uint lastIdx = addressOrders[owner].length-1;\\r\\n            if (addrIdx != lastIdx) {\\r\\n              rIdx = addressOrders[owner][lastIdx];\\r\\n              addressOrders[owner][addrIdx] = rIdx;\\r\\n              orders[rIdx].pairAddrIdx = updateAddrIdx(orders[rIdx].pairAddrIdx, addrIdx);\\r\\n            }\\r\\n            addressOrders[owner].pop();\\r\\n        }\\r\\n\\r\\n        if ((pairOrders[order.pair].length > 1) && (pairIdx != pairOrders[order.pair].length-1)) {\\r\\n          rIdx = pairOrders[order.pair][pairOrders[order.pair].length - 1];\\r\\n          pairOrders[order.pair][pairIdx] = rIdx;\\r\\n          orders[rIdx].pairAddrIdx = updatePairIdx(orders[rIdx].pairAddrIdx, pairIdx);\\r\\n        }\\r\\n        pairOrders[order.pair].pop();\\r\\n    }\\r\\n\\r\\n    // \\u5982\\u679c\\u627e\\u5230 addr \\u5bf9\\u5e94\\u7684 etoken \\u5730\\u5740, \\u8fd4\\u56de etoken \\u5730\\u5740; \\u5426\\u5219, addr \\u672c\\u8eab\\u5c31\\u662f etoken, \\u8fd4\\u56de addr\\r\\n    function _getOrCreateETokenAddress(address addr) internal returns (address) {\\r\\n      if (addr == address(0) || addr == wETH) {\\r\\n        return cETH;\\r\\n      }\\r\\n      address etoken = ICTokenFactory(ctokenFactory).getCTokenAddressPure(addr);\\r\\n      if (etoken == address(0)) {\\r\\n        // \\u8fd9\\u91cc\\u8981\\u5224\\u65ad addr \\u662f\\u5426\\u5728 etoken mapping \\u4e2d.\\r\\n        // \\u5982\\u679c\\u5728, \\u624d\\u80fd\\u8bf4\\u660e addr \\u662f etoken;\\r\\n        // \\u5982\\u679c\\u4e0d\\u5728, \\u8bf4\\u660e\\u8be5 token \\u8fd8\\u6ca1\\u6709\\u5bf9\\u5e94\\u7684 etoken, \\u9700\\u8981\\u521b\\u5efa\\u5bf9\\u5e94\\u7684 etoken\\r\\n        address token = ICTokenFactory(ctokenFactory).getTokenAddress(addr);\\r\\n        if (token != address(0)) {\\r\\n          return addr;\\r\\n        }\\r\\n        // addr \\u662f token, \\u5f53\\u4e0d\\u5b58\\u5728\\u5bf9\\u5e94\\u7684 etoken, \\u521b\\u5efa\\u5bf9\\u5e94\\u7684 etoken\\r\\n        return ICTokenFactory(ctokenFactory).getCTokenAddress(addr);\\r\\n      }\\r\\n      return etoken;\\r\\n    }\\r\\n\\r\\n    function _getETokenAddress(address addr) internal view returns (address) {\\r\\n      if (addr == address(0) || addr == wETH) {\\r\\n        return cETH;\\r\\n      }\\r\\n      address etoken = ICTokenFactory(ctokenFactory).getCTokenAddressPure(addr);\\r\\n      if (etoken == address(0)) {\\r\\n        return addr;\\r\\n      }\\r\\n      return etoken;\\r\\n    }\\r\\n\\r\\n    // \\u521b\\u5efa\\u8ba2\\u5355\\r\\n    // \\u8c03\\u7528\\u524d\\u9700\\u8981 approve\\r\\n    function createOrder(\\r\\n              address srcToken,\\r\\n              address destToken,\\r\\n              address to,             // \\u5151\\u6362\\u5f97\\u5230\\u7684 token \\u53d1\\u9001\\u5730\\u5740, \\u6760\\u6746\\u4f20\\u7528\\u6237\\u5730\\u5740\\r\\n              uint amountIn,\\r\\n              uint guaranteeAmountOut,       // \\r\\n              uint flag\\r\\n          )\\r\\n          public\\r\\n          payable\\r\\n          whenOpen\\r\\n          nonReentrant\\r\\n          returns (uint idx) {\\r\\n      require(srcToken != destToken, \\\"identical token\\\");\\r\\n\\r\\n      if (srcToken == address(0)) {\\r\\n        // \\u8f6c\\u5165 wETH\\r\\n        require(msg.value >= amountIn, \\\"not enough amountIn\\\");\\r\\n        // IWHT(wETH).deposit{value: msg.value}();\\r\\n        // srcToken = wETH;\\r\\n      } else {\\r\\n        // should approve outside\\r\\n        TransferHelper.safeTransferFrom(srcToken, msg.sender, address(this), amountIn);\\r\\n      }\\r\\n\\r\\n      {\\r\\n        // \\u6700\\u4f4e\\u6302\\u5355\\u91cf\\u9650\\u5236\\r\\n        require(amountIn > minAmounts[srcToken], \\\"less than min amount\\\");\\r\\n      }\\r\\n      idx = orderId ++;\\r\\n      DataTypes.OrderItem storage order = orders[idx];\\r\\n      order.orderId = idx;\\r\\n      order.owner = msg.sender;\\r\\n      order.to = to == address(0) ? msg.sender : to;\\r\\n      // solhint-disable-next-line\\r\\n      order.timestamp = block.timestamp; // maskTimestamp(block.timestamp, expiredAt);\\r\\n      order.flag = flag;\\r\\n      order.tokenAmt.fulfiled = 0;\\r\\n      address etoken = _getOrCreateETokenAddress(srcToken);\\r\\n      {\\r\\n        order.tokenAmt.srcToken = srcToken;\\r\\n        order.tokenAmt.srcEToken = etoken;\\r\\n        order.tokenAmt.amountIn = amountIn;\\r\\n        if (srcToken != etoken) {\\r\\n          // order.isEToken = true;\\r\\n          // mint to etoken\\r\\n          if (srcToken == address(0)) {\\r\\n            uint balanceBefore = IERC20(cETH).balanceOf(address(this));\\r\\n            ICETH(cETH).mint{value: msg.value}();\\r\\n            order.tokenAmt.amountInMint = IERC20(cETH).balanceOf(address(this)).sub(balanceBefore);\\r\\n          } else {\\r\\n            uint balanceBefore = IERC20(etoken).balanceOf(address(this));\\r\\n            IERC20(srcToken).approve(etoken, amountIn);\\r\\n            ICToken(etoken).mint(amountIn);\\r\\n            ICToken(etoken).approve(etoken, 0);\\r\\n            order.tokenAmt.amountInMint = IERC20(etoken).balanceOf(address(this)).sub(balanceBefore);\\r\\n          }\\r\\n        } else {\\r\\n          order.tokenAmt.amountInMint = amountIn;\\r\\n        }\\r\\n      }\\r\\n      order.tokenAmt.destToken = destToken;\\r\\n      address destEToken = _getOrCreateETokenAddress(destToken);\\r\\n      order.tokenAmt.destEToken = destEToken;\\r\\n      order.tokenAmt.guaranteeAmountOut = guaranteeAmountOut;\\r\\n\\r\\n      // src dest \\u5fc5\\u987b\\u540c\\u65f6\\u4e3a token \\u6216\\u8005 etoken\\r\\n      require((srcToken == etoken) == (destToken == destEToken), \\\"both token or etoken\\\");\\r\\n\\r\\n      if (msg.sender == marginAddr) {\\r\\n        require(isMargin(flag), \\\"flag should be margin\\\");\\r\\n        // \\u4ee3\\u6301\\u5408\\u7ea6\\u53ea\\u80fd\\u6302 etoken\\r\\n        require(etoken == srcToken, \\\"src should be etoken\\\");\\r\\n        require(to != msg.sender, \\\"to should be user's address\\\");\\r\\n        require(order.tokenAmt.destEToken == destToken, \\\"dest should be etoken\\\");\\r\\n      }\\r\\n\\r\\n      order.pair = _pairFor(etoken, destEToken);\\r\\n\\r\\n      _putOrder(order);\\r\\n    }\\r\\n\\r\\n    function pairFor(address srcToken, address destToken) public view returns(uint pair) {\\r\\n      return _pairFor(_getETokenAddress(srcToken), _getETokenAddress(destToken));\\r\\n    }\\r\\n\\r\\n    // \\u8c03\\u7528\\u524d\\u9700\\u8981\\u786e\\u4fdd srcToken destToken \\u90fd\\u662f etoken\\r\\n    // \\u4ea4\\u6613\\u5bf9hash \\u533a\\u5206\\u65b9\\u5411 eth->usdt \\u4e0e usdt->eth \\u662f\\u4e0d\\u540c\\u7684\\u4ea4\\u6613\\u5bf9\\r\\n    function _pairFor(address srcToken, address destToken) private pure returns(uint pair) {\\r\\n      // if (srcToken == address(0)) {\\r\\n      //     srcToken = wETH;\\r\\n      // }\\r\\n      // if (destToken == address(0)) {\\r\\n      //     destToken = wETH;\\r\\n      // }\\r\\n      // (address token0, address token1) = srcToken < destToken ? (srcToken, destToken) : (destToken, srcToken);\\r\\n      pair = uint(keccak256(abi.encodePacked(srcToken, destToken)));\\r\\n    }\\r\\n\\r\\n    // \\u83b7\\u53d6\\u6240\\u6709\\u8ba2\\u5355\\u5217\\u8868\\r\\n    function getAllOrders() external view returns(DataTypes.OrderItem[] memory allOrders) {\\r\\n      uint total = 0;\\r\\n      uint id = 0;\\r\\n      for (uint i = 0; i < orderId; i ++) {\\r\\n        uint flag = orders[i].flag;\\r\\n        if (_orderClosed(flag) == false) {\\r\\n          total ++;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      allOrders = new DataTypes.OrderItem[](total);\\r\\n      for (uint i = 0; i < orderId; i ++) {\\r\\n        DataTypes.OrderItem memory order = orders[i];\\r\\n        if (_orderClosed(order.flag) == false) {\\r\\n          allOrders[id] = order;\\r\\n          id ++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function _orderClosed(uint flag) private pure returns (bool) {\\r\\n      return (flag & _ORDER_CLOSED) != 0;\\r\\n    }\\r\\n    \\r\\n    // \\u8c03\\u7528\\u8005\\u5224\\u65ad\\u662f\\u5426\\u6709\\u8db3\\u591f\\u7684 token \\u53ef\\u4ee5\\u8d4e\\u56de\\r\\n    function cancelOrder(uint orderId) public nonReentrant {\\r\\n      DataTypes.OrderItem storage order = orders[orderId];\\r\\n      bool margin = isMargin(order.flag);\\r\\n\\r\\n      if (margin) {\\r\\n        require(msg.sender == owner() || msg.sender == marginAddr, \\\"cancelMarginOrder: no auth\\\");\\r\\n      } else {\\r\\n        require(msg.sender == owner() || msg.sender == order.owner, \\\"cancelOrder: no auth\\\");\\r\\n      }\\r\\n      require(_orderClosed(order.flag) == false, \\\"order has been closed\\\");\\r\\n\\r\\n      // \\u9000\\u56de\\u672a\\u6210\\u4ea4\\u90e8\\u5206\\r\\n      address srcToken = order.tokenAmt.srcToken;\\r\\n      address srcEToken = order.tokenAmt.srcEToken;\\r\\n      uint amt = order.tokenAmt.amountInMint.sub(order.tokenAmt.fulfiled);\\r\\n\\r\\n      if (srcToken != srcEToken) {\\r\\n        // redeem etoken\\r\\n        // \\u5982\\u679c\\u6709\\u8db3\\u591f\\u591a\\u7684 etoken \\u53ef\\u4ee5\\u8d4e\\u56de, \\u5219\\u5168\\u90e8\\u8d4e\\u56de; \\u5426\\u5219\\u5c3d\\u53ef\\u80fd\\u591a\\u7684\\u8d4e\\u56de\\r\\n        // uint cash = ICToken(srcEToken).getCash();\\r\\n        uint redeemAmt = amt;\\r\\n\\r\\n        if (redeemAmt > 0) {\\r\\n          // redeem token\\r\\n          uint balanceBefore;\\r\\n          if (srcEToken == cETH) {\\r\\n            console.log(\\\"redeem cETH:\\\", cETH, order.owner);\\r\\n            console.log(\\\"casH: %d redeemAmt: %d\\\", ICToken(cETH).getCash(), redeemAmt);\\r\\n            balanceBefore = address(this).balance;\\r\\n            uint ret = ICToken(cETH).redeem(redeemAmt);\\r\\n            console.log(\\\"redeem ceth:\\\", ret, redeemAmt);\\r\\n            uint amtToSend = address(this).balance.sub(balanceBefore);\\r\\n            TransferHelper.safeTransferETH(order.owner, amtToSend);\\r\\n          } else {\\r\\n            console.log(\\\"redeem token:\\\", srcEToken, redeemAmt);\\r\\n            balanceBefore = IERC20(srcToken).balanceOf(address(this));\\r\\n            ICToken(srcEToken).redeem(redeemAmt);\\r\\n            uint amtToSend = IERC20(srcToken).balanceOf(address(this)).sub(balanceBefore);\\r\\n            TransferHelper.safeTransfer(srcToken, order.owner, amtToSend);\\r\\n            console.log(\\\"redeem token success\\\", srcEToken, redeemAmt);\\r\\n          }\\r\\n        }\\r\\n        // if (remainingEToken > 0) {\\r\\n        //   TransferHelper.safeTransfer(srcEToken, order.owner, remainingEToken);\\r\\n        // }\\r\\n      } else {\\r\\n        TransferHelper.safeTransfer(srcToken, order.owner, amt);\\r\\n      }\\r\\n\\r\\n      // \\u6760\\u6746\\u7528\\u6237\\u6210\\u4ea4\\u7684\\u5e01\\u5df2\\u7ecf\\u8f6c\\u7ed9\\u4ee3\\u6301\\u5408\\u7ea6, \\u8fd9\\u91cc\\u53ea\\u5904\\u7406\\u975e\\u6760\\u6746\\u7528\\u6237\\u7684\\u5e01\\uff0c\\u8fd8\\u7ed9\\u7528\\u6237\\r\\n      if (!margin) {\\r\\n        address dest = order.tokenAmt.destEToken;\\r\\n        address destToken = order.tokenAmt.destToken;\\r\\n        uint balance = balanceOf[dest][order.to];\\r\\n        if (balance > 0) {\\r\\n          console.log(\\\"withdraw fulfiled to maker:\\\", order.to, balance);\\r\\n          if (dest == destToken) {\\r\\n              _withdraw(order.to, dest, balance, balance);\\r\\n          } else {\\r\\n              _withdrawUnderlying(order.to, destToken, dest, balance, balance);\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        // \\u901a\\u77e5\\u6760\\u6746\\u5408\\u7ea6\\u5904\\u7406 \\u6302\\u5355 srcToken\\r\\n        IMarginHolding(marginAddr).onCanceled(order.to, srcEToken, order.tokenAmt.destToken, order.tokenAmt.srcToken, amt);\\r\\n      }\\r\\n\\r\\n      emit CancelOrder(\\r\\n                  order.owner,\\r\\n                  order.tokenAmt.srcToken,\\r\\n                  order.tokenAmt.destToken,\\r\\n                  orderId\\r\\n              );\\r\\n      order.flag |= _ORDER_CLOSED;\\r\\n      _removeOrder(order);\\r\\n    }\\r\\n\\r\\n    /// @dev get maker fee rate\\r\\n    function getMakerFeeRate(uint256 pair) public view returns (uint) {\\r\\n      uint fee = pairFeeRate[pair].feeMaker();\\r\\n      if (fee == 0) {\\r\\n        return defaultFeeMaker;\\r\\n      }\\r\\n      return fee - 1;\\r\\n    }\\r\\n\\r\\n    /// @dev get taker fee rate\\r\\n    function getTakerFeeRate(uint256 pair) public view returns (uint) {\\r\\n      uint fee = pairFeeRate[pair].feeTaker();\\r\\n      if (fee == 0) {\\r\\n        return defaultFeeTaker;\\r\\n      }\\r\\n\\r\\n      return fee - 1;\\r\\n    }\\r\\n\\r\\n    struct FulFilAmt {\\r\\n      bool isToken;      // \\u662f\\u5426\\u662f token\\r\\n      uint256 filled;    // \\u6210\\u4ea4\\u7684 srcEToken\\r\\n      uint256 takerFee;  // taker \\u624b\\u7eed\\u8d39\\r\\n      uint256 makerFee;  // maker \\u624b\\u7eed\\u8d39\\r\\n      uint256 takerAmt;  // taker \\u5f97\\u5230\\u7684 srcEToken = amtDest - fee\\r\\n      uint256 takerAmtToken; // taker \\u5f97\\u5230\\u7684 srcToken = amtDestToken - fee\\r\\n      uint256 makerAmt;      // maker \\u5f97\\u5230\\u7684 destEToken\\r\\n      uint256 amtDest;       // taker \\u4ed8\\u51fa srcEToken\\r\\n      uint256 amtDestToken;  // taker \\u4ed8\\u51fa\\u7684 srcToken\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev fulfilOrder orderbook order, etoken in and etoken out\\r\\n    // order \\u6210\\u4ea4, \\u6536\\u53d6\\u6210\\u4ea4\\u540e\\u7684\\u5e01\\u7684\\u624b\\u7eed\\u8d39, \\u666e\\u901a\\u8ba2\\u5355, maker \\u6210\\u4ea4\\u7684\\u5e01\\u7531\\u5408\\u7ea6\\u4ee3\\u6301; taker \\u7684\\u5e01\\u53d1\\u7ed9\\u7528\\u6237, amtToTaken \\u662f src EToken \\u7684\\u6570\\u91cf\\r\\n    /// @param orderId order id\\r\\n    /// @param amtToTaken \\u6210\\u4ea4\\u591a\\u5c11\\u91cf\\r\\n    /// @param to \\u5408\\u7ea6\\u5730\\u5740\\u6216\\u8005 msg.sender\\r\\n    /// @param isToken \\u7528\\u6237\\u8f93\\u5165 token \\u4e14\\u5f97\\u5230 token, \\u8c03\\u7528\\u8005\\u987b approve \\u4e14\\u786e\\u4fdd srcEToken \\u7684 cash \\u8db3\\u591f\\u5151\\u4ed8\\r\\n    /// @param partialFill \\u662f\\u5426\\u5141\\u8bb8\\u90e8\\u5206\\u6210\\u4ea4(\\u6b63\\u597d\\u6b64\\u65f6\\u90e8\\u5206\\u88ab\\u5176\\u4ed6\\u4ebataken)\\r\\n    /// @param data flashloan \\u5408\\u7ea6\\u6267\\u884c\\u4ee3\\u7801\\r\\n    /// @return fulFilAmt (\\u4e70\\u5230\\u7684\\u5e01\\u6570\\u91cf, \\u4ed8\\u51fa\\u7684\\u5e01\\u6570\\u91cf)\\r\\n    function fulfilOrder(\\r\\n                uint orderId,\\r\\n                uint amtToTaken,\\r\\n                address to,\\r\\n                bool isToken,\\r\\n                bool partialFill,\\r\\n                bytes calldata data\\r\\n              )\\r\\n              external\\r\\n              payable\\r\\n              whenOpen\\r\\n              nonReentrant\\r\\n              returns (FulFilAmt memory fulFilAmt) {\\r\\n      DataTypes.OrderItem storage order = orders[orderId];\\r\\n      \\r\\n      if ((order.flag & _ORDER_CLOSED) > 0) {\\r\\n          return fulFilAmt;\\r\\n      }\\r\\n\\r\\n      DataTypes.TokenAmount memory tokenAmt = order.tokenAmt;\\r\\n      if (to == address(0)) {\\r\\n        to = msg.sender;\\r\\n      }\\r\\n\\r\\n      fulFilAmt.isToken = isToken;\\r\\n      fulFilAmt.filled  = amtToTaken;  // \\u6302\\u5355\\u88ab\\u5403\\u7684\\u6570\\u91cf\\r\\n      {\\r\\n        uint left = tokenAmt.amountInMint.sub(tokenAmt.fulfiled);\\r\\n        if (amtToTaken > left) {\\r\\n          require(partialFill, \\\"not enough to fulfil\\\");\\r\\n          \\r\\n          fulFilAmt.filled = left;\\r\\n        }\\r\\n      }\\r\\n      _getFulfiledAmt(tokenAmt, fulFilAmt, order.pair);\\r\\n\\r\\n      console.log(\\\"takerAmt=%d makerAmt=%d filled=%d\\\", fulFilAmt.takerAmt, fulFilAmt.makerAmt, fulFilAmt.filled);\\r\\n      \\r\\n      // \\u9a8c\\u8bc1\\u8f6c\\u5165 taker \\u7684\\u5e01\\r\\n      address destEToken = order.tokenAmt.destEToken;\\r\\n      address srcEToken = order.tokenAmt.srcEToken;\\r\\n\\r\\n      // \\u5148\\u8f6c\\u5e01\\u7ed9 taker\\r\\n      if (isToken) {\\r\\n            // redeem srcEToken\\r\\n          IERC20(srcEToken).approve(srcEToken, fulFilAmt.takerAmt);\\r\\n          ICToken(srcEToken).redeem(fulFilAmt.takerAmt);\\r\\n          TransferHelper.safeTransfer(order.tokenAmt.srcToken, to, fulFilAmt.takerAmtToken);\\r\\n      } else {\\r\\n          TransferHelper.safeTransfer(srcEToken, to, fulFilAmt.takerAmt);\\r\\n      }\\r\\n      console.log(\\\"transfer srcToken to taker success: %s %d\\\", order.tokenAmt.srcToken, fulFilAmt.takerAmtToken);\\r\\n\\r\\n      // \\u4ece taker \\u54ea\\u91cc\\u8f6c\\u5165 destToken / destEToken\\r\\n      if (data.length > 0) {\\r\\n          uint256 balanceBefore = IERC20(destEToken).balanceOf(address(this));\\r\\n          IHswapV2Callee(to).hswapV2Call(msg.sender, fulFilAmt.takerAmt, fulFilAmt.amtDest, data);\\r\\n          uint256 transferIn = IERC20(destEToken).balanceOf(address(this)).sub(balanceBefore);\\r\\n          require(transferIn >= fulFilAmt.amtDest, \\\"not enough\\\");\\r\\n      } else {\\r\\n          if (isToken) {\\r\\n            address destToken = order.tokenAmt.destToken;\\r\\n            TransferHelper.safeTransferFrom(destToken, msg.sender, address(this), fulFilAmt.amtDestToken);\\r\\n            // mint\\r\\n            IERC20(destToken).approve(destEToken, fulFilAmt.amtDestToken);\\r\\n            uint ret = ICToken(destEToken).mint(fulFilAmt.amtDestToken);\\r\\n            require(ret == 0, \\\"mint failed\\\");\\r\\n          } else {\\r\\n            // taker \\u5f97\\u5230 srcEToken, maker \\u5f97\\u5230\\u7684 destEToken, \\u6682\\u5b58\\u5728 \\u5408\\u7ea6\\u4e2d\\r\\n            TransferHelper.safeTransferFrom(destEToken, msg.sender, address(this), fulFilAmt.amtDest);\\r\\n          }\\r\\n      }\\r\\n\\r\\n      // \\u5c06\\u624b\\u7eed\\u8d39\\u8f6c\\u7ed9 feeTo\\r\\n      if (fulFilAmt.takerFee > 0) {\\r\\n        TransferHelper.safeTransfer(srcEToken, feeTo, fulFilAmt.takerFee);\\r\\n      }\\r\\n      if (fulFilAmt.makerFee > 0) {\\r\\n        TransferHelper.safeTransfer(destEToken, feeTo, fulFilAmt.makerFee);\\r\\n      }\\r\\n\\r\\n      // \\u66f4\\u6539\\u76f8\\u5173\\u7684\\u72b6\\u6001\\r\\n      // 1. \\u589e\\u52a0 maker \\u7684 balance; \\u5982\\u679c\\u662f margin, \\u8f6c\\u5e01\\u7ed9 margin, \\u5e76\\u6267\\u884c\\u56de\\u8c03\\r\\n      // 2. \\u4fee\\u6539order\\u72b6\\u6001\\r\\n      _updateOrder(order, fulFilAmt.filled, fulFilAmt.makerAmt);\\r\\n\\r\\n      emit FulFilOrder(\\r\\n              order.owner,\\r\\n              msg.sender,\\r\\n              orderId,\\r\\n              fulFilAmt.filled,\\r\\n              fulFilAmt.makerAmt\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev \\u66f4\\u65b0\\u72b6\\u6001\\r\\n    function _updateOrder(\\r\\n                DataTypes.OrderItem storage order,\\r\\n                uint filled,\\r\\n                uint makerGot\\r\\n              ) private {\\r\\n        address maker = order.to;\\r\\n        address srcEToken = order.tokenAmt.srcEToken;\\r\\n        address destEToken = order.tokenAmt.destEToken;\\r\\n\\r\\n        if (isMargin(order.flag)) {\\r\\n          // \\u8f6c\\u7ed9 margin \\u5408\\u7ea6\\r\\n          TransferHelper.safeTransfer(destEToken, marginAddr, makerGot);\\r\\n          // \\u56de\\u8c03 todo ??\\r\\n          IMarginHolding(marginAddr).onFulfiled(maker, srcEToken, destEToken, makerGot, filled);\\r\\n        } else {\\r\\n          balanceOf[destEToken][maker] += makerGot;\\r\\n        }\\r\\n\\r\\n        // \\u5df2\\u6210\\u4ea4\\r\\n        order.tokenAmt.fulfiled = order.tokenAmt.fulfiled.add(filled);\\r\\n\\r\\n        if (order.tokenAmt.fulfiled >= order.tokenAmt.amountInMint) {\\r\\n          //\\r\\n          order.flag |= _ORDER_CLOSED;\\r\\n          _removeOrder(order);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev \\u6839\\u636eorder\\u7684\\u5151\\u6362\\u6bd4\\u4f8b, \\u624b\\u7eed\\u8d39, \\u8ba1\\u7b97\\u5151\\u6362\\u5f97\\u5230\\u7684dest token\\u7684\\u5151\\u6362\\u6570\\u91cf. \\u5982\\u679c \\u662f token, \\u5219\\u8c03\\u7528 EToken \\u7684\\u63a5\\u53e3\\u66f4\\u65b0 exchangeRate, \\u56e0\\u6b64\\uff0c\\u8fd9\\u4e2a\\u65b9\\u6cd5\\u4e0d\\u662f\\u53ea\\u8bfb\\u65b9\\u6cd5\\r\\n    /// @param fulFilAmt \\u5404\\u79cd\\u6210\\u4ea4\\u6570\\u91cf, taker\\u4e70\\u5230\\u7684\\u5e01\\u7684\\u6570\\u91cf taker \\u4ed8\\u51fa\\u7684\\u5e01\\u7684\\u6570\\u91cf maker \\u5f97\\u5230\\u7684\\u548c\\u5356\\u51fa\\u7684\\u5e01\\u7684\\u6570\\u91cf\\r\\n    function _getFulfiledAmt(\\r\\n                DataTypes.TokenAmount memory tokenAmt,\\r\\n                FulFilAmt memory fulFilAmt,\\r\\n                uint256 pair\\r\\n              )\\r\\n              private {\\r\\n      uint amtToTaken = fulFilAmt.filled;\\r\\n      // \\u6302\\u5355\\u8005\\u5728\\u4e0d\\u6263\\u9664\\u624b\\u7eed\\u8d39\\u7684\\u60c5\\u51b5\\u4e0b\\u5f97\\u5230\\u7684\\u5e01\\u7684\\u6570\\u91cf\\r\\n      fulFilAmt.amtDest = OBPriceLogic.convertBuyAmountByETokenIn(tokenAmt, amtToTaken);\\r\\n\\r\\n      fulFilAmt.takerFee = amtToTaken.mul(getTakerFeeRate(pair)).div(DENOMINATOR);\\r\\n      fulFilAmt.makerFee = amtToTaken.mul(getMakerFeeRate(pair)).div(DENOMINATOR);\\r\\n      // taker\\u5f97\\u5230\\u7684\\u5e01\\uff0c\\u6263\\u9664\\u624b\\u7eed\\u8d39\\r\\n      fulFilAmt.takerAmt = amtToTaken.sub(fulFilAmt.takerFee);\\r\\n      // maker \\u5f97\\u5230\\u7684\\u5e01\\u6570\\u91cf\\uff0c\\u6263\\u9664\\u624b\\u7eed\\u8d39\\r\\n      fulFilAmt.makerAmt = fulFilAmt.amtDest.sub(fulFilAmt.makerFee);\\r\\n\\r\\n      if (fulFilAmt.isToken) {\\r\\n        // address srcEToken = tokenAmt.srcEToken;\\r\\n        uint256 srcRate = OBPriceLogic.refreshTokenExchangeRate(ICToken(tokenAmt.srcEToken));\\r\\n        uint256 destRate = OBPriceLogic.refreshTokenExchangeRate(ICToken(tokenAmt.destEToken));\\r\\n        fulFilAmt.takerAmtToken = fulFilAmt.takerAmt.mul(srcRate).div(1e18);\\r\\n        fulFilAmt.amtDestToken = fulFilAmt.amtDest.mul(destRate).div(1e18);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // withdraw etoken\\r\\n    // token should be etoken\\r\\n    function _withdraw(address user, address etoken, uint total, uint amt) private {\\r\\n        TransferHelper.safeTransfer(etoken, user, amt);\\r\\n\\r\\n        balanceOf[etoken][user] = total.sub(amt);\\r\\n    }\\r\\n\\r\\n    function _withdrawUnderlying(address user, address token, address etoken, uint total, uint amt) private {\\r\\n        balanceOf[etoken][user] = total.sub(amt);\\r\\n\\r\\n        if (etoken == cETH) {\\r\\n          uint balanceBefore = address(this).balance;\\r\\n          ICETH(cETH).redeem(amt);\\r\\n          uint redeemAmt = address(this).balance.sub(balanceBefore);\\r\\n          TransferHelper.safeTransferETH(user, redeemAmt);\\r\\n        } else {\\r\\n          uint balanceBefore = IERC20(token).balanceOf(address(this));\\r\\n          ICToken(etoken).redeem(amt);\\r\\n          uint redeemAmt = IERC20(token).balanceOf(address(this)).sub(balanceBefore);\\r\\n          TransferHelper.safeTransfer(token, user, redeemAmt);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // \\u7528\\u6237\\u6210\\u4ea4\\u540e\\uff0c\\u8d44\\u91d1\\u7531\\u5408\\u7ea6\\u4ee3\\u7ba1, \\u7528\\u6237\\u63d0\\u73b0\\u5f97\\u5230\\u81ea\\u5df1\\u7684 etoken\\r\\n    function withdraw(address token, uint amt) external {\\r\\n        uint total = balanceOf[token][msg.sender];\\r\\n        require(total > 0, \\\"no asset\\\");\\r\\n        if (amt == 0) {\\r\\n            amt = total;\\r\\n        } else {\\r\\n            require(total >= amt, \\\"not enough asset\\\");\\r\\n        }\\r\\n\\r\\n        _withdraw(msg.sender, token, total, amt);\\r\\n    }\\r\\n\\r\\n    // \\u7528\\u6237\\u6210\\u4ea4\\u540e\\uff0c\\u8d44\\u91d1\\u7531\\u5408\\u7ea6\\u4ee3\\u7ba1, \\u7528\\u6237\\u63d0\\u73b0\\u5f97\\u5230\\u81ea\\u5df1\\u7684 token\\r\\n    function withdrawUnderlying(address token, uint amt) external {\\r\\n        address etoken = _getETokenAddress(token);\\r\\n        uint total = balanceOf[etoken][msg.sender];\\r\\n\\r\\n        require(total > 0, \\\"no asset\\\");\\r\\n        if (amt == 0) {\\r\\n            amt = total;\\r\\n        } else {\\r\\n            require(total >= amt, \\\"not enough asset\\\");\\r\\n        }\\r\\n\\r\\n        _withdrawUnderlying(msg.sender, token, etoken, total, amt);\\r\\n    }\\r\\n\\r\\n    /// @dev \\u8bbe\\u7f6e feeTo \\u5730\\u5740\\r\\n    function setFeeTo(address to) external onlyOwner {\\r\\n      feeTo = to;\\r\\n    }\\r\\n\\r\\n    /// @dev TODO \\u9700\\u8981\\u5173\\u95ed \\u8f6c\\u51fa\\u624b\\u7eed\\u8d39\\r\\n    // function adminTransfer(address token, address to, uint amt) external onlyOwner {\\r\\n    //     if (token == address(0)) {\\r\\n    //       TransferHelper.safeTransferETH(to, amt);\\r\\n    //     } else {\\r\\n    //       TransferHelper.safeTransfer(token, to, amt);\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function _getPairFee(address src, address dest) internal view returns (DataTypes.OBPairConfigMap storage conf) {\\r\\n      address srcEToken = _getETokenAddress(src);\\r\\n      address destEToken = _getETokenAddress(dest);\\r\\n      uint256 pair = _pairFor(srcEToken, destEToken);\\r\\n      conf = pairFeeRate[pair];\\r\\n      return conf;\\r\\n    }\\r\\n\\r\\n    function setPairTakerFee(address src, address dest, uint fee) external onlyOwner {\\r\\n      DataTypes.OBPairConfigMap storage conf = _getPairFee(src, dest);\\r\\n\\r\\n      conf.setFeeTaker(fee);\\r\\n    }\\r\\n    \\r\\n    function setPairMakerFee(address src, address dest, uint fee) external onlyOwner {\\r\\n      DataTypes.OBPairConfigMap storage conf = _getPairFee(src, dest);\\r\\n\\r\\n      conf.setFeeMaker(fee);\\r\\n    }\\r\\n}\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success,) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xc030320725651ab0af06cdc28bcf1de3f29b57f85654bfd839ee171359157f91\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb779338ccafdf739d0d15c888b190fa82f92dba0c3712ca032494cffc10a11c1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\ncontract ReentrancyGuard {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor () internal {\\r\\n        // Storing an initial non-zero value makes deployment a bit more\\r\\n        // expensive, but in exchange the refund on every call to nonReentrant\\r\\n        // will be lower in amount. Since refunds are capped to a percetange of\\r\\n        // the total transaction's gas, it is best to keep them low in cases\\r\\n        // like this one, to increase the likelihood of the full refund coming\\r\\n        // into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7e53ba870c57c1963f9fb765bdbad9270a313765aa60ceb1e8b6b8a4a44d5e05\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant internal WAD = 10 ** 18;\\r\\n    uint256 constant internal RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6b2ed04e70305d6538fe8eddf72456d08938ca9d78cabc596963a8fcef88bb5a\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "$95c6f8e4159971276d72925c2dc3de45f7$__906324637ce0906111cb9084908690600401614aa8565b60006040518083038186803b1580156111e357600080fd5b505af41580156111f7573d6000803e3d6000fd5b5050505050505050565b600061120c82611125565b611215846107da565b1790505b92915050565b61122761319b565b6001600160a01b0316611238611bb4565b6001600160a01b03161461125e5760405162461bcd60e51b81526004016108459061467e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60025460009060ff16156112ce5760405162461bcd60e51b815260040161084590614891565b60105460ff166112f05760405162461bcd60e51b815260040161084590614a01565b6010805460ff191690556001600160a01b0387811690871614156113265760405162461bcd60e51b8152600401610845906148ff565b6001600160a01b03871661135957833410156113545760405162461bcd60e51b8152600401610845906146ea565b611365565b611365873330876131de565b6001600160a01b0387166000908152600a6020526040902054841161139c5760405162461bcd60e51b81526004016108459061478f565b50600180548082019091556000818152600c602052604090208181556005810180546001600160a01b031916331790556001600160a01b038616156113e157856113e3565b335b6006820180546001600160a01b0319166001600160a01b0392909216919091179055426003820155600481018390556000600d8201819055611424896132cf565b6007830180546001600160a01b03808d166001600160a01b03199283168117909355600986018054918516919092168117909155600b8501899055919250146117e2576001600160a01b0389166115a2576003546040516370a0823160e01b81526000916001600160a01b0316906370a08231906114a69030906004016141c1565b60206040518083038186803b1580156114be57600080fd5b505afa1580156114d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f69190614001565b9050600360009054906101000a90046001600160a01b03166001600160a01b0316631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561154857600080fd5b505af115801561155c573d6000803e3d6000fd5b50506003546040516370a0823160e01b815261159794508593506001600160a01b0390911691506370a0823190610d419030906004016141c1565b600c840155506117dd565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906115d19030906004016141c1565b60206040518083038186803b1580156115e957600080fd5b505afa1580156115fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116219190614001565b60405163095ea7b360e01b81529091506001600160a01b038b169063095ea7b3906116529085908b906004016142ad565b602060405180830381600087803b15801561166c57600080fd5b505af1158015611680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a49190613fcd565b5060405163140e25ad60e31b81526001600160a01b0383169063a0712d68906116d1908a90600401614a9f565b602060405180830381600087803b1580156116eb57600080fd5b505af11580156116ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117239190614001565b5060405163095ea7b360e01b81526001600160a01b0383169063095ea7b3906117539085906000906004016142ad565b602060405180830381600087803b15801561176d57600080fd5b505af1158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190613fcd565b506117d681836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d4191906141c1565b600c840155505b6117ea565b600c82018690555b6008820180546001600160a01b0319166001600160a01b038a161790556000611812896132cf565b600a840180546001600160a01b038084166001600160a01b03199092168217909255600e86018990559192508b811684821614908b16909114146118685760405162461bcd60e51b815260040161084590614936565b6005546001600160a01b0316331415611929576118848561195b565b6118a05760405162461bcd60e51b8152600401610845906148c8565b896001600160a01b0316826001600160a01b0316146118d15760405162461bcd60e51b8152600401610845906145ea565b6001600160a01b0388163314156118fa5760405162461bcd60e51b8152600401610845906145b3565b600a8301546001600160a01b038a81169116146119295760405162461bcd60e51b815260040161084590614545565b61193382826134fb565b60028401556119418361352f565b50506010805460ff19166001179055509695505050505050565b7f800000000000000000000000000000000000000000000000000000000000000016151590565b606060008060005b6001548110156119c3576000818152600c60205260409020600401546119af816128e5565b6119ba576001909301925b5060010161198a565b508167ffffffffffffffff811180156119db57600080fd5b50604051908082528060200260200182016040528015611a1557816020015b611a02613d7b565b8152602001906001900390816119fa5790505b50925060005b600154811015611b4957611a2d613d7b565b506000818152600c6020818152604092839020835161010080820186528254825260018301548285015260028301548287015260038301546060808401919091526004840154608080850191825260058601546001600160a01b0390811660a0808801919091526006880154821660c0808901919091528b519687018c526007890154831687526008890154831699870199909952600988015482169a86019a909a52600a8701541692840192909252600b850154918301919091529483015495810195909552600d82015492850192909252600e015460e08481019190915281019290925251611b1d906128e5565b611b405780858481518110611b2e57fe5b60209081029190910101526001909201915b50600101611a1b565b50505090565b611b5761319b565b6001600160a01b0316611b68611bb4565b6001600160a01b031614611b8e5760405162461bcd60e51b81526004016108459061467e565b6002805460ff19169055565b6fffffffffffffffffffffffffffffffff19919091161790565b6000546001600160a01b031690565b61271081565b6000611be5611bd784613668565b611be084613668565b6134fb565b9392505050565b60008181526009602052604080822090517f652bccd3000000000000000000000000000000000000000000000000000000008152829173__$95c6f8e4159971276d72925c2dc3de45f7$__9163652bccd391611c4a91600401614a9f565b60206040518083038186803b158015611c6257600080fd5b505af4158015611c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9a9190614001565b905080611cab5750506007546107ee565b6000190192915050565b600a6020526000908152604090205481565b611ccf61319b565b6001600160a01b0316611ce0611bb4565b6001600160a01b031614611d065760405162461bcd60e51b81526004016108459061467e565b6000611d12848461319f565b6040517f32b914bf00000000000000000000000000000000000000000000000000000000815290915073__$95c6f8e4159971276d72925c2dc3de45f7$__906332b914bf906111cb9084908690600401614aa8565b6003546001600160a01b031681565b611d7e61319b565b6001600160a01b0316611d8f611bb4565b6001600160a01b031614611db55760405162461bcd60e51b81526004016108459061467e565b6002805460ff19166001179055565b600c6020818152600092835260409283902080546001820154600283015460038401546004850154600586015460068701548a5161010081018c5260078901546001600160a01b03908116825260088a015481169a82019a909a5260098901548a169b81019b909b52600a880154891660608c0152600b88015460808c01529887015460a08b0152600d87015460c08b0152600e9096015460e08a0152939792969195909481169291169088565b60008181526009602052604080822090517fa645cb6d000000000000000000000000000000000000000000000000000000008152829173__$95c6f8e4159971276d72925c2dc3de45f7$__9163a645cb6d91611ed091600401614a9f565b60206040518083038186803b158015611ee857600080fd5b505af4158015611efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f209190614001565b905080611cab5750506008546107ee565b611f3961319b565b6001600160a01b0316611f4a611bb4565b6001600160a01b031614611f705760405162461bcd60e51b81526004016108459061467e565b6001600160a01b039091166000908152600a6020526040902055565b60801b1790565b60025461010090046001600160a01b031681565b611faf61319b565b6001600160a01b0316611fc0611bb4565b6001600160a01b031614611fe65760405162461bcd60e51b81526004016108459061467e565b6001600160a01b03811661200c5760405162461bcd60e51b81526004016108459061447a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600b60209081526040808320338452909152902054806120a85760405162461bcd60e51b8152600401610845906146b3565b816120b5578091506120d5565b818110156120d55760405162461bcd60e51b81526004016108459061496d565b6120e133848385612bca565b505050565b6120ee61319b565b6001600160a01b03166120ff611bb4565b6001600160a01b0316146121255760405162461bcd60e51b81526004016108459061467e565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600b60209081526000928352604080842090915290825290205481565b61216c613dd7565b60025460ff161561218f5760405162461bcd60e51b815260040161084590614891565b60105460ff166121b15760405162461bcd60e51b815260040161084590614a01565b6010805460ff191690556000888152600c602052604090206004810154600116156121dc5750612825565b6121e4613e25565b50604080516101008101825260078301546001600160a01b0390811682526008840154811660208301526009840154811692820192909252600a83015482166060820152600b8301546080820152600c83015460a0820152600d83015460c0820152600e83015460e082015290881661225b573397505b86151583526020830189905260c081015160a082015160009161227e91906128ed565b9050808a11156122ad57866122a55760405162461bcd60e51b815260040161084590614823565b602084018190525b506122bd81848460020154613744565b6122ed604051806060016040528060218152602001614bac6021913984608001518560c0015186602001516139e9565b600a82015460098301546001600160a01b039182169116881561243557608085015160405163095ea7b360e01b81526001600160a01b0383169163095ea7b39161233b9185916004016142ad565b602060405180830381600087803b15801561235557600080fd5b505af1158015612369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238d9190613fcd565b50608085015160405163db006a7560e01b81526001600160a01b0383169163db006a75916123be9190600401614a9f565b602060405180830381600087803b1580156123d857600080fd5b505af11580156123ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124109190614001565b50600784015460a0860151612430916001600160a01b0316908c90612adc565b612444565b612444818b8760800151612adc565b61247b604051806060016040528060298152602001614bcd60299139600786015460a08801516001600160a01b0390911690612a7c565b85156125e7576040516370a0823160e01b81526000906001600160a01b038416906370a08231906124b09030906004016141c1565b60206040518083038186803b1580156124c857600080fd5b505afa1580156124dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125009190614001565b608087015160e08801516040517f226dc8820000000000000000000000000000000000000000000000000000000081529293506001600160a01b038e169263226dc882926125569233928e908e906004016141d5565b600060405180830381600087803b15801561257057600080fd5b505af1158015612584573d6000803e3d6000fd5b5050505060006125ba82856001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d4191906141c1565b90508660e001518110156125e05760405162461bcd60e51b81526004016108459061450e565b505061274d565b881561273d5760088401546101008601516001600160a01b0390911690612613908290339030906131de565b61010086015160405163095ea7b360e01b81526001600160a01b0383169163095ea7b3916126459187916004016142ad565b602060405180830381600087803b15801561265f57600080fd5b505af1158015612673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126979190613fcd565b5061010086015160405163140e25ad60e31b81526000916001600160a01b0386169163a0712d68916126cb91600401614a9f565b602060405180830381600087803b1580156126e557600080fd5b505af11580156126f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271d9190614001565b905080156125e05760405162461bcd60e51b81526004016108459061457c565b61274d8233308860e001516131de565b6040850151156127765760065460408601516127769183916001600160a01b0390911690612adc565b60608501511561279f57600654606086015161279f9184916001600160a01b0390911690612adc565b6127b28486602001518760c00151613a4b565b336001600160a01b03168460050160009054906101000a90046001600160a01b03166001600160a01b03167fd00ede2e0292fd63d9ba8b4b572003009a04bcdf39cd75ac9684433d20de7ebf8e88602001518960c0015160405161281893929190614ad3565b60405180910390a3505050505b6010805460ff19166001179055979650505050505050565b600e60205281600052604060002081815481106107c557fe5b600061286183613668565b6001600160a01b0381166000908152600b60209081526040808320338452909152902054909150806128a55760405162461bcd60e51b8152600401610845906146b3565b826128b2578092506128d2565b828110156128d25760405162461bcd60e51b81526004016108459061496d565b6128df3385848487612c11565b50505050565b600116151590565b6000611be583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613c56565b6120e18383836040516024016129479392919061438e565b60408051601f198184030181529190526020810180516001600160e01b03167ffcec75e000000000000000000000000000000000000000000000000000000000179052613c82565b6120e18383836040516024016129a7939291906143ef565b60408051601f198184030181529190526020810180516001600160e01b03167f969cdd0300000000000000000000000000000000000000000000000000000000179052613c82565b604080516000808252602082019092526001600160a01b038416908390604051612a1991906141a5565b60006040518083038185875af1925050503d8060008114612a56576040519150601f19603f3d011682016040523d82523d6000602084013e612a5b565b606091505b50509050806120e15760405162461bcd60e51b8152600401610845906147c6565b6120e1838383604051602401612a94939291906143c1565b60408051601f198184030181529190526020810180516001600160e01b03167f07c8121700000000000000000000000000000000000000000000000000000000179052613c82565b60006060846001600160a01b031663a9059cbb8585604051602401612b029291906142ad565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612b3b91906141a5565b6000604051808303816000865af19150503d8060008114612b78576040519150601f19603f3d011682016040523d82523d6000602084013e612b7d565b606091505b5091509150818015612ba7575080511580612ba7575080806020019051810190612ba79190613fcd565b612bc35760405162461bcd60e51b815260040161084590614443565b5050505050565b612bd5838583612adc565b612bdf82826128ed565b6001600160a01b039384166000908152600b602090815260408083209790961682529590955292909320919091555050565b612c1b82826128ed565b6001600160a01b038085166000818152600b602090815260408083208b86168452909152902092909255600354161415612cf15760035460405163db006a7560e01b815247916001600160a01b03169063db006a7590612c7f908590600401614a9f565b602060405180830381600087803b158015612c9957600080fd5b505af1158015612cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd19190614001565b506000612cde47836128ed565b9050612cea87826129ef565b5050612bc3565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190612d209030906004016141c1565b60206040518083038186803b158015612d3857600080fd5b505afa158015612d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d709190614001565b60405163db006a7560e01b81529091506001600160a01b0385169063db006a7590612d9f908590600401614a9f565b602060405180830381600087803b158015612db957600080fd5b505af1158015612dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df19190614001565b506000612e2482876001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d4191906141c1565b9050612e31868883612adc565b50505050505050565b6000612e4982602001516107da565b90506000612e5a8360200151611125565b905060008360a001519050600080612e75866080015161195b565b90508015612f895760c08601516001600160a01b0381166000908152600d602052604090205490935060001901848114612f4c576001600160a01b0384166000908152600d60205260409020805482908110612ecd57fe5b9060005260206000200154925082600d6000866001600160a01b03166001600160a01b031681526020019081526020016000208681548110612f0b57fe5b9060005260206000200181905550612f39600c60008581526020019081526020016000206001015486611201565b6000848152600c60205260409020600101555b6001600160a01b0384166000908152600d60205260409020805480612f6d57fe5b6001900381819060005260206000200160009055905550613089565b6001600160a01b0383166000908152600e602052604090205460001901848114613050576001600160a01b0384166000908152600e60205260409020805482908110612fd157fe5b9060005260206000200154925082600e6000866001600160a01b03166001600160a01b03168152602001908152602001600020868154811061300f57fe5b906000526020600020018190555061303d600c60008581526020019081526020016000206001015486611201565b6000848152600c60205260409020600101555b6001600160a01b0384166000908152600e6020526040902080548061307157fe5b60019003818190600052602060002001600090559055505b6040808701516000908152600f602052205460011080156130bf57506040808701516000908152600f6020522054600019018514155b1561316357604080870180516000908152600f60205282812091518152919091205481546000199091019081106130f257fe5b9060005260206000200154915081600f600088604001518152602001908152602001600020868154811061312257fe5b9060005260206000200181905550613150600c60008481526020019081526020016000206001015486611b9a565b6000838152600c60205260409020600101555b6040808701516000908152600f6020522080548061317d57fe5b60019003818190600052602060002001600090559055505050505050565b3390565b6000806131ab84613668565b905060006131b884613668565b905060006131c683836134fb565b60009081526009602052604090209695505050505050565b60006060856001600160a01b03166323b872dd86868660405160240161320693929190614289565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161323f91906141a5565b6000604051808303816000865af19150503d806000811461327c576040519150601f19603f3d011682016040523d82523d6000602084013e613281565b606091505b50915091508180156132ab5750805115806132ab5750808060200190518101906132ab9190613fcd565b6132c75760405162461bcd60e51b8152600401610845906149a4565b505050505050565b60006001600160a01b03821615806132f957506002546001600160a01b0383811661010090920416145b1561331057506003546001600160a01b03166107ee565b6004805460405163714bca1f60e11b81526000926001600160a01b039092169163e297943e91613342918791016141c1565b60206040518083038186803b15801561335a57600080fd5b505afa15801561336e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133929190613eaa565b90506001600160a01b03811661121957600480546040517fb8d7b6690000000000000000000000000000000000000000000000000000000081526000926001600160a01b039092169163b8d7b669916133ed918891016141c1565b60206040518083038186803b15801561340557600080fd5b505afa158015613419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343d9190613eaa565b90506001600160a01b038116156134585783925050506107ee565b600480546040517f26c7bd930000000000000000000000000000000000000000000000000000000081526001600160a01b03909116916326c7bd93916134a0918891016141c1565b602060405180830381600087803b1580156134ba57600080fd5b505af11580156134ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f29190613eaa565b925050506107ee565b6000828260405160200161351092919061417e565b60408051601f1981840301815291905280516020909101209392505050565b8054600482015460006135418261195b565b600585015490915060009081906001600160a01b03168315613595575060068601546001600160a01b03166000818152600d60209081526040822080546001810182559083529120810187905592506135c4565b6001600160a01b0381166000908152600e60209081526040822080546001810182559083529120810187905592505b60028701546000908152600f60209081526040822080546001810182559083529120810187905591506135f78284611f8c565b600188015560088701546007880154600b890154600e8a01546040516001600160a01b0394851694938416938616927fc8419e5c94126588374d91d4332ef5d56223abb9c42776b667e899ccff2c5f2792613657928d9291908d90614ae9565b60405180910390a450505050505050565b60006001600160a01b038216158061369257506002546001600160a01b0383811661010090920416145b156136a957506003546001600160a01b03166107ee565b6004805460405163714bca1f60e11b81526000926001600160a01b039092169163e297943e916136db918791016141c1565b60206040518083038186803b1580156136f357600080fd5b505afa158015613707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372b9190613eaa565b90506001600160a01b03811661121957829150506107ee565b60208201516040517f78cbe05100000000000000000000000000000000000000000000000000000000815273__$ede4fa3877902dc4fe1d8d42678939ceaa$__906378cbe0519061379b9087908590600401614ab6565b60206040518083038186803b1580156137b357600080fd5b505af41580156137c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137eb9190614001565b60e084015261380f61271061380961380285611e72565b8490613ca3565b90613cdd565b604084015261382661271061380961380285611bec565b6060840152604083015161383b9082906128ed565b6080840152606083015160e0840151613853916128ed565b60c08401528251156128df5760408085015190517f0bbc1cea00000000000000000000000000000000000000000000000000000000815260009173__$ede4fa3877902dc4fe1d8d42678939ceaa$__91630bbc1cea916138b5916004016141c1565b60206040518083038186803b1580156138cd57600080fd5b505af41580156138e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139059190614001565b9050600073__$ede4fa3877902dc4fe1d8d42678939ceaa$",
  "libraries": {
    "OBPriceLogic": "0x07F2471243491622743d9bC38A5d0eE8deD15Ed7",
    "OBPairConfig": "0x8Cd3e4E20295587f55AD202838f99cded381d51a"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fulfilOrder(uint256,uint256,address,bool,bool,bytes)": {
        "params": {
          "amtToTaken": "成交多少量",
          "data": "flashloan 合约执行代码",
          "isToken": "用户输入 token 且得到 token, 调用者须 approve 且确保 srcEToken 的 cash 足够兑付",
          "orderId": "order id",
          "partialFill": "是否允许部分成交(正好此时部分被其他人taken)",
          "to": "合约地址或者 msg.sender"
        },
        "returns": {
          "fulFilAmt": "(买到的币数量, 付出的币数量)"
        }
      },
      "getMakerFeeRate(uint256)": {
        "details": "get maker fee rate"
      },
      "getTakerFeeRate(uint256)": {
        "details": "get taker fee rate"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFeeTo(address)": {
        "details": "设置 feeTo 地址"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3542,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 626,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "orderId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 628,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "closed",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 630,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "wETH",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 632,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "cETH",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 634,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "ctokenFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 636,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "marginAddr",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 638,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "feeTo",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 641,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "defaultFeeMaker",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 644,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "defaultFeeTaker",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 648,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "pairFeeRate",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(OBPairConfigMap)44_storage)"
      },
      {
        "astId": 652,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "minAmounts",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 658,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "balanceOf",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 662,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "orders",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(OrderItem)41_storage)"
      },
      {
        "astId": 667,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "marginOrders",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 672,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "addressOrders",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 677,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "pairOrders",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3649,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "_notEntered",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(OBPairConfigMap)44_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.OBPairConfigMap)",
        "numberOfBytes": "32",
        "value": "t_struct(OBPairConfigMap)44_storage"
      },
      "t_mapping(t_uint256,t_struct(OrderItem)41_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.OrderItem)",
        "numberOfBytes": "32",
        "value": "t_struct(OrderItem)41_storage"
      },
      "t_struct(OBPairConfigMap)44_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.OBPairConfigMap",
        "members": [
          {
            "astId": 43,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OrderItem)41_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.OrderItem",
        "members": [
          {
            "astId": 26,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "orderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 28,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "pairAddrIdx",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 30,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "pair",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 32,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 34,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "flag",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 36,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "owner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 38,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "to",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 40,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "tokenAmt",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(TokenAmount)24_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(TokenAmount)24_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.TokenAmount",
        "members": [
          {
            "astId": 9,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "srcToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "destToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "srcEToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 15,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "destEToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 17,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "amountIn",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "amountInMint",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "fulfiled",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 23,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "guaranteeAmountOut",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}