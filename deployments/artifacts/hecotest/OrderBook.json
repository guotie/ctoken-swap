{
  "address": "0x4639F9a380D37E491a84D751F086a70FBC6D395E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ctokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_margin",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "CancelOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "CreateOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtOut",
          "type": "uint256"
        }
      ],
      "name": "FulFilOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "addrIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "guaranteeAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ctokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeMaker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeTaker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtToTaken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isToken",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "partialFill",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fulfilOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isToken",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "filled",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAmtToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amtDest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amtDestToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderBook.FulFilAmt",
          "name": "fulFilAmt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amtToTakens",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isToken",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "partialFill",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fulfilOrders",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pairAddrIdx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pair",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flag",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "srcToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "destToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "srcEToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "destEToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountInMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "fulfiled",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "guaranteeAmountOut",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "destFulfiled",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.TokenAmount",
              "name": "tokenAmt",
              "type": "tuple"
            }
          ],
          "internalType": "struct DataTypes.OrderItem[]",
          "name": "allOrders",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pair",
          "type": "uint256"
        }
      ],
      "name": "getMakerFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pair",
          "type": "uint256"
        }
      ],
      "name": "getTakerFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "isMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marginOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "addrIdx",
          "type": "uint256"
        }
      ],
      "name": "maskAddrPairIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairAddrIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pair",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "destToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "srcEToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "destEToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fulfiled",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "guaranteeAmountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "destFulfiled",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.TokenAmount",
          "name": "tokenAmt",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pair",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "pairIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "setMinOrderAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setPairMakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setPairTakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "addrIdx",
          "type": "uint256"
        }
      ],
      "name": "updateAddrIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairIdx",
          "type": "uint256"
        }
      ],
      "name": "updatePairIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "etoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2f76bdb3d9a972d813e62b69663f164d43395566f55ad4beca3d49c26451ad1c",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0x4639F9a380D37E491a84D751F086a70FBC6D395E",
    "transactionIndex": 2,
    "gasUsed": "4404556",
    "logsBloom": "0x
    "blockHash": "0x054869a37e11b5bb30e490b00b86272000c79c0d4b28169d303f7cae631a94be",
    "transactionHash": "0x2f76bdb3d9a972d813e62b69663f164d43395566f55ad4beca3d49c26451ad1c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 7107761,
        "transactionHash": "0x2f76bdb3d9a972d813e62b69663f164d43395566f55ad4beca3d49c26451ad1c",
        "address": "0x4639F9a380D37E491a84D751F086a70FBC6D395E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049d531908840fddac744543d57cb21b91c3d9094"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x054869a37e11b5bb30e490b00b86272000c79c0d4b28169d303f7cae631a94be"
      }
    ],
    "blockNumber": 7107761,
    "cumulativeGasUsed": "4484784",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF4CfC260cA8F68f3069FbEc534afbA21E0903b4b",
    "0x042f1249297EF180f33d166828AC43e401E0FecA",
    "0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836",
    "0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836"
  ],
  "solcInputHash": "55bd6161c70831b487cc8bae006c2302",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ctokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_margin\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"CreateOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtOut\",\"type\":\"uint256\"}],\"name\":\"FulFilOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"addrIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeMaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeTaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtToTaken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"partialFill\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fulfilOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmtToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtDest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtDestToken\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.FulFilAmt\",\"name\":\"fulFilAmt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amtToTakens\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"partialFill\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fulfilOrders\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAddrIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcEToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destEToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfiled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destFulfiled\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.TokenAmount\",\"name\":\"tokenAmt\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.OrderItem[]\",\"name\":\"allOrders\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"}],\"name\":\"getMakerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"}],\"name\":\"getTakerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"isMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marginOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addrIdx\",\"type\":\"uint256\"}],\"name\":\"maskAddrPairIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAddrIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcEToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destEToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfiled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destFulfiled\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.TokenAmount\",\"name\":\"tokenAmt\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pairIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setMinOrderAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPairMakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPairTakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addrIdx\",\"type\":\"uint256\"}],\"name\":\"updateAddrIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairIdx\",\"type\":\"uint256\"}],\"name\":\"updatePairIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"etoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fulfilOrder(uint256,uint256,address,bool,bool,bytes)\":{\"params\":{\"amtToTaken\":\"\\u6210\\u4ea4\\u591a\\u5c11\\u91cf\",\"data\":\"flashloan \\u5408\\u7ea6\\u6267\\u884c\\u4ee3\\u7801\",\"isToken\":\"\\u7528\\u6237\\u8f93\\u5165 token \\u4e14\\u5f97\\u5230 token, \\u8c03\\u7528\\u8005\\u987b approve \\u4e14\\u786e\\u4fdd srcEToken \\u7684 cash \\u8db3\\u591f\\u5151\\u4ed8\",\"orderId\":\"order id\",\"partialFill\":\"\\u662f\\u5426\\u5141\\u8bb8\\u90e8\\u5206\\u6210\\u4ea4(\\u6b63\\u597d\\u6b64\\u65f6\\u90e8\\u5206\\u88ab\\u5176\\u4ed6\\u4ebataken)\",\"to\":\"\\u5408\\u7ea6\\u5730\\u5740\\u6216\\u8005 msg.sender\"},\"returns\":{\"fulFilAmt\":\"(\\u4e70\\u5230\\u7684\\u5e01\\u6570\\u91cf, \\u4ed8\\u51fa\\u7684\\u5e01\\u6570\\u91cf)\"}},\"getMakerFeeRate(uint256)\":{\"details\":\"get maker fee rate\"},\"getTakerFeeRate(uint256)\":{\"details\":\"get taker fee rate\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFeeTo(address)\":{\"details\":\"\\u8bbe\\u7f6e feeTo \\u5730\\u5740\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/orderbook/Orderbook.sol\":\"OrderBook\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/orderbook/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct TokenAmount {\\r\\n        address srcToken;\\r\\n        address destToken;\\r\\n        address srcEToken;             // srcToken \\u5bf9\\u5e94\\u7684 eToken\\r\\n        address destEToken;            // destToken \\u5bf9\\u5e94\\u7684 eToken\\r\\n        uint amountIn;                 // \\u521d\\u59cb\\u6302\\u5355\\u6570\\u91cf\\r\\n        uint amountInMint;             // \\u5982\\u679c srcToken \\u4e0d\\u662f eToken, mint \\u6210\\u4e3a etoken \\u7684\\u6570\\u91cf\\r\\n        uint fulfiled;                 // \\u5df2\\u7ecf\\u6210\\u4ea4\\u90e8\\u5206, \\u5355\\u4f4d etoken\\r\\n        uint guaranteeAmountOut;       // \\u6700\\u4f4e\\u5151\\u6362\\u540e\\u8981\\u6c42\\u5f97\\u5230\\u7684\\u6570\\u91cf\\r\\n        uint destFulfiled;             // destEToken \\u5df2\\u7ecf\\u5f97\\u5230\\u7684 destEToken\\r\\n    }\\r\\n\\r\\n    struct OrderItem {\\r\\n      uint orderId;\\r\\n      uint pairAddrIdx;        // pairIdx | addrIdx\\r\\n      uint pair;               // hash(srcToken, destToken)\\r\\n      uint timestamp;          // \\u6302\\u5355\\u65f6\\u95f4 \\r\\n      uint flag;\\r\\n      address owner;           // \\u5982\\u679c\\u662f\\u6760\\u6746\\u7684\\u8ba2\\u5355, owner \\u4e3a\\u6760\\u6746\\u5408\\u7ea6\\u5730\\u5740, to\\u4e3a\\u7528\\u6237\\u771f\\u5b9e\\u5730\\u5740\\r\\n      address to;              // \\u5151\\u6362\\u5f97\\u5230\\u7684token\\u53d1\\u9001\\u5730\\u5740 \\r\\n      TokenAmount tokenAmt;\\r\\n    }\\r\\n\\r\\n    struct OBPairConfigMap {\\r\\n      // bit 0-127 min amount\\r\\n      // bit 128-191 maker fee rate\\r\\n      // bit 192-255 taker fee rate\\r\\n      uint256 data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ce7925dec8d618868e42cb33376fa90d7ed0fb97fac6fd1f500fb05a3bc8aaf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/ICETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface ICETH {\\r\\n\\r\\n    function mint() external payable returns (uint, uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint, uint, uint);\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function exchangeRateCurrent() external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n    function accrualBlockNumber() external view returns (uint);\\r\\n    // function getCash() virtual external view returns (uint);\\r\\n    // function accrueInterest() virtual public returns (uint);\\r\\n    // function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x0a39f338af43c9ce2fcbff4dfc99a365fc010abdaff4fedebdaadcfd7dff38d2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface ICToken {\\r\\n\\r\\n    function mint(uint mintAmount) external returns (uint, uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint, uint, uint);\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function exchangeRateCurrent() external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n    function accrualBlockNumber() external view returns (uint);\\r\\n    // function getCash() virtual external view returns (uint);\\r\\n    // function accrueInterest() virtual public returns (uint);\\r\\n    // function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe827f15d252062534ee5179db8cb59e102c92729c4088e5a304d15b6389c6b0f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/ICTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\ninterface ICTokenFactory {\\r\\n    // \\u6839\\u636e token \\u5730\\u5740\\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 ctoken \\u5730\\u5740, \\u5982\\u679c\\u4e0d\\u5b58\\u5728, \\u521b\\u5efa\\u5bf9\\u5e94\\u7684 etoekn\\r\\n    function getCTokenAddress(address token) external returns (address);\\r\\n\\r\\n    // \\u6839\\u636e token \\u5730\\u5740\\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 ctoken \\u5730\\u5740\\r\\n    function getCTokenAddressPure(address token) external view returns (address);\\r\\n\\r\\n    // \\u6839\\u636e ctoken \\u5730\\u5740\\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 token \\u5730\\u5740\\r\\n    function getTokenAddress(address cToken) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x85fbabe31bd8eb7e402b2378b0a809a600c939cc10ac2acf5fc7a854f7968e19\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/OBPairConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport { DataTypes } from \\\"./DataTypes.sol\\\";\\r\\n\\r\\nlibrary OBPairConfig {\\r\\n    uint constant internal MASK_FEE_MAKER  = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff; // prettier-ignore\\r\\n    uint constant internal MASK_FEE_TAKER  = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000; // prettier-ignore\\r\\n    // uint constant internal FEE_DENOMINATOR = 10000;\\r\\n\\r\\n    uint constant internal MAX_FEE_RATE = 1000; // 10%\\r\\n\\r\\n    uint constant internal SHIFT_FEE_TAKER = 128;\\r\\n\\r\\n    /**\\r\\n    * @dev Gets the maker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @return The maker fee + 1 if fee exist or else 0\\r\\n    **/\\r\\n    function feeMaker(DataTypes.OBPairConfigMap storage self) public view returns (uint256) {\\r\\n        return (self.data & MASK_FEE_MAKER);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Gets the taker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @return The taker fee + 1 if fee exist or else 0\\r\\n    **/\\r\\n    function feeTaker(DataTypes.OBPairConfigMap storage self) public view returns (uint256) {\\r\\n        return ((self.data & MASK_FEE_TAKER) >> SHIFT_FEE_TAKER);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @dev Sets the maker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @param fee taker fee to set\\r\\n    **/\\r\\n    function setFeeMaker(DataTypes.OBPairConfigMap storage self, uint fee) public {\\r\\n        require(fee < MAX_FEE_RATE, \\\"maker fee invalid\\\");\\r\\n        self.data = (self.data & ~MASK_FEE_MAKER) | (fee+1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Sets the maker fee of order book pair\\r\\n    * @param self The order book pair configuration\\r\\n    * @param fee maker fee to set\\r\\n    **/\\r\\n    function setFeeTaker(DataTypes.OBPairConfigMap storage self, uint fee) public {\\r\\n        require(fee < MAX_FEE_RATE, \\\"taker fee invalid\\\");\\r\\n        self.data = (self.data & ~MASK_FEE_TAKER) | ((fee+1) << SHIFT_FEE_TAKER);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x544cb3af78f5c88c1b23ad230292082e201d16bf1597727b9ea1551396f9b5df\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/OBPriceLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ICToken.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./DataTypes.sol\\\";\\r\\n\\r\\n// \\u6839\\u636ecompound \\u6700\\u65b0\\u7684 exchange rate \\u6362\\u7b97 \\u6302\\u5355\\u65f6\\u7684\\u4ef7\\u683c, \\u6839\\u636e taker \\u7684\\u5403\\u5355\\u91cf\\u6362\\u7b97\\u6302\\u5355\\u8005\\r\\n// 1. tokenIn \\u548c tokenOut\\u90fd\\u662f etoken: \\u4e0d\\u9700\\u8981\\u6362\\u7b97\\r\\n// 2. tokenIn tokenOut \\u90fd\\u662f token: \\r\\nlibrary OBPriceLogic {\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // struct OBPrice {\\r\\n    //     address src;\\r\\n    //     address srcEToken;\\r\\n    //     address dst;\\r\\n    //     address dstEToken;\\r\\n    //     uint256 amtIn;\\r\\n    //     uint256 eAmtIn;\\r\\n    //     uint256 amtOut;\\r\\n    //     uint256 eAmtOut;\\r\\n    //     // uint256 feeTaker;\\r\\n    //     // uint256 feeMaker;\\r\\n    // }\\r\\n\\r\\n    // uint256 constant public DENOMINATOR = 10000;\\r\\n\\r\\n    function getCurrentExchangeRate(ICToken ctoken) public view returns (uint256) {\\r\\n        uint rate = ctoken.exchangeRateStored();\\r\\n        uint supplyRate = ctoken.supplyRatePerBlock();\\r\\n        uint lastBlock = ctoken.accrualBlockNumber();\\r\\n        uint blocks = block.number.sub(lastBlock);\\r\\n        uint inc = rate.mul(supplyRate).mul(blocks);\\r\\n        return rate.add(inc);\\r\\n    }\\r\\n\\r\\n    function refreshTokenExchangeRate(ICToken ctoken) public returns (uint256) {\\r\\n        return ctoken.exchangeRateCurrent();\\r\\n    }\\r\\n\\r\\n    /// @dev \\u6839\\u636e\\u4ef7\\u683c\\u8ba1\\u7b97 amtToTaken \\u5bf9\\u5e94\\u7684 amtOut. \\u5982\\u679c\\u6302\\u5355\\u65f6 destToken \\u662f ctoken, \\u5219\\u76f4\\u63a5\\u8ba1\\u7b97\\u6bd4\\u4f8b; \\u5426\\u5219, \\u9700\\u8981\\u5c06\\u6302\\u5355\\u8bbe\\u7f6e\\u7684guaranteeAmountOut\\u8f6c\\u6362\\u4e3a etoken \\u6570\\u91cf, \\u518d\\u8ba1\\u7b97\\r\\n    /// @param data OBPrice to calcutation\\r\\n    /// @param amtToTaken amount to taken, in etoken\\r\\n    /// @return maker \\u5f97\\u5230\\u7684\\u5e01\\u6570\\u91cf; \\u5355\\u4f4d etoken \\r\\n    function convertBuyAmountByETokenIn(\\r\\n                    DataTypes.TokenAmount memory data,\\r\\n                    uint amtToTaken\\r\\n                )\\r\\n                public\\r\\n                view\\r\\n                returns (uint) {\\r\\n        // address src = data.srcToken;\\r\\n        // address srcEToken = data.srcEToken;\\r\\n        address dst = data.destToken;\\r\\n        address dstEToken = data.destEToken;\\r\\n        // // uint256 feeTaker = DENOMINATOR - data.feeTaker;\\r\\n        // // uint256 feeMaker = DENOMINATOR - data.feeMaker;\\r\\n\\r\\n        if (dst == dstEToken) {\\r\\n            // \\u6302\\u5355\\u5c31\\u662f\\u4ee5 etoken \\u6765\\u6302\\u7684\\r\\n            return amtToTaken.mul(data.guaranteeAmountOut).div(data.amountInMint);\\r\\n        }\\r\\n        uint destRate = getCurrentExchangeRate(ICToken(dstEToken));\\r\\n        uint destEAmt = data.guaranteeAmountOut.mul(1e18).div(destRate);\\r\\n        return amtToTaken.mul(destEAmt).div(data.amountInMint);\\r\\n\\r\\n        // // \\u7531\\u4e8e\\u76ee\\u524d create order\\u5df2\\u7ecf\\u9650\\u5236\\u4e86\\u5fc5\\u987b\\u540c\\u65f6\\u4e3a token \\u6216\\u8005 etoken\\r\\n        // require(src != srcEToken && dst != dstEToken, \\\"invalid orderbook tokens\\\");\\r\\n        \\r\\n        // // price = amtOut/amtIn = eAmtOut*rateOut/(eAmtIn*rateIn)\\r\\n        // // eprice = (price*rateIn)/rateOut = (amtOut*rateIn)/(amtIn*rateOut)\\r\\n        // uint256 rateIn = getCurrentExchangeRate(ICToken(srcEToken));\\r\\n        // uint256 rateOut = getCurrentExchangeRate(ICToken(dstEToken));\\r\\n\\r\\n        // // \\u5403\\u5355\\u8005\\u9700\\u8981\\u8f6c\\u5165\\u7684\\u5e01\\u7684\\u6570\\u91cf\\r\\n        // return amtToTaken.mul(rateIn).mul(data.guaranteeAmountOut).div(data.amountIn).div(rateOut);\\r\\n        // // return (amtToSendByEToken, amtToTaken);\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xecdc26fc00ad1d72807acc6a5436c2f3b33c6cd383fe7a4c59cb1d2004a2567e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/OBStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport { DataTypes } from \\\"./DataTypes.sol\\\";\\r\\nimport { OBPairConfig } from \\\"./OBPairConfig.sol\\\";\\r\\n\\r\\n// \\u5b58\\u50a8\\r\\ncontract OBStorage is Ownable {\\r\\n    using OBPairConfig for DataTypes.OBPairConfigMap;\\r\\n\\r\\n    uint private constant _PAIR_INDEX_MASK = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;   // 128 bit\\r\\n    uint private constant _ADDR_INDEX_MASK = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;   // 128 bit\\r\\n    uint private constant _MARGIN_MASK     = 0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n    uint private constant _EXPIRED_AT_MASK = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;   // 128 bit\\r\\n    uint private constant _ADDR_INDEX_OFFSET = 128;\\r\\n    // uint private constant _EXPIRED_AT_OFFSET = 128;\\r\\n\\r\\n    uint256 public constant DENOMINATOR = 10000;\\r\\n\\r\\n    // // \\u8ba1\\u7b97\\u4ef7\\u683c\\u7684\\u4e58\\u6570 price = token0 * priceRatio / token1, such as 1e30\\r\\n    // uint public priceRatio = 1e30; \\r\\n\\r\\n    uint public orderId;   // order Id \\u81ea\\u589e\\r\\n\\r\\n    // \\u5173\\u95ed\\u8ba2\\u5355\\u8584\\u529f\\u80fd\\r\\n    bool    public closed; // prettier-ignore\\r\\n    // address public router;\\r\\n    address public wETH;\\r\\n    address public cETH;  // compound ETH token\\r\\n    address public ctokenFactory;\\r\\n    address public marginAddr;  // \\u4ee3\\u6301\\u5408\\u7ea6\\r\\n    address public feeTo;       // \\u624b\\u7eed\\u8d39\\u5730\\u5740\\r\\n\\r\\n    // maker \\u624b\\u7eed\\u8d39 && taker \\u624b\\u7eed\\u8d39\\r\\n    uint public defaultFeeMaker = 30;\\r\\n    uint public defaultFeeTaker = 30;\\r\\n    mapping(uint256 => DataTypes.OBPairConfigMap) public pairFeeRate;\\r\\n    // \\u6700\\u4f4e\\u6302\\u5355\\u91cf\\r\\n    mapping(address => uint256) public minAmounts;\\r\\n    mapping(address => mapping(address => uint)) public balanceOf;   // \\u4ee3\\u6301\\u7528\\u6237\\u7684\\u5e01\\r\\n\\r\\n    // orders\\r\\n    mapping (uint => DataTypes.OrderItem) public orders;\\r\\n    mapping (address => uint[]) public marginOrders;   // \\u6760\\u6746\\u5408\\u7ea6\\u4ee3\\u6301\\u7684\\u6302\\u5355\\r\\n    mapping (address => uint[]) public addressOrders;\\r\\n    mapping (uint => uint[]) public pairOrders;\\r\\n\\r\\n    function pairIndex(uint id) public pure returns(uint) {\\r\\n        return (id & _PAIR_INDEX_MASK);\\r\\n    }\\r\\n\\r\\n    function addrIndex(uint id) public pure returns(uint) {\\r\\n        return (id & _ADDR_INDEX_MASK) >> _ADDR_INDEX_OFFSET;\\r\\n    }\\r\\n\\r\\n    // pairIdx \\u4e0d\\u53d8, addrIdx \\u66f4\\u65b0\\r\\n    function updateAddrIdx(uint idx, uint addrIdx) public pure returns(uint) {\\r\\n      return pairIndex(idx) | addrIndex(addrIdx);\\r\\n    }\\r\\n\\r\\n    // pairIdx \\u4e0d\\u53d8, addrIdx \\u66f4\\u65b0\\r\\n    function updatePairIdx(uint idx, uint pairIdx) public pure returns(uint) {\\r\\n      return (idx & _ADDR_INDEX_MASK) | pairIdx;\\r\\n    }\\r\\n\\r\\n    function maskAddrPairIndex(uint pairIdx, uint addrIdx) public pure returns (uint) {\\r\\n        return (pairIdx) | (addrIdx << _ADDR_INDEX_OFFSET);\\r\\n    }\\r\\n\\r\\n    function isMargin(uint flag) public pure returns (bool) {\\r\\n      return (flag & _MARGIN_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    // function getExpiredAt(uint ts) public pure returns (uint) {\\r\\n    //   return (ts & _EXPIRED_AT_MASK) >> _EXPIRED_AT_OFFSET;\\r\\n    // }\\r\\n\\r\\n    // function maskTimestamp(uint ts, uint expired) public pure returns (uint) {\\r\\n    //   return (ts) | (expired << _EXPIRED_AT_OFFSET);\\r\\n    // }\\r\\n    \\r\\n    // function setSwapMining(address _swapMininng) public onlyOwner {\\r\\n    //     swapMining = _swapMininng;\\r\\n    // }\\r\\n}\\r\\n\",\"keccak256\":\"0xd5c368f51576aabe21b4d70c4dc979b8c41916e25a13d3529989a03455b3773b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/Orderbook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./OBStorage.sol\\\";\\r\\nimport \\\"./ICTokenFactory.sol\\\";\\r\\nimport \\\"./ICToken.sol\\\";\\r\\nimport \\\"./ICETH.sol\\\";\\r\\nimport \\\"./OBPriceLogic.sol\\\";\\r\\nimport \\\"./OBPairConfig.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IWHT {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\\r\\ninterface IHswapV2Callee {\\r\\n    function hswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface IMarginHolding {\\r\\n  // owner: \\u6760\\u6746\\u7528\\u6237\\r\\n  // fulfiled: \\u4e70\\u5230\\u7684token\\u6570\\u91cf(tokenIn)\\r\\n  // amt: \\u5356\\u51fa\\u7684token\\u6570\\u91cf(tokenOut)\\r\\n  function onFulfiled(address owner, address tokenOut, address tokenIn, uint fulfiled, uint amt) external;\\r\\n  // tokenOut: \\u5f85\\u5356\\u51fa\\u7684\\u5e01 srcToken\\r\\n  // tokenIn: \\u5f85\\u4e70\\u5165\\u7684\\u5e01 destToken\\r\\n  // tokenReturn: tokenOut\\r\\n  // amt: \\u8fd4\\u8fd8\\u7684tokenOut\\u6570\\u91cf\\r\\n  function onCanceled(address owner, address token0, address token1, address tokenReturn, uint amt) external;\\r\\n}\\r\\n\\r\\n\\r\\n// interface ICTokenFactory {\\r\\n//     function getCTokenAddressPure(address cToken) external view returns (address);\\r\\n//     function getTokenAddress(address cToken) external view returns (address);\\r\\n// }\\r\\n\\r\\ninterface IOrderBook {\\r\\n    event CreateOrder(address indexed owner,\\r\\n          address indexed srcToken,\\r\\n          address indexed destToken,\\r\\n          uint orderId,\\r\\n          uint amountIn,\\r\\n          uint minAmountOut,\\r\\n          uint flag);\\r\\n\\r\\n    event FulFilOrder(address indexed maker,\\r\\n          address indexed taker,\\r\\n          uint orderId,\\r\\n          uint amt,\\r\\n          uint amtOut);\\r\\n          // uint remaining);\\r\\n\\r\\n    event CancelOrder(address indexed owner,\\r\\n          address indexed srcToken,\\r\\n          address indexed destToken,\\r\\n          uint orderId);\\r\\n}\\r\\n\\r\\ncontract OrderBook is IOrderBook, OBStorage, ReentrancyGuard {\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint256;\\r\\n    using OBPairConfig for DataTypes.OBPairConfigMap;\\r\\n\\r\\n    uint private constant _ORDER_CLOSED  = 0x00000000000000000000000000000001;   // 128 bit\\r\\n    uint private constant _HALF_MAX_UINT = uint(-1) >> 1;                            // 0x8fffffffffff...\\r\\n\\r\\n    // _ctokenFactory: ctoken \\u5de5\\u5382\\r\\n    // _wETH: eth/bnb/ht\\r\\n    // _margin: \\u4ee3\\u6301\\u5408\\u7ea6\\u5730\\u5740\\r\\n    // \\u8fd9\\u4e2a\\u5730\\u5740\\u5fc5\\u987b\\u662f payable !!!\\r\\n    constructor(address _ctokenFactory, address _cETH, address _wETH, address _margin) public payable {\\r\\n      cETH = _cETH;\\r\\n      wETH = _wETH;\\r\\n      marginAddr    = _margin;\\r\\n      ctokenFactory = _ctokenFactory;\\r\\n      feeTo = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier whenOpen() {\\r\\n        require(closed == false, \\\"order book closed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        //  cETH \\u4e2d\\u8d4e\\u56de\\r\\n        // assert(msg.sender == cWHT);\\r\\n        // only accept HT via fallback from the WHT contract\\r\\n    }\\r\\n\\r\\n    function closeOrderBook() external onlyOwner {\\r\\n      closed = true;\\r\\n    }\\r\\n\\r\\n    function openOrderBook() external onlyOwner {\\r\\n      closed = false;\\r\\n    }\\r\\n\\r\\n    function setMinOrderAmount(address token, uint amt) external onlyOwner {\\r\\n      minAmounts[token] = amt;\\r\\n    }\\r\\n\\r\\n    function _putOrder(DataTypes.OrderItem storage order) internal {\\r\\n      uint orderId = order.orderId;\\r\\n      uint flag = order.flag;\\r\\n      bool margin = isMargin(flag);\\r\\n      uint addrIdx;\\r\\n      uint pairIdx;\\r\\n      address owner = order.owner;\\r\\n\\r\\n      if (margin) {\\r\\n          // margin \\u8ba2\\u5355\\u53d6 to \\u5730\\u5740\\r\\n          owner = order.to;\\r\\n          addrIdx = marginOrders[owner].length;\\r\\n          marginOrders[owner].push(orderId);\\r\\n      } else {\\r\\n          addrIdx = addressOrders[owner].length;\\r\\n          addressOrders[owner].push(orderId);\\r\\n      }\\r\\n\\r\\n      pairIdx = pairOrders[order.pair].length;\\r\\n      pairOrders[order.pair].push(orderId);\\r\\n\\r\\n      order.pairAddrIdx = maskAddrPairIndex(pairIdx, addrIdx);\\r\\n\\r\\n      emit CreateOrder(owner,\\r\\n          order.tokenAmt.srcToken,\\r\\n          order.tokenAmt.destToken,\\r\\n          orderId,\\r\\n          order.tokenAmt.amountIn,\\r\\n          order.tokenAmt.guaranteeAmountOut,\\r\\n          flag);\\r\\n    }\\r\\n\\r\\n    function _removeOrder(DataTypes.OrderItem memory order) private {\\r\\n        // uint orderId = order.orderId;\\r\\n        uint pairIdx = pairIndex(order.pairAddrIdx);\\r\\n        uint addrIdx = addrIndex(order.pairAddrIdx);\\r\\n        address owner = order.owner;\\r\\n        uint rIdx;\\r\\n        bool margin = isMargin(order.flag);\\r\\n\\r\\n        if (margin) {\\r\\n            owner = order.to;\\r\\n            uint lastIdx = marginOrders[owner].length-1;\\r\\n            if (addrIdx != lastIdx) {\\r\\n              rIdx = marginOrders[owner][lastIdx];\\r\\n              marginOrders[owner][addrIdx] = rIdx;\\r\\n              orders[rIdx].pairAddrIdx = updateAddrIdx(orders[rIdx].pairAddrIdx, addrIdx);\\r\\n            }\\r\\n            marginOrders[owner].pop();\\r\\n        } else {\\r\\n            uint lastIdx = addressOrders[owner].length-1;\\r\\n            if (addrIdx != lastIdx) {\\r\\n              rIdx = addressOrders[owner][lastIdx];\\r\\n              addressOrders[owner][addrIdx] = rIdx;\\r\\n              orders[rIdx].pairAddrIdx = updateAddrIdx(orders[rIdx].pairAddrIdx, addrIdx);\\r\\n            }\\r\\n            addressOrders[owner].pop();\\r\\n        }\\r\\n\\r\\n        if ((pairOrders[order.pair].length > 1) && (pairIdx != pairOrders[order.pair].length-1)) {\\r\\n          rIdx = pairOrders[order.pair][pairOrders[order.pair].length - 1];\\r\\n          pairOrders[order.pair][pairIdx] = rIdx;\\r\\n          orders[rIdx].pairAddrIdx = updatePairIdx(orders[rIdx].pairAddrIdx, pairIdx);\\r\\n        }\\r\\n        pairOrders[order.pair].pop();\\r\\n    }\\r\\n\\r\\n    // \\u5982\\u679c\\u627e\\u5230 addr \\u5bf9\\u5e94\\u7684 etoken \\u5730\\u5740, \\u8fd4\\u56de etoken \\u5730\\u5740; \\u5426\\u5219, addr \\u672c\\u8eab\\u5c31\\u662f etoken, \\u8fd4\\u56de addr\\r\\n    function _getOrCreateETokenAddress(address addr) internal returns (address) {\\r\\n      if (addr == address(0) || addr == wETH) {\\r\\n        return cETH;\\r\\n      }\\r\\n      address etoken = ICTokenFactory(ctokenFactory).getCTokenAddressPure(addr);\\r\\n      if (etoken == address(0)) {\\r\\n        // \\u8fd9\\u91cc\\u8981\\u5224\\u65ad addr \\u662f\\u5426\\u5728 etoken mapping \\u4e2d.\\r\\n        // \\u5982\\u679c\\u5728, \\u624d\\u80fd\\u8bf4\\u660e addr \\u662f etoken;\\r\\n        // \\u5982\\u679c\\u4e0d\\u5728, \\u8bf4\\u660e\\u8be5 token \\u8fd8\\u6ca1\\u6709\\u5bf9\\u5e94\\u7684 etoken, \\u9700\\u8981\\u521b\\u5efa\\u5bf9\\u5e94\\u7684 etoken\\r\\n        address token = ICTokenFactory(ctokenFactory).getTokenAddress(addr);\\r\\n        if (token != address(0)) {\\r\\n          return addr;\\r\\n        }\\r\\n        // addr \\u662f token, \\u5f53\\u4e0d\\u5b58\\u5728\\u5bf9\\u5e94\\u7684 etoken, \\u521b\\u5efa\\u5bf9\\u5e94\\u7684 etoken\\r\\n        return ICTokenFactory(ctokenFactory).getCTokenAddress(addr);\\r\\n      }\\r\\n      return etoken;\\r\\n    }\\r\\n\\r\\n    function _getETokenAddress(address addr) internal view returns (address) {\\r\\n      if (addr == address(0) || addr == wETH) {\\r\\n        return cETH;\\r\\n      }\\r\\n      address etoken = ICTokenFactory(ctokenFactory).getCTokenAddressPure(addr);\\r\\n      if (etoken == address(0)) {\\r\\n        return addr;\\r\\n      }\\r\\n      return etoken;\\r\\n    }\\r\\n\\r\\n    // \\u521b\\u5efa\\u8ba2\\u5355\\r\\n    // \\u8c03\\u7528\\u524d\\u9700\\u8981 approve\\r\\n    function createOrder(\\r\\n              address srcToken,\\r\\n              address destToken,\\r\\n              address to,             // \\u5151\\u6362\\u5f97\\u5230\\u7684 token \\u53d1\\u9001\\u5730\\u5740, \\u6760\\u6746\\u4f20\\u7528\\u6237\\u5730\\u5740\\r\\n              uint amountIn,\\r\\n              uint guaranteeAmountOut,       // \\r\\n              uint flag\\r\\n          )\\r\\n          public\\r\\n          payable\\r\\n          whenOpen\\r\\n          nonReentrant\\r\\n          returns (uint idx) {\\r\\n      require(srcToken != destToken, \\\"identical token\\\");\\r\\n\\r\\n      if (srcToken == address(0)) {\\r\\n        // \\u8f6c\\u5165 wETH\\r\\n        require(msg.value >= amountIn, \\\"not enough amountIn\\\");\\r\\n        // IWHT(wETH).deposit{value: msg.value}();\\r\\n        // srcToken = wETH;\\r\\n      } else {\\r\\n        // should approve outside\\r\\n        TransferHelper.safeTransferFrom(srcToken, msg.sender, address(this), amountIn);\\r\\n      }\\r\\n\\r\\n      {\\r\\n        // \\u6700\\u4f4e\\u6302\\u5355\\u91cf\\u9650\\u5236\\r\\n        require(amountIn > minAmounts[srcToken], \\\"less than min amount\\\");\\r\\n      }\\r\\n      idx = orderId ++;\\r\\n      DataTypes.OrderItem storage order = orders[idx];\\r\\n      order.orderId = idx;\\r\\n      order.owner = msg.sender;\\r\\n      order.to = to == address(0) ? msg.sender : to;\\r\\n      // solhint-disable-next-line\\r\\n      order.timestamp = block.timestamp; // maskTimestamp(block.timestamp, expiredAt);\\r\\n      order.flag = flag;\\r\\n      order.tokenAmt.fulfiled = 0;\\r\\n      address etoken = _getOrCreateETokenAddress(srcToken);\\r\\n      {\\r\\n        order.tokenAmt.srcToken = srcToken;\\r\\n        order.tokenAmt.srcEToken = etoken;\\r\\n        order.tokenAmt.amountIn = amountIn;\\r\\n        if (srcToken != etoken) {\\r\\n          // order.isEToken = true;\\r\\n          // mint to etoken\\r\\n          if (srcToken == address(0)) {\\r\\n            // uint balanceBefore = IERC20(cETH).balanceOf(address(this));\\r\\n            (uint err, uint amt) = ICETH(cETH).mint{value: msg.value}();\\r\\n            require(err == 0, \\\"mint failed\\\");\\r\\n            order.tokenAmt.amountInMint = amt; // IERC20(cETH).balanceOf(address(this)).sub(balanceBefore);\\r\\n          } else {\\r\\n            // uint balanceBefore = IERC20(etoken).balanceOf(address(this));\\r\\n            IERC20(srcToken).approve(etoken, amountIn);\\r\\n            (uint err, uint amt) = ICToken(etoken).mint(amountIn);\\r\\n            ICToken(etoken).approve(etoken, 0);\\r\\n            require(err == 0, \\\"mint failed\\\");\\r\\n            order.tokenAmt.amountInMint = amt; // IERC20(etoken).balanceOf(address(this)).sub(balanceBefore);\\r\\n          }\\r\\n        } else {\\r\\n          order.tokenAmt.amountInMint = amountIn;\\r\\n        }\\r\\n      }\\r\\n      order.tokenAmt.destToken = destToken;\\r\\n      address destEToken = _getOrCreateETokenAddress(destToken);\\r\\n      order.tokenAmt.destEToken = destEToken;\\r\\n      order.tokenAmt.guaranteeAmountOut = guaranteeAmountOut;\\r\\n\\r\\n      // src dest \\u5fc5\\u987b\\u540c\\u65f6\\u4e3a token \\u6216\\u8005 etoken\\r\\n      require((srcToken == etoken) == (destToken == destEToken), \\\"both token or etoken\\\");\\r\\n\\r\\n      if (msg.sender == marginAddr) {\\r\\n        require(isMargin(flag), \\\"flag should be margin\\\");\\r\\n        // \\u4ee3\\u6301\\u5408\\u7ea6\\u53ea\\u80fd\\u6302 etoken\\r\\n        require(etoken == srcToken, \\\"src should be etoken\\\");\\r\\n        require(to != msg.sender, \\\"to should be user's address\\\");\\r\\n        require(order.tokenAmt.destEToken == destToken, \\\"dest should be etoken\\\");\\r\\n      }\\r\\n\\r\\n      order.pair = _pairFor(etoken, destEToken);\\r\\n\\r\\n      // \\u6388\\u6743 \\u7701\\u53bb\\u540e\\u7eed cancel withdraw \\u6388\\u6743\\u7684\\u9ebb\\u70e6\\r\\n      if (IERC20(destEToken).allowance(address(this), destEToken) < _HALF_MAX_UINT) {\\r\\n          IERC20(destEToken).approve(destEToken, uint(-1));\\r\\n      }\\r\\n      if (IERC20(etoken).allowance(address(this), etoken) < _HALF_MAX_UINT) {\\r\\n          IERC20(etoken).approve(destEToken, uint(-1));\\r\\n      }\\r\\n\\r\\n      _putOrder(order);\\r\\n    }\\r\\n\\r\\n    function pairFor(address srcToken, address destToken) public view returns(uint pair) {\\r\\n      return _pairFor(_getETokenAddress(srcToken), _getETokenAddress(destToken));\\r\\n    }\\r\\n\\r\\n    // \\u8c03\\u7528\\u524d\\u9700\\u8981\\u786e\\u4fdd srcToken destToken \\u90fd\\u662f etoken\\r\\n    // \\u4ea4\\u6613\\u5bf9hash \\u533a\\u5206\\u65b9\\u5411 eth->usdt \\u4e0e usdt->eth \\u662f\\u4e0d\\u540c\\u7684\\u4ea4\\u6613\\u5bf9\\r\\n    function _pairFor(address srcToken, address destToken) private pure returns(uint pair) {\\r\\n      // if (srcToken == address(0)) {\\r\\n      //     srcToken = wETH;\\r\\n      // }\\r\\n      // if (destToken == address(0)) {\\r\\n      //     destToken = wETH;\\r\\n      // }\\r\\n      // (address token0, address token1) = srcToken < destToken ? (srcToken, destToken) : (destToken, srcToken);\\r\\n      pair = uint(keccak256(abi.encodePacked(srcToken, destToken)));\\r\\n    }\\r\\n\\r\\n    // \\u83b7\\u53d6\\u6240\\u6709\\u8ba2\\u5355\\u5217\\u8868\\r\\n    function getAllOrders() external view returns(DataTypes.OrderItem[] memory allOrders) {\\r\\n      uint total = 0;\\r\\n      uint id = 0;\\r\\n      for (uint i = 0; i < orderId; i ++) {\\r\\n        uint flag = orders[i].flag;\\r\\n        if (_orderClosed(flag) == false) {\\r\\n          total ++;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      allOrders = new DataTypes.OrderItem[](total);\\r\\n      for (uint i = 0; i < orderId; i ++) {\\r\\n        DataTypes.OrderItem memory order = orders[i];\\r\\n        if (_orderClosed(order.flag) == false) {\\r\\n          allOrders[id] = order;\\r\\n          id ++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function _orderClosed(uint flag) private pure returns (bool) {\\r\\n      return (flag & _ORDER_CLOSED) != 0;\\r\\n    }\\r\\n    \\r\\n    /// @dev \\u8d4e\\u56de etoken\\r\\n    function _redeemTransfer(\\r\\n                    address token,\\r\\n                    address etoken,\\r\\n                    address to,\\r\\n                    uint256 redeemAmt\\r\\n                ) private {\\r\\n        console.log(\\\"redeemAmt:\\\", redeemAmt);\\r\\n        (uint ret, , uint amt) = ICToken(etoken).redeem(redeemAmt);\\r\\n        require(ret == 0, \\\"redeem failed\\\");\\r\\n\\r\\n        if (token == address(0)) {\\r\\n            TransferHelper.safeTransferETH(to, amt); // address(this).balance);\\r\\n        } else {\\r\\n            console.log(\\\"redeem token amt:\\\", redeemAmt, amt, IERC20(token).balanceOf(address(this)));\\r\\n            TransferHelper.safeTransfer(token, to, amt); // IERC20(token).balanceOf(address(this)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // \\u8c03\\u7528\\u8005\\u5224\\u65ad\\u662f\\u5426\\u6709\\u8db3\\u591f\\u7684 token \\u53ef\\u4ee5\\u8d4e\\u56de\\r\\n    function cancelOrder(uint orderId) public nonReentrant {\\r\\n      DataTypes.OrderItem storage order = orders[orderId];\\r\\n      bool margin = isMargin(order.flag);\\r\\n\\r\\n      if (margin) {\\r\\n        require(msg.sender == owner() || msg.sender == marginAddr, \\\"cancelMarginOrder: no auth\\\");\\r\\n      } else {\\r\\n        require(msg.sender == owner() || msg.sender == order.owner, \\\"cancelOrder: no auth\\\");\\r\\n      }\\r\\n      require(_orderClosed(order.flag) == false, \\\"order has been closed\\\");\\r\\n\\r\\n      // \\u9000\\u56de\\u672a\\u6210\\u4ea4\\u90e8\\u5206\\r\\n      address srcToken = order.tokenAmt.srcToken;\\r\\n      address srcEToken = order.tokenAmt.srcEToken;\\r\\n      uint amt = order.tokenAmt.amountInMint.sub(order.tokenAmt.fulfiled);\\r\\n      console.log(\\\"cancel order: srcEToken amt=%d\\\", amt);\\r\\n\\r\\n      if (srcToken != srcEToken) {\\r\\n        // redeem etoken\\r\\n        // \\u5982\\u679c\\u6709\\u8db3\\u591f\\u591a\\u7684 etoken \\u53ef\\u4ee5\\u8d4e\\u56de, \\u5219\\u5168\\u90e8\\u8d4e\\u56de; \\u5426\\u5219\\u5c3d\\u53ef\\u80fd\\u591a\\u7684\\u8d4e\\u56de\\r\\n        // uint cash = ICToken(srcEToken).getCash();\\r\\n        // uint redeemAmt = amt;\\r\\n\\r\\n        if (amt > 0) {\\r\\n          _redeemTransfer(srcToken, srcEToken, order.owner, amt);\\r\\n          console.log(\\\"redeem transfer ok\\\");\\r\\n          /*\\r\\n          // redeem token\\r\\n          uint balanceBefore;\\r\\n          if (srcEToken == cETH) {\\r\\n            // console.log(\\\"redeem cETH:\\\", cETH, order.owner);\\r\\n            // console.log(\\\"casH: %d redeemAmt: %d\\\", ICToken(cETH).getCash(), redeemAmt);\\r\\n            balanceBefore = address(this).balance;\\r\\n            uint ret = ICToken(cETH).redeem(redeemAmt);\\r\\n            require(ret == 0, \\\"redeem eth failed\\\");\\r\\n            // console.log(\\\"redeem ceth:\\\", ret, redeemAmt);\\r\\n            uint amtToSend = address(this).balance.sub(balanceBefore);\\r\\n            TransferHelper.safeTransferETH(order.owner, amtToSend);\\r\\n          } else {\\r\\n            // console.log(\\\"redeem token:\\\", srcEToken, redeemAmt);\\r\\n            balanceBefore = IERC20(srcToken).balanceOf(address(this));\\r\\n            uint ret = ICToken(srcEToken).redeem(redeemAmt);\\r\\n            require(ret == 0, \\\"redeem failed\\\");\\r\\n            uint amtToSend = IERC20(srcToken).balanceOf(address(this)).sub(balanceBefore);\\r\\n            TransferHelper.safeTransfer(srcToken, order.owner, amtToSend);\\r\\n            // console.log(\\\"redeem token success\\\", srcEToken, redeemAmt);\\r\\n          }\\r\\n          */\\r\\n        }\\r\\n        // if (remainingEToken > 0) {\\r\\n        //   TransferHelper.safeTransfer(srcEToken, order.owner, remainingEToken);\\r\\n        // }\\r\\n      } else {\\r\\n        TransferHelper.safeTransfer(srcToken, order.owner, amt);\\r\\n      }\\r\\n\\r\\n      // \\u6760\\u6746\\u7528\\u6237\\u6210\\u4ea4\\u7684\\u5e01\\u5df2\\u7ecf\\u8f6c\\u7ed9\\u4ee3\\u6301\\u5408\\u7ea6, \\u8fd9\\u91cc\\u53ea\\u5904\\u7406\\u975e\\u6760\\u6746\\u7528\\u6237\\u7684\\u5e01\\uff0c\\u8fd8\\u7ed9\\u7528\\u6237\\r\\n      if (!margin) {\\r\\n        address dest = order.tokenAmt.destEToken;\\r\\n        address destToken = order.tokenAmt.destToken;\\r\\n        uint balance = balanceOf[dest][order.to];\\r\\n        if (balance > 0) {\\r\\n          // console.log(\\\"withdraw fulfiled to maker:\\\", order.to, balance);\\r\\n          if (dest == destToken) {\\r\\n              _withdraw(order.to, dest, balance, balance);\\r\\n          } else {\\r\\n              _withdrawUnderlying(order.to, destToken, dest, balance, balance);\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        // \\u901a\\u77e5\\u6760\\u6746\\u5408\\u7ea6\\u5904\\u7406 \\u6302\\u5355 srcToken\\r\\n        IMarginHolding(marginAddr).onCanceled(order.to, srcEToken, order.tokenAmt.destToken, order.tokenAmt.srcToken, amt);\\r\\n      }\\r\\n\\r\\n      order.flag |= _ORDER_CLOSED;\\r\\n      _removeOrder(order);\\r\\n\\r\\n      emit CancelOrder(\\r\\n                  order.owner,\\r\\n                  order.tokenAmt.srcToken,\\r\\n                  order.tokenAmt.destToken,\\r\\n                  orderId\\r\\n              );\\r\\n    }\\r\\n\\r\\n    /// @dev get maker fee rate\\r\\n    function getMakerFeeRate(uint256 pair) public view returns (uint) {\\r\\n      uint fee = pairFeeRate[pair].feeMaker();\\r\\n      if (fee == 0) {\\r\\n        return defaultFeeMaker;\\r\\n      }\\r\\n      return fee - 1;\\r\\n    }\\r\\n\\r\\n    /// @dev get taker fee rate\\r\\n    function getTakerFeeRate(uint256 pair) public view returns (uint) {\\r\\n      uint fee = pairFeeRate[pair].feeTaker();\\r\\n      if (fee == 0) {\\r\\n        return defaultFeeTaker;\\r\\n      }\\r\\n\\r\\n      return fee - 1;\\r\\n    }\\r\\n\\r\\n    struct FulFilAmt {\\r\\n      bool isToken;      // \\u662f\\u5426\\u662f token\\r\\n      uint256 filled;    // \\u6210\\u4ea4\\u7684 srcEToken\\r\\n      uint256 takerFee;  // taker \\u624b\\u7eed\\u8d39\\r\\n      uint256 makerFee;  // maker \\u624b\\u7eed\\u8d39\\r\\n      uint256 takerAmt;  // taker \\u5f97\\u5230\\u7684 srcEToken = amtDest - fee\\r\\n      uint256 takerAmtToken; // taker \\u5f97\\u5230\\u7684 srcToken = amtDestToken - fee\\r\\n      uint256 makerAmt;      // maker \\u5f97\\u5230\\u7684 destEToken\\r\\n      uint256 amtDest;       // taker \\u4ed8\\u51fa srcEToken\\r\\n      uint256 amtDestToken;  // taker \\u4ed8\\u51fa\\u7684 srcToken\\r\\n    }\\r\\n\\r\\n    function fulfilOrders(\\r\\n                uint[] memory orderIds,\\r\\n                uint[] memory amtToTakens,\\r\\n                address to,\\r\\n                bool isToken,\\r\\n                bool partialFill,\\r\\n                bytes calldata data\\r\\n              )\\r\\n              external\\r\\n              payable\\r\\n              whenOpen {\\r\\n        require(orderIds.length == amtToTakens.length, \\\"invalid param\\\");\\r\\n\\r\\n        for (uint i = 0; i < orderIds.length; i ++) {\\r\\n          fulfilOrder(orderIds[i], amtToTakens[i], to, isToken, partialFill, data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev fulfilOrder orderbook order, etoken in and etoken out\\r\\n    // order \\u6210\\u4ea4, \\u6536\\u53d6\\u6210\\u4ea4\\u540e\\u7684\\u5e01\\u7684\\u624b\\u7eed\\u8d39, \\u666e\\u901a\\u8ba2\\u5355, maker \\u6210\\u4ea4\\u7684\\u5e01\\u7531\\u5408\\u7ea6\\u4ee3\\u6301; taker \\u7684\\u5e01\\u53d1\\u7ed9\\u7528\\u6237, amtToTaken \\u662f src EToken \\u7684\\u6570\\u91cf\\r\\n    /// @param orderId order id\\r\\n    /// @param amtToTaken \\u6210\\u4ea4\\u591a\\u5c11\\u91cf\\r\\n    /// @param to \\u5408\\u7ea6\\u5730\\u5740\\u6216\\u8005 msg.sender\\r\\n    /// @param isToken \\u7528\\u6237\\u8f93\\u5165 token \\u4e14\\u5f97\\u5230 token, \\u8c03\\u7528\\u8005\\u987b approve \\u4e14\\u786e\\u4fdd srcEToken \\u7684 cash \\u8db3\\u591f\\u5151\\u4ed8\\r\\n    /// @param partialFill \\u662f\\u5426\\u5141\\u8bb8\\u90e8\\u5206\\u6210\\u4ea4(\\u6b63\\u597d\\u6b64\\u65f6\\u90e8\\u5206\\u88ab\\u5176\\u4ed6\\u4ebataken)\\r\\n    /// @param data flashloan \\u5408\\u7ea6\\u6267\\u884c\\u4ee3\\u7801\\r\\n    /// @return fulFilAmt (\\u4e70\\u5230\\u7684\\u5e01\\u6570\\u91cf, \\u4ed8\\u51fa\\u7684\\u5e01\\u6570\\u91cf)\\r\\n    function fulfilOrder(\\r\\n                uint orderId,\\r\\n                uint amtToTaken,\\r\\n                address to,\\r\\n                bool isToken,\\r\\n                bool partialFill,\\r\\n                bytes calldata data\\r\\n              )\\r\\n              public\\r\\n              payable\\r\\n              whenOpen\\r\\n              nonReentrant\\r\\n              returns (FulFilAmt memory fulFilAmt) {\\r\\n      DataTypes.OrderItem storage order = orders[orderId];\\r\\n      \\r\\n      if ((order.flag & _ORDER_CLOSED) > 0) {\\r\\n          return fulFilAmt;\\r\\n      }\\r\\n\\r\\n      DataTypes.TokenAmount memory tokenAmt = order.tokenAmt;\\r\\n      if (to == address(0)) {\\r\\n        to = msg.sender;\\r\\n      }\\r\\n\\r\\n      fulFilAmt.isToken = isToken;\\r\\n      fulFilAmt.filled  = amtToTaken;  // \\u6302\\u5355\\u88ab\\u5403\\u7684\\u6570\\u91cf\\r\\n      {\\r\\n        uint left = tokenAmt.amountInMint.sub(tokenAmt.fulfiled);\\r\\n        if (amtToTaken > left) {\\r\\n          require(partialFill, \\\"not enough to fulfil\\\");\\r\\n          \\r\\n          fulFilAmt.filled = left;\\r\\n        }\\r\\n      }\\r\\n      _getFulfiledAmt(tokenAmt, fulFilAmt, order.pair);\\r\\n\\r\\n      // console.log(\\\"takerAmt=%d makerAmt=%d filled=%d\\\", fulFilAmt.takerAmt, fulFilAmt.makerAmt, fulFilAmt.filled);\\r\\n      \\r\\n      // \\u9a8c\\u8bc1\\u8f6c\\u5165 taker \\u7684\\u5e01\\r\\n      address destEToken = tokenAmt.destEToken;\\r\\n      address srcEToken = tokenAmt.srcEToken;\\r\\n\\r\\n      // \\u5148\\u8f6c\\u5e01\\u7ed9 taker\\r\\n      if (isToken) {\\r\\n            // redeem srcEToken\\r\\n          // IERC20(srcEToken).approve(srcEToken, fulFilAmt.takerAmt);\\r\\n          // uint ret = ICToken(srcEToken).redeem(fulFilAmt.takerAmt);\\r\\n          // require(ret == 0, \\\"redeem failed\\\");\\r\\n          // TransferHelper.safeTransfer(tokenAmt.srcToken, to, fulFilAmt.takerAmtToken);\\r\\n          _redeemTransfer(tokenAmt.srcToken, srcEToken, to, fulFilAmt.takerAmt);\\r\\n      } else {\\r\\n          TransferHelper.safeTransfer(srcEToken, to, fulFilAmt.takerAmt);\\r\\n      }\\r\\n      // console.log(\\\"transfer srcToken to taker success: %s %d %d\\\", tokenAmt.srcToken, fulFilAmt.takerAmt, fulFilAmt.takerAmtToken);\\r\\n\\r\\n      // \\u4ece taker \\u54ea\\u91cc\\u8f6c\\u5165 destToken / destEToken\\r\\n      if (data.length > 0) {\\r\\n          uint256 balanceBefore = IERC20(destEToken).balanceOf(address(this));\\r\\n          IHswapV2Callee(to).hswapV2Call(msg.sender, fulFilAmt.takerAmt, fulFilAmt.amtDest, data);\\r\\n          uint256 transferIn = IERC20(destEToken).balanceOf(address(this)).sub(balanceBefore);\\r\\n          require(transferIn >= fulFilAmt.amtDest, \\\"not enough\\\");\\r\\n      } else {\\r\\n          if (isToken) {\\r\\n            address destToken = tokenAmt.destToken;\\r\\n            TransferHelper.safeTransferFrom(destToken, msg.sender, address(this), fulFilAmt.amtDestToken);\\r\\n            // mint\\r\\n            IERC20(destToken).approve(destEToken, fulFilAmt.amtDestToken);\\r\\n            (uint ret, ) = ICToken(destEToken).mint(fulFilAmt.amtDestToken);\\r\\n            require(ret == 0, \\\"mint failed\\\");\\r\\n          } else {\\r\\n            // taker \\u5f97\\u5230 srcEToken, maker \\u5f97\\u5230\\u7684 destEToken, \\u6682\\u5b58\\u5728 \\u5408\\u7ea6\\u4e2d\\r\\n            TransferHelper.safeTransferFrom(destEToken, msg.sender, address(this), fulFilAmt.amtDest);\\r\\n          }\\r\\n      }\\r\\n\\r\\n      // \\u5c06\\u624b\\u7eed\\u8d39\\u8f6c\\u7ed9 feeTo\\r\\n      if (fulFilAmt.takerFee > 0) {\\r\\n        TransferHelper.safeTransfer(srcEToken, feeTo, fulFilAmt.takerFee);\\r\\n      }\\r\\n      if (fulFilAmt.makerFee > 0) {\\r\\n        TransferHelper.safeTransfer(destEToken, feeTo, fulFilAmt.makerFee);\\r\\n      }\\r\\n\\r\\n      // \\u66f4\\u6539\\u76f8\\u5173\\u7684\\u72b6\\u6001\\r\\n      // 1. \\u589e\\u52a0 maker \\u7684 balance; \\u5982\\u679c\\u662f margin, \\u8f6c\\u5e01\\u7ed9 margin, \\u5e76\\u6267\\u884c\\u56de\\u8c03\\r\\n      // 2. \\u4fee\\u6539order\\u72b6\\u6001\\r\\n      _updateOrder(order, fulFilAmt.filled, fulFilAmt.makerAmt);\\r\\n\\r\\n      emit FulFilOrder(\\r\\n              order.owner,\\r\\n              msg.sender,\\r\\n              orderId,\\r\\n              fulFilAmt.filled,\\r\\n              fulFilAmt.amtDest\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev \\u66f4\\u65b0\\u72b6\\u6001\\r\\n    function _updateOrder(\\r\\n                DataTypes.OrderItem storage order,\\r\\n                uint filled,\\r\\n                uint makerGot\\r\\n              ) private {\\r\\n        address maker = order.to;\\r\\n        address srcEToken = order.tokenAmt.srcEToken;\\r\\n        address destEToken = order.tokenAmt.destEToken;\\r\\n\\r\\n        if (isMargin(order.flag)) {\\r\\n          // \\u8f6c\\u7ed9 margin \\u5408\\u7ea6\\r\\n          TransferHelper.safeTransfer(destEToken, marginAddr, makerGot);\\r\\n          // \\u56de\\u8c03 todo ??\\r\\n          IMarginHolding(marginAddr).onFulfiled(maker, srcEToken, destEToken, makerGot, filled);\\r\\n        } else {\\r\\n          balanceOf[destEToken][maker] += makerGot;\\r\\n        }\\r\\n\\r\\n        // \\u5df2\\u6210\\u4ea4\\r\\n        order.tokenAmt.fulfiled = order.tokenAmt.fulfiled.add(filled);\\r\\n        order.tokenAmt.destFulfiled = order.tokenAmt.destFulfiled.add(makerGot);\\r\\n\\r\\n        if (order.tokenAmt.fulfiled >= order.tokenAmt.amountInMint) {\\r\\n          //\\r\\n          order.flag |= _ORDER_CLOSED;\\r\\n          _removeOrder(order);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev \\u6839\\u636eorder\\u7684\\u5151\\u6362\\u6bd4\\u4f8b, \\u624b\\u7eed\\u8d39, \\u8ba1\\u7b97\\u5151\\u6362\\u5f97\\u5230\\u7684dest token\\u7684\\u5151\\u6362\\u6570\\u91cf. \\u5982\\u679c \\u662f token, \\u5219\\u8c03\\u7528 EToken \\u7684\\u63a5\\u53e3\\u66f4\\u65b0 exchangeRate, \\u56e0\\u6b64\\uff0c\\u8fd9\\u4e2a\\u65b9\\u6cd5\\u4e0d\\u662f\\u53ea\\u8bfb\\u65b9\\u6cd5\\r\\n    /// @param fulFilAmt \\u5404\\u79cd\\u6210\\u4ea4\\u6570\\u91cf, taker\\u4e70\\u5230\\u7684\\u5e01\\u7684\\u6570\\u91cf taker \\u4ed8\\u51fa\\u7684\\u5e01\\u7684\\u6570\\u91cf maker \\u5f97\\u5230\\u7684\\u548c\\u5356\\u51fa\\u7684\\u5e01\\u7684\\u6570\\u91cf\\r\\n    function _getFulfiledAmt(\\r\\n                DataTypes.TokenAmount memory tokenAmt,\\r\\n                FulFilAmt memory fulFilAmt,\\r\\n                uint256 pair\\r\\n              )\\r\\n              private {\\r\\n      uint amtToTaken = fulFilAmt.filled;\\r\\n      // \\u6302\\u5355\\u8005\\u5728\\u4e0d\\u6263\\u9664\\u624b\\u7eed\\u8d39\\u7684\\u60c5\\u51b5\\u4e0b\\u5f97\\u5230\\u7684\\u5e01\\u7684\\u6570\\u91cf\\r\\n      fulFilAmt.amtDest = OBPriceLogic.convertBuyAmountByETokenIn(tokenAmt, amtToTaken);\\r\\n\\r\\n      fulFilAmt.takerFee = amtToTaken.mul(getTakerFeeRate(pair)).div(DENOMINATOR);\\r\\n      fulFilAmt.makerFee = amtToTaken.mul(getMakerFeeRate(pair)).div(DENOMINATOR);\\r\\n      // taker\\u5f97\\u5230\\u7684\\u5e01\\uff0c\\u6263\\u9664\\u624b\\u7eed\\u8d39\\r\\n      fulFilAmt.takerAmt = amtToTaken.sub(fulFilAmt.takerFee);\\r\\n      // maker \\u5f97\\u5230\\u7684\\u5e01\\u6570\\u91cf\\uff0c\\u6263\\u9664\\u624b\\u7eed\\u8d39\\r\\n      fulFilAmt.makerAmt = fulFilAmt.amtDest.sub(fulFilAmt.makerFee);\\r\\n\\r\\n      if (fulFilAmt.isToken) {\\r\\n        // address srcEToken = tokenAmt.srcEToken;\\r\\n        uint256 srcRate = OBPriceLogic.refreshTokenExchangeRate(ICToken(tokenAmt.srcEToken));\\r\\n        uint256 destRate = OBPriceLogic.refreshTokenExchangeRate(ICToken(tokenAmt.destEToken));\\r\\n        fulFilAmt.takerAmtToken = fulFilAmt.takerAmt.mul(srcRate).div(1e18);\\r\\n        fulFilAmt.amtDestToken = fulFilAmt.amtDest.mul(destRate).div(1e18);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // withdraw etoken\\r\\n    // token should be etoken\\r\\n    function _withdraw(address user, address etoken, uint total, uint amt) private {\\r\\n        TransferHelper.safeTransfer(etoken, user, amt);\\r\\n\\r\\n        balanceOf[etoken][user] = total.sub(amt);\\r\\n    }\\r\\n\\r\\n    function _withdrawUnderlying(address user, address token, address etoken, uint total, uint amt) private {\\r\\n        balanceOf[etoken][user] = total.sub(amt);\\r\\n\\r\\n        // if (etoken == cETH) {\\r\\n        //   uint balanceBefore = address(this).balance;\\r\\n        //   // approve\\r\\n        //   IERC20(cETH).approve(cETH, amt);\\r\\n        //   uint ret = ICETH(cETH).redeem(amt);\\r\\n        //   require(ret == 0, \\\"redeem eth failed\\\");\\r\\n        //   uint redeemAmt = address(this).balance.sub(balanceBefore);\\r\\n        //   TransferHelper.safeTransferETH(user, redeemAmt);\\r\\n        // } else {\\r\\n        //   uint balanceBefore = IERC20(token).balanceOf(address(this));\\r\\n        //   // approve\\r\\n        //   IERC20(etoken).approve(etoken, amt);\\r\\n        //   uint ret = ICToken(etoken).redeem(amt);\\r\\n        //   require(ret == 0, \\\"redeem failed\\\");\\r\\n        //   uint redeemAmt = IERC20(token).balanceOf(address(this)).sub(balanceBefore);\\r\\n        //   TransferHelper.safeTransfer(token, user, redeemAmt);\\r\\n        // }\\r\\n        _redeemTransfer(token, etoken, user, amt);\\r\\n    }\\r\\n\\r\\n    // \\u7528\\u6237\\u6210\\u4ea4\\u540e\\uff0c\\u8d44\\u91d1\\u7531\\u5408\\u7ea6\\u4ee3\\u7ba1, \\u7528\\u6237\\u63d0\\u73b0\\u5f97\\u5230\\u81ea\\u5df1\\u7684 etoken\\r\\n    function withdraw(address etoken, uint amt) external {\\r\\n        uint total = balanceOf[etoken][msg.sender];\\r\\n        require(total > 0, \\\"no asset\\\");\\r\\n        if (amt == 0) {\\r\\n            amt = total;\\r\\n        } else {\\r\\n            require(total >= amt, \\\"not enough asset\\\");\\r\\n        }\\r\\n\\r\\n        _withdraw(msg.sender, etoken, total, amt);\\r\\n    }\\r\\n\\r\\n    // \\u7528\\u6237\\u6210\\u4ea4\\u540e\\uff0c\\u8d44\\u91d1\\u7531\\u5408\\u7ea6\\u4ee3\\u7ba1, \\u7528\\u6237\\u63d0\\u73b0\\u5f97\\u5230\\u81ea\\u5df1\\u7684 token\\r\\n    function withdrawUnderlying(address token, uint amt) external {\\r\\n        address etoken = _getETokenAddress(token);\\r\\n        uint total = balanceOf[etoken][msg.sender];\\r\\n\\r\\n        require(total > 0, \\\"no asset\\\");\\r\\n        if (amt == 0) {\\r\\n            amt = total;\\r\\n        } else {\\r\\n            require(total >= amt, \\\"not enough asset\\\");\\r\\n        }\\r\\n\\r\\n        _withdrawUnderlying(msg.sender, token, etoken, total, amt);\\r\\n    }\\r\\n\\r\\n    /// @dev \\u8bbe\\u7f6e feeTo \\u5730\\u5740\\r\\n    function setFeeTo(address to) external onlyOwner {\\r\\n      feeTo = to;\\r\\n    }\\r\\n\\r\\n    /// @dev TODO \\u9700\\u8981\\u5173\\u95ed \\u8f6c\\u51fa\\u624b\\u7eed\\u8d39\\r\\n    // function adminTransfer(address token, address to, uint amt) external onlyOwner {\\r\\n    //     if (token == address(0)) {\\r\\n    //       TransferHelper.safeTransferETH(to, amt);\\r\\n    //     } else {\\r\\n    //       TransferHelper.safeTransfer(token, to, amt);\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function _getPairFee(address src, address dest) internal view returns (DataTypes.OBPairConfigMap storage conf) {\\r\\n      address srcEToken = _getETokenAddress(src);\\r\\n      address destEToken = _getETokenAddress(dest);\\r\\n      uint256 pair = _pairFor(srcEToken, destEToken);\\r\\n      conf = pairFeeRate[pair];\\r\\n      return conf;\\r\\n    }\\r\\n\\r\\n    function setPairTakerFee(address src, address dest, uint fee) external onlyOwner {\\r\\n      DataTypes.OBPairConfigMap storage conf = _getPairFee(src, dest);\\r\\n\\r\\n      conf.setFeeTaker(fee);\\r\\n    }\\r\\n    \\r\\n    function setPairMakerFee(address src, address dest, uint fee) external onlyOwner {\\r\\n      DataTypes.OBPairConfigMap storage conf = _getPairFee(src, dest);\\r\\n\\r\\n      conf.setFeeMaker(fee);\\r\\n    }\\r\\n}\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success,) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x9eab9e4c0fa0626e0188644b51573a14dadd0e4fe760fe9045c74c272eb9449e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb779338ccafdf739d0d15c888b190fa82f92dba0c3712ca032494cffc10a11c1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\ncontract ReentrancyGuard {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor () internal {\\r\\n        // Storing an initial non-zero value makes deployment a bit more\\r\\n        // expensive, but in exchange the refund on every call to nonReentrant\\r\\n        // will be lower in amount. Since refunds are capped to a percetange of\\r\\n        // the total transaction's gas, it is best to keep them low in cases\\r\\n        // like this one, to increase the likelihood of the full refund coming\\r\\n        // into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7e53ba870c57c1963f9fb765bdbad9270a313765aa60ceb1e8b6b8a4a44d5e05\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swap/orderbook/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant internal WAD = 10 ** 18;\\r\\n    uint256 constant internal RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6b2ed04e70305d6538fe8eddf72456d08938ca9d78cabc596963a8fcef88bb5a\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052601e600755601e60085560405162004cf438038062004cf4833981016040819052620000309162000125565b60006200003c62000103565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506010805460ff19166001179055600380546001600160a01b039485166001600160a01b0319918216179091556002805493851661010002610100600160a81b031990941693909317909255600580549184169183169190911790556004805493909216928116929092179055600680549091163317905562000185565b3390565b80516001600160a01b03811681146200011f57600080fd5b92915050565b600080600080608085870312156200013b578384fd5b62000147868662000107565b935062000158866020870162000107565b925062000169866040870162000107565b91506200017a866060870162000107565b905092959194509250565b614b5f80620001956000396000f3fe6080604052600436106102d55760003560e01c8063862d77ba11610179578063ac6f0cc8116100d6578063f3fef3a31161008a578063f7d5b2d911610064578063f7d5b2d914610755578063fbd2eb7c14610775578063fdb8725214610795576102dc565b8063f3fef3a3146106f5578063f46901ed14610715578063f7888aec14610735576102dc565b8063d7755b8b116100bb578063d7755b8b146106a0578063f2428621146106c0578063f2fde38b146106d5576102dc565b8063ac6f0cc814610660578063c0e863c314610680576102dc565b80639c5e52d51161012d578063a1b4d01111610112578063a1b4d01114610602578063a66eb9ac14610617578063a85c38ef1461062c576102dc565b80639c5e52d5146105c25780639c7ad7f4146105e2576102dc565b8063918f86741161015e578063918f86741461056d57806396ed28f91461058257806399117be9146105a2576102dc565b8063862d77ba146105385780638da5cb5b14610558576102dc565b806352e86d5b116102325780636d0b6a6c116101e65780637623cccb116101c05780637623cccb146104e15780637bea0d1c14610501578063803289fe14610523576102dc565b80636d0b6a6c14610499578063715018a6146104b957806375bca923146104ce576102dc565b8063597e1fb511610217578063597e1fb514610437578063613436bc14610459578063683b6d2914610479576102dc565b806352e86d5b14610402578063584c617e14610422576102dc565b806325c9e2761161028957806345e660711161026e57806345e66071146103b8578063514fcac7146103cd578063523439e6146103ed576102dc565b806325c9e276146103835780632c58870b14610398576102dc565b8063163de5e5116102ba578063163de5e5146103215780631cf60222146103435780631d20980a14610363576102dc565b8063017e7e58146102e157806306e5b11a1461030c576102dc565b366102dc57005b600080fd5b3480156102ed57600080fd5b506102f66107b5565b604051610303919061411c565b60405180910390f35b61031f61031a366004613e2e565b6107c4565b005b34801561032d57600080fd5b50610336610865565b6040516103039190614a20565b34801561034f57600080fd5b5061033661035e366004613e03565b61086b565b34801561036f57600080fd5b5061033661037e366004613f13565b610899565b34801561038f57600080fd5b506102f66108b2565b3480156103a457600080fd5b506103366103b3366004613f13565b6108c1565b3480156103c457600080fd5b506102f66108d3565b3480156103d957600080fd5b5061031f6103e8366004613f13565b6108e2565b3480156103f957600080fd5b50610336610db3565b34801561040e57600080fd5b5061033661041d366004613f43565b610db9565b34801561042e57600080fd5b50610336610dd2565b34801561044357600080fd5b5061044c610dd8565b60405161030391906142e7565b34801561046557600080fd5b50610336610474366004613f13565b610de1565b34801561048557600080fd5b5061031f610494366004613dc3565b610de7565b3480156104a557600080fd5b506103366104b4366004613f43565b610eb3565b3480156104c557600080fd5b5061031f610ed1565b6103366104dc366004613d5f565b610f5a565b3480156104ed57600080fd5b5061044c6104fc366004613f13565b611760565b34801561050d57600080fd5b50610516611787565b604051610303919061423b565b34801561052f57600080fd5b5061031f61195d565b34801561054457600080fd5b50610336610553366004613f43565b6119a8565b34801561056457600080fd5b506102f66119c2565b34801561057957600080fd5b506103366119d1565b34801561058e57600080fd5b5061033661059d366004613d27565b6119d7565b3480156105ae57600080fd5b506103366105bd366004613f13565b6119fa565b3480156105ce57600080fd5b506103366105dd366004613cef565b611ac3565b3480156105ee57600080fd5b5061031f6105fd366004613dc3565b611ad5565b34801561060e57600080fd5b506102f6611b75565b34801561062357600080fd5b5061031f611b84565b34801561063857600080fd5b5061064c610647366004613f13565b611bd2565b604051610303989796959493929190614a85565b34801561066c57600080fd5b5061033661067b366004613f13565b611c8b565b34801561068c57600080fd5b5061031f61069b366004613e03565b611d4a565b3480156106ac57600080fd5b506103366106bb366004613f43565b611da5565b3480156106cc57600080fd5b506102f6611dac565b3480156106e157600080fd5b5061031f6106f0366004613cef565b611dc0565b34801561070157600080fd5b5061031f610710366004613e03565b611e80565b34801561072157600080fd5b5061031f610730366004613cef565b611eff565b34801561074157600080fd5b50610336610750366004613d27565b611f60565b610768610763366004613f87565b611f7d565b60405161030391906149b9565b34801561078157600080fd5b50610336610790366004613e03565b612557565b3480156107a157600080fd5b5061031f6107b0366004613e03565b612570565b6006546001600160a01b031681565b60025460ff16156107f05760405162461bcd60e51b81526004016107e790614812565b60405180910390fd5b85518751146108115760405162461bcd60e51b81526004016107e7906145c6565b60005b875181101561085b5761085288828151811061082c57fe5b602002602001015188838151811061084057fe5b60200260200101518888888888611f7d565b50600101610814565b5050505050505050565b60015481565b600d602052816000526040600020818154811061088457fe5b90600052602060002001600091509150505481565b6fffffffffffffffffffffffffffffffff81165b919050565b6004546001600160a01b031681565b60096020526000908152604090205481565b6005546001600160a01b031681565b60105460ff166109045760405162461bcd60e51b81526004016107e790614982565b6010805460ff191690556000818152600c60205260408120600481015490919061092d90611760565b905080156109875761093d6119c2565b6001600160a01b0316336001600160a01b0316148061096657506005546001600160a01b031633145b6109825760405162461bcd60e51b81526004016107e7906147db565b6109d6565b61098f6119c2565b6001600160a01b0316336001600160a01b031614806109ba575060058201546001600160a01b031633145b6109d65760405162461bcd60e51b81526004016107e7906146a2565b6109e382600401546125ff565b15610a005760405162461bcd60e51b81526004016107e7906146d9565b60078201546009830154600d840154600c8501546001600160a01b039384169390921691600091610a319190612607565b9050610a726040518060400160405280601e81526020017f63616e63656c206f726465723a2073726345546f6b656e20616d743d2564000081525082612649565b816001600160a01b0316836001600160a01b031614610af0578015610aeb576005850154610aad90849084906001600160a01b0316846126ab565b610aeb6040518060400160405280601281526020017f72656465656d207472616e73666572206f6b000000000000000000000000000081525061287c565b610b0a565b6005850154610b0a9084906001600160a01b0316836128db565b83610bac57600a85015460088601546001600160a01b039182166000818152600b6020908152604080832060068c0154871684529091529020549092909116908015610ba457816001600160a01b0316836001600160a01b03161415610b89576006880154610b84906001600160a01b03168483806129c9565b610ba4565b6006880154610ba4906001600160a01b031683858480612a10565b505050610c43565b6005546006860154600887015460078801546040517fb7d9d9d40000000000000000000000000000000000000000000000000000000081526001600160a01b039485169463b7d9d9d494610c10949082169389939183169216908890600401614197565b600060405180830381600087803b158015610c2a57600080fd5b505af1158015610c3e573d6000803e3d6000fd5b505050505b600485018054600190811791829055604080516101008082018352895482529289015460208083019190915260028a01548284015260038a015460608084019190915260808084019690965260058b01546001600160a01b0390811660a08086019190915260068d0154821660c08087019190915286516101208101885260078f01548416815260088f015484169581019590955260098e0154831696850196909652600a8d015490911691830191909152600b8b015495820195909552600c8a015494810194909452600d89015491840191909152600e88015460e084810191909152600f8901549284019290925290810191909152610d4390612a4c565b6008850154600786015460058701546040516001600160a01b039384169392831692909116907fa263a8e516fa313745abfe43252b015249ad3c987ae268d37531ce67364d7acf90610d96908b90614a20565b60405180910390a450506010805460ff1916600117905550505050565b60075481565b600f602052816000526040600020818154811061088457fe5b60085481565b60025460ff1681565b60801c90565b610def612dad565b6001600160a01b0316610e006119c2565b6001600160a01b031614610e265760405162461bcd60e51b81526004016107e790614591565b6000610e328484612db1565b6040517f24637ce0000000000000000000000000000000000000000000000000000000008152909150739738Cd280C42f219539d1EA4C99093d460Ef46b8906324637ce090610e879084908690600401614a29565b60006040518083038186803b158015610e9f57600080fd5b505af415801561085b573d6000803e3d6000fd5b6000610ebe82610de1565b610ec784610899565b1790505b92915050565b610ed9612dad565b6001600160a01b0316610eea6119c2565b6001600160a01b031614610f105760405162461bcd60e51b81526004016107e790614591565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60025460009060ff1615610f805760405162461bcd60e51b81526004016107e790614812565b60105460ff16610fa25760405162461bcd60e51b81526004016107e790614982565b6010805460ff191690556001600160a01b038781169087161415610fd85760405162461bcd60e51b81526004016107e790614880565b6001600160a01b03871661100b57833410156110065760405162461bcd60e51b81526004016107e790614634565b611017565b61101787333087612df0565b6001600160a01b0387166000908152600a6020526040902054841161104e5760405162461bcd60e51b81526004016107e790614710565b50600180548082019091556000818152600c602052604090208181556005810180546001600160a01b031916331790556001600160a01b038616156110935785611095565b335b6006820180546001600160a01b0319166001600160a01b0392909216919091179055426003820155600481018390556000600d82018190556110d689612ed9565b6007830180546001600160a01b03808d166001600160a01b03199283168117909355600986018054918516919092168117909155600b850189905591925014611393576001600160a01b0389166111e157600080600360009054906101000a90046001600160a01b03166001600160a01b0316631249c58b346040518263ffffffff1660e01b815260040160408051808303818588803b15801561117957600080fd5b505af115801561118d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111b29190613f64565b91509150816000146111d65760405162461bcd60e51b81526004016107e79061448f565b600c8401555061138e565b60405163095ea7b360e01b81526001600160a01b038a169063095ea7b39061120f9084908a90600401614222565b602060405180830381600087803b15801561122957600080fd5b505af115801561123d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112619190613ef7565b50600080826001600160a01b031663a0712d68896040518263ffffffff1660e01b81526004016112919190614a20565b6040805180830381600087803b1580156112aa57600080fd5b505af11580156112be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e29190613f64565b60405163095ea7b360e01b815291935091506001600160a01b0384169063095ea7b390611316908690600090600401614222565b602060405180830381600087803b15801561133057600080fd5b505af1158015611344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113689190613ef7565b5081156113875760405162461bcd60e51b81526004016107e79061448f565b600c840155505b61139b565b600c82018690555b6008820180546001600160a01b0319166001600160a01b038a1617905560006113c389612ed9565b600a840180546001600160a01b038084166001600160a01b03199092168217909255600e86018990559192508b811684821614908b16909114146114195760405162461bcd60e51b81526004016107e7906148b7565b6005546001600160a01b03163314156114da5761143585611760565b6114515760405162461bcd60e51b81526004016107e790614849565b896001600160a01b0316826001600160a01b0316146114825760405162461bcd60e51b81526004016107e7906144fd565b6001600160a01b0388163314156114ab5760405162461bcd60e51b81526004016107e7906144c6565b600a8301546001600160a01b038a81169116146114da5760405162461bcd60e51b81526004016107e790614458565b6114e48282613105565b6002840155604051636eb1769f60e11b81527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906001600160a01b0383169063dd62ed3e906115399030908690600401614130565b60206040518083038186803b15801561155157600080fd5b505afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115899190613f2b565b10156116135760405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906115bf90849060001990600401614222565b602060405180830381600087803b1580156115d957600080fd5b505af11580156115ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116119190613ef7565b505b604051636eb1769f60e11b81527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906001600160a01b0384169063dd62ed3e906116639030908790600401614130565b60206040518083038186803b15801561167b57600080fd5b505afa15801561168f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b39190613f2b565b101561173d5760405163095ea7b360e01b81526001600160a01b0383169063095ea7b3906116e990849060001990600401614222565b602060405180830381600087803b15801561170357600080fd5b505af1158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190613ef7565b505b61174683613139565b50506010805460ff19166001179055509695505050505050565b7f800000000000000000000000000000000000000000000000000000000000000016151590565b606060008060005b6001548110156117c8576000818152600c60205260409020600401546117b4816125ff565b6117bf576001909301925b5060010161178f565b508167ffffffffffffffff811180156117e057600080fd5b5060405190808252806020026020018201604052801561181a57816020015b611807613afb565b8152602001906001900390816117ff5790505b50925060005b60015481101561195757611832613afb565b506000818152600c6020818152604092839020835161010080820186528254825260018301548285015260028301548287015260038301546060808401919091526004840154608080850191825260058601546001600160a01b0390811660a0808801919091526006880154821660c0808901919091528b5161012081018d5260078a01548416815260088a015484169a81019a909a52600989015483169b8a019b909b52600a88015490911693880193909352600b860154908701529584015490850152600d83015495840195909552600e82015460e084810191909152600f90920154948301949094528301525161192b906125ff565b61194e578085848151811061193c57fe5b60209081029190910101526001909201915b50600101611820565b50505090565b611965612dad565b6001600160a01b03166119766119c2565b6001600160a01b03161461199c5760405162461bcd60e51b81526004016107e790614591565b6002805460ff19169055565b6fffffffffffffffffffffffffffffffff19919091161790565b6000546001600160a01b031690565b61271081565b60006119f36119e584613272565b6119ee84613272565b613105565b9392505050565b60008181526009602052604080822090517f652bccd30000000000000000000000000000000000000000000000000000000081528291739738Cd280C42f219539d1EA4C99093d460Ef46b89163652bccd391611a5891600401614a20565b60206040518083038186803b158015611a7057600080fd5b505af4158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa89190613f2b565b905080611ab95750506007546108ad565b6000190192915050565b600a6020526000908152604090205481565b611add612dad565b6001600160a01b0316611aee6119c2565b6001600160a01b031614611b145760405162461bcd60e51b81526004016107e790614591565b6000611b208484612db1565b6040517f32b914bf000000000000000000000000000000000000000000000000000000008152909150739738Cd280C42f219539d1EA4C99093d460Ef46b8906332b914bf90610e879084908690600401614a29565b6003546001600160a01b031681565b611b8c612dad565b6001600160a01b0316611b9d6119c2565b6001600160a01b031614611bc35760405162461bcd60e51b81526004016107e790614591565b6002805460ff19166001179055565b600c6020818152600092835260409283902080546001820154600283015460038401546004850154600586015460068701548a5161012081018c5260078901546001600160a01b03908116825260088a015481169a82019a909a5260098901548a169b81019b909b52600a880154891660608c0152600b88015460808c01529887015460a08b0152600d87015460c08b0152600e87015460e08b0152600f909601546101008a0152939792969195909481169291169088565b60008181526009602052604080822090517fa645cb6d0000000000000000000000000000000000000000000000000000000081528291739738Cd280C42f219539d1EA4C99093d460Ef46b89163a645cb6d91611ce991600401614a20565b60206040518083038186803b158015611d0157600080fd5b505af4158015611d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d399190613f2b565b905080611ab95750506008546108ad565b611d52612dad565b6001600160a01b0316611d636119c2565b6001600160a01b031614611d895760405162461bcd60e51b81526004016107e790614591565b6001600160a01b039091166000908152600a6020526040902055565b60801b1790565b60025461010090046001600160a01b031681565b611dc8612dad565b6001600160a01b0316611dd96119c2565b6001600160a01b031614611dff5760405162461bcd60e51b81526004016107e790614591565b6001600160a01b038116611e255760405162461bcd60e51b81526004016107e79061438d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600b6020908152604080832033845290915290205480611ec15760405162461bcd60e51b81526004016107e7906145fd565b81611ece57809150611eee565b81811015611eee5760405162461bcd60e51b81526004016107e7906148ee565b611efa338483856129c9565b505050565b611f07612dad565b6001600160a01b0316611f186119c2565b6001600160a01b031614611f3e5760405162461bcd60e51b81526004016107e790614591565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600b60209081526000928352604080842090915290825290205481565b611f85613b57565b60025460ff1615611fa85760405162461bcd60e51b81526004016107e790614812565b60105460ff16611fca5760405162461bcd60e51b81526004016107e790614982565b6010805460ff191690556000888152600c60205260409020600481015460011615611ff5575061253f565b611ffd613ba5565b50604080516101208101825260078301546001600160a01b0390811682526008840154811660208301526009840154811692820192909252600a83015482166060820152600b8301546080820152600c83015460a0820152600d83015460c0820152600e83015460e0820152600f83015461010082015290881661207f573397505b86151583526020830189905260c081015160a08201516000916120a29190612607565b9050808a11156120d157866120c95760405162461bcd60e51b81526004016107e7906147a4565b602084018190525b506120e18184846002015461334e565b60608101516040820151881561210a576121058360000151828c88608001516126ab565b612119565b612119818b87608001516128db565b85156122f4576040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906370a082319061216790309060040161411c565b60206040518083038186803b15801561217f57600080fd5b505afa158015612193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b79190613f2b565b608087015160e08801516040517f226dc8820000000000000000000000000000000000000000000000000000000081529293506001600160a01b038e169263226dc8829261220d9233928e908e9060040161414a565b600060405180830381600087803b15801561222757600080fd5b505af115801561223b573d6000803e3d6000fd5b5050505060006122c782856001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612271919061411c565b60206040518083038186803b15801561228957600080fd5b505afa15801561229d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c19190613f2b565b90612607565b90508660e001518110156122ed5760405162461bcd60e51b81526004016107e790614421565b5050612467565b881561245757600083602001519050612314813330896101000151612df0565b61010086015160405163095ea7b360e01b81526001600160a01b0383169163095ea7b391612346918791600401614222565b602060405180830381600087803b15801561236057600080fd5b505af1158015612374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123989190613ef7565b506101008601516040517fa0712d680000000000000000000000000000000000000000000000000000000081526000916001600160a01b0386169163a0712d68916123e591600401614a20565b6040805180830381600087803b1580156123fe57600080fd5b505af1158015612412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124369190613f64565b50905080156122ed5760405162461bcd60e51b81526004016107e79061448f565b6124678233308860e00151612df0565b6040850151156124905760065460408601516124909183916001600160a01b03909116906128db565b6060850151156124b95760065460608601516124b99184916001600160a01b03909116906128db565b6124cc8486602001518760c001516135f3565b336001600160a01b03168460050160009054906101000a90046001600160a01b03166001600160a01b03167fd00ede2e0292fd63d9ba8b4b572003009a04bcdf39cd75ac9684433d20de7ebf8e88602001518960e0015160405161253293929190614a54565b60405180910390a3505050505b6010805460ff19166001179055979650505050505050565b600e602052816000526040600020818154811061088457fe5b600061257b83613272565b6001600160a01b0381166000908152600b60209081526040808320338452909152902054909150806125bf5760405162461bcd60e51b81526004016107e7906145fd565b826125cc578092506125ec565b828110156125ec5760405162461bcd60e51b81526004016107e7906148ee565b6125f93385848487612a10565b50505050565b600116151590565b60006119f383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506138e7565b6126a7828260405160240161265f929190614305565b60408051601f198184030181529190526020810180516001600160e01b03167f9710a9d000000000000000000000000000000000000000000000000000000000179052613913565b5050565b6126ea6040518060400160405280600a81526020017f72656465656d416d743a0000000000000000000000000000000000000000000081525082612649565b600080846001600160a01b031663db006a75846040518263ffffffff1660e01b81526004016127199190614a20565b606060405180830381600087803b15801561273357600080fd5b505af1158015612747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276b9190614001565b9250509150816000146127905760405162461bcd60e51b81526004016107e79061466b565b6001600160a01b0386166127ad576127a88482613934565b612874565b6128696040518060400160405280601181526020017f72656465656d20746f6b656e20616d743a0000000000000000000000000000008152508483896001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612814919061411c565b60206040518083038186803b15801561282c57600080fd5b505afa158015612840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128649190613f2b565b6139c1565b6128748685836128db565b505050505050565b6128d88160405160240161289091906142f2565b60408051601f198184030181529190526020810180516001600160e01b03167f41304fac00000000000000000000000000000000000000000000000000000000179052613913565b50565b60006060846001600160a01b031663a9059cbb8585604051602401612901929190614222565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161293a9190614100565b6000604051808303816000865af19150503d8060008114612977576040519150601f19603f3d011682016040523d82523d6000602084013e61297c565b606091505b50915091508180156129a65750805115806129a65750808060200190518101906129a69190613ef7565b6129c25760405162461bcd60e51b81526004016107e790614356565b5050505050565b6129d48385836128db565b6129de8282612607565b6001600160a01b039384166000908152600b602090815260408083209790961682529590955292909320919091555050565b612a1a8282612607565b6001600160a01b038085166000908152600b60209081526040808320938a16835292905220556129c2848487846126ab565b6000612a5b8260200151610899565b90506000612a6c8360200151610de1565b905060008360a001519050600080612a878660800151611760565b90508015612b9b5760c08601516001600160a01b0381166000908152600d602052604090205490935060001901848114612b5e576001600160a01b0384166000908152600d60205260409020805482908110612adf57fe5b9060005260206000200154925082600d6000866001600160a01b03166001600160a01b031681526020019081526020016000208681548110612b1d57fe5b9060005260206000200181905550612b4b600c60008581526020019081526020016000206001015486610eb3565b6000848152600c60205260409020600101555b6001600160a01b0384166000908152600d60205260409020805480612b7f57fe5b6001900381819060005260206000200160009055905550612c9b565b6001600160a01b0383166000908152600e602052604090205460001901848114612c62576001600160a01b0384166000908152600e60205260409020805482908110612be357fe5b9060005260206000200154925082600e6000866001600160a01b03166001600160a01b031681526020019081526020016000208681548110612c2157fe5b9060005260206000200181905550612c4f600c60008581526020019081526020016000206001015486610eb3565b6000848152600c60205260409020600101555b6001600160a01b0384166000908152600e60205260409020805480612c8357fe5b60019003818190600052602060002001600090559055505b6040808701516000908152600f60205220546001108015612cd157506040808701516000908152600f6020522054600019018514155b15612d7557604080870180516000908152600f6020528281209151815291909120548154600019909101908110612d0457fe5b9060005260206000200154915081600f6000886040015181526020019081526020016000208681548110612d3457fe5b9060005260206000200181905550612d62600c600084815260200190815260200160002060010154866119a8565b6000838152600c60205260409020600101555b6040808701516000908152600f60205220805480612d8f57fe5b60019003818190600052602060002001600090559055505050505050565b3390565b600080612dbd84613272565b90506000612dca84613272565b90506000612dd88383613105565b60009081526009602052604090209695505050505050565b60006060856001600160a01b03166323b872dd868686604051602401612e18939291906141fe565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612e519190614100565b6000604051808303816000865af19150503d8060008114612e8e576040519150601f19603f3d011682016040523d82523d6000602084013e612e93565b606091505b5091509150818015612ebd575080511580612ebd575080806020019051810190612ebd9190613ef7565b6128745760405162461bcd60e51b81526004016107e790614925565b60006001600160a01b0382161580612f0357506002546001600160a01b0383811661010090920416145b15612f1a57506003546001600160a01b03166108ad565b6004805460405163714bca1f60e11b81526000926001600160a01b039092169163e297943e91612f4c9187910161411c565b60206040518083038186803b158015612f6457600080fd5b505afa158015612f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9c9190613d0b565b90506001600160a01b038116610ecb57600480546040517fb8d7b6690000000000000000000000000000000000000000000000000000000081526000926001600160a01b039092169163b8d7b66991612ff79188910161411c565b60206040518083038186803b15801561300f57600080fd5b505afa158015613023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130479190613d0b565b90506001600160a01b038116156130625783925050506108ad565b600480546040517f26c7bd930000000000000000000000000000000000000000000000000000000081526001600160a01b03909116916326c7bd93916130aa9188910161411c565b602060405180830381600087803b1580156130c457600080fd5b505af11580156130d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fc9190613d0b565b925050506108ad565b6000828260405160200161311a9291906140d9565b60408051601f1981840301815291905280516020909101209392505050565b80546004820154600061314b82611760565b600585015490915060009081906001600160a01b0316831561319f575060068601546001600160a01b03166000818152600d60209081526040822080546001810182559083529120810187905592506131ce565b6001600160a01b0381166000908152600e60209081526040822080546001810182559083529120810187905592505b60028701546000908152600f60209081526040822080546001810182559083529120810187905591506132018284611da5565b600188015560088701546007880154600b890154600e8a01546040516001600160a01b0394851694938416938616927fc8419e5c94126588374d91d4332ef5d56223abb9c42776b667e899ccff2c5f2792613261928d9291908d90614a6a565b60405180910390a450505050505050565b60006001600160a01b038216158061329c57506002546001600160a01b0383811661010090920416145b156132b357506003546001600160a01b03166108ad565b6004805460405163714bca1f60e11b81526000926001600160a01b039092169163e297943e916132e59187910161411c565b60206040518083038186803b1580156132fd57600080fd5b505afa158015613311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133359190613d0b565b90506001600160a01b038116610ecb57829150506108ad565b60208201516040517f78cbe051000000000000000000000000000000000000000000000000000000008152733fDcC60290751EB26024244b0ed7Fca1B2CAe088906378cbe051906133a59087908590600401614a37565b60206040518083038186803b1580156133bd57600080fd5b505af41580156133d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f59190613f2b565b60e084015261341961271061341361340c85611c8b565b8490613a23565b90613a5d565b604084015261343061271061341361340c856119fa565b60608401526040830151613445908290612607565b6080840152606083015160e084015161345d91612607565b60c08401528251156125f95760408085015190517f0bbc1cea000000000000000000000000000000000000000000000000000000008152600091733fDcC60290751EB26024244b0ed7Fca1B2CAe08891630bbc1cea916134bf9160040161411c565b60206040518083038186803b1580156134d757600080fd5b505af41580156134eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061350f9190613f2b565b90506000733fDcC60290751EB26024244b0ed7Fca1B2CAe088630bbc1cea87606001516040518263ffffffff1660e01b815260040161354e919061411c565b60206040518083038186803b15801561356657600080fd5b505af415801561357a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359e9190613f2b565b90506135c3670de0b6b3a7640000613413848860800151613a2390919063ffffffff16565b60a086015260e08501516135e590670de0b6b3a7640000906134139084613a23565b610100860152505050505050565b60068301546009840154600a85015460048601546001600160a01b0393841693928316929091169061362490611760565b156136c9576005546136419082906001600160a01b0316866128db565b6005546040517f1889ae210000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631889ae2190613692908690869086908a908c906004016141ca565b600060405180830381600087803b1580156136ac57600080fd5b505af11580156136c0573d6000803e3d6000fd5b505050506136f5565b6001600160a01b038082166000908152600b602090815260408083209387168352929052208054850190555b600d8601546137049086613a9f565b600d870155600f8601546137189085613a9f565b600f870155600c860154600d870154106128745760018660040160008282541792505081905550612874866040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016006820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160078201604051806101200160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152505081525050612a4c565b6000818484111561390b5760405162461bcd60e51b81526004016107e791906142f2565b505050900390565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604080516000808252602082019092526001600160a01b03841690839060405161395e9190614100565b60006040518083038185875af1925050503d806000811461399b576040519150601f19603f3d011682016040523d82523d6000602084013e6139a0565b606091505b5050905080611efa5760405162461bcd60e51b81526004016107e790614747565b6125f9848484846040516024016139db9493929190614327565b60408051601f198184030181529190526020810180516001600160e01b03167f08ee566600000000000000000000000000000000000000000000000000000000179052613913565b600082613a3257506000610ecb565b82820282848281613a3f57fe5b04146119f35760405162461bcd60e51b81526004016107e790614534565b60006119f383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613ac4565b6000828201838110156119f35760405162461bcd60e51b81526004016107e7906143ea565b60008183613ae55760405162461bcd60e51b81526004016107e791906142f2565b506000838581613af157fe5b0495945050505050565b604051806101000160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001613b52613ba5565b905290565b60405180610120016040528060001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b600082601f830112613c25578081fd5b813567ffffffffffffffff80821115613c3c578283fd5b602080830260405182828201018181108582111715613c59578687fd5b604052848152945081850192508582018187018301881015613c7a57600080fd5b600091505b84821015613c9d578035845292820192600191909101908201613c7f565b505050505092915050565b60008083601f840112613cb9578182fd5b50813567ffffffffffffffff811115613cd0578182fd5b602083019150836020828501011115613ce857600080fd5b9250929050565b600060208284031215613d00578081fd5b81356119f381614b06565b600060208284031215613d1c578081fd5b81516119f381614b06565b60008060408385031215613d39578081fd5b8235613d4481614b06565b91506020830135613d5481614b06565b809150509250929050565b60008060008060008060c08789031215613d77578182fd5b8635613d8281614b06565b95506020870135613d9281614b06565b94506040870135613da281614b06565b959894975094956060810135955060808101359460a0909101359350915050565b600080600060608486031215613dd7578283fd5b8335613de281614b06565b92506020840135613df281614b06565b929592945050506040919091013590565b60008060408385031215613e15578182fd5b8235613e2081614b06565b946020939093013593505050565b600080600080600080600060c0888a031215613e48578081fd5b873567ffffffffffffffff80821115613e5f578283fd5b613e6b8b838c01613c15565b985060208a0135915080821115613e80578283fd5b613e8c8b838c01613c15565b975060408a01359150613e9e82614b06565b909550606089013590613eb082614b1b565b909450608089013590613ec282614b1b565b90935060a08901359080821115613ed7578283fd5b50613ee48a828b01613ca8565b989b979a50959850939692959293505050565b600060208284031215613f08578081fd5b81516119f381614b1b565b600060208284031215613f24578081fd5b5035919050565b600060208284031215613f3c578081fd5b5051919050565b60008060408385031215613f55578182fd5b50508035926020909101359150565b60008060408385031215613f76578182fd5b505080516020909101519092909150565b600080600080600080600060c0888a031215613fa1578081fd5b87359650602088013595506040880135613fba81614b06565b94506060880135613fca81614b1b565b93506080880135613fda81614b1b565b925060a088013567ffffffffffffffff811115613ff5578182fd5b613ee48a828b01613ca8565b600080600060608486031215614015578081fd5b8351925060208401519150604084015190509250925092565b6001600160a01b03169052565b60008151808452614053816020860160208601614ada565b601f01601f19169290920160200192915050565b6001600160a01b038082511683528060208301511660208401528060408301511660408401525060608101516140a0606084018261402e565b506080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b60008251614112818460208701614ada565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b038716825285602083015284604083015260806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b6001600160a01b039586168152938516602085015291841660408401529092166060820152608081019190915260a00190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b828110156142da5781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201516001600160a01b03169086015260c0808201516142af8288018261402e565b505060e090810151906142c486820183614067565b5050610200939093019290850190600101614258565b5091979650505050505050565b901515815260200190565b6000602082526119f3602083018461403b565b600060408252614318604083018561403b565b90508260208301529392505050565b60006080825261433a608083018761403b565b6020830195909552506040810192909252606090910152919050565b6020808252601f908201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600a908201527f6e6f7420656e6f75676800000000000000000000000000000000000000000000604082015260600190565b60208082526015908201527f646573742073686f756c642062652065746f6b656e0000000000000000000000604082015260600190565b6020808252600b908201527f6d696e74206661696c6564000000000000000000000000000000000000000000604082015260600190565b6020808252601b908201527f746f2073686f756c642062652075736572277320616464726573730000000000604082015260600190565b60208082526014908201527f7372632073686f756c642062652065746f6b656e000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201527f696e76616c696420706172616d00000000000000000000000000000000000000604082015260600190565b60208082526008908201527f6e6f206173736574000000000000000000000000000000000000000000000000604082015260600190565b60208082526013908201527f6e6f7420656e6f75676820616d6f756e74496e00000000000000000000000000604082015260600190565b6020808252600d908201527f72656465656d206661696c656400000000000000000000000000000000000000604082015260600190565b60208082526014908201527f63616e63656c4f726465723a206e6f2061757468000000000000000000000000604082015260600190565b60208082526015908201527f6f7264657220686173206265656e20636c6f7365640000000000000000000000604082015260600190565b60208082526014908201527f6c657373207468616e206d696e20616d6f756e74000000000000000000000000604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201527f4c45440000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6e6f7420656e6f75676820746f2066756c66696c000000000000000000000000604082015260600190565b6020808252601a908201527f63616e63656c4d617267696e4f726465723a206e6f2061757468000000000000604082015260600190565b60208082526011908201527f6f7264657220626f6f6b20636c6f736564000000000000000000000000000000604082015260600190565b60208082526015908201527f666c61672073686f756c64206265206d617267696e0000000000000000000000604082015260600190565b6020808252600f908201527f6964656e746963616c20746f6b656e0000000000000000000000000000000000604082015260600190565b60208082526014908201527f626f746820746f6b656e206f722065746f6b656e000000000000000000000000604082015260600190565b60208082526010908201527f6e6f7420656e6f75676820617373657400000000000000000000000000000000604082015260600190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160408201527f494c454400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000610120820190508251151582526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b90815260200190565b918252602082015260400190565b6101408101614a468285614067565b826101208301529392505050565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b888152602081018890526040810187905260608101869052608081018590526001600160a01b0384811660a0830152831660c08201526102008101614acd60e0830184614067565b9998505050505050505050565b60005b83811015614af5578181015183820152602001614add565b838111156125f95750506000910152565b6001600160a01b03811681146128d857600080fd5b80151581146128d857600080fdfea2646970667358221220b1c060970fc478deaca4dd43a5a7b0db43fda95914623dfbc837c4a279bab58b64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106102d55760003560e01c8063862d77ba11610179578063ac6f0cc8116100d6578063f3fef3a31161008a578063f7d5b2d911610064578063f7d5b2d914610755578063fbd2eb7c14610775578063fdb8725214610795576102dc565b8063f3fef3a3146106f5578063f46901ed14610715578063f7888aec14610735576102dc565b8063d7755b8b116100bb578063d7755b8b146106a0578063f2428621146106c0578063f2fde38b146106d5576102dc565b8063ac6f0cc814610660578063c0e863c314610680576102dc565b80639c5e52d51161012d578063a1b4d01111610112578063a1b4d01114610602578063a66eb9ac14610617578063a85c38ef1461062c576102dc565b80639c5e52d5146105c25780639c7ad7f4146105e2576102dc565b8063918f86741161015e578063918f86741461056d57806396ed28f91461058257806399117be9146105a2576102dc565b8063862d77ba146105385780638da5cb5b14610558576102dc565b806352e86d5b116102325780636d0b6a6c116101e65780637623cccb116101c05780637623cccb146104e15780637bea0d1c14610501578063803289fe14610523576102dc565b80636d0b6a6c14610499578063715018a6146104b957806375bca923146104ce576102dc565b8063597e1fb511610217578063597e1fb514610437578063613436bc14610459578063683b6d2914610479576102dc565b806352e86d5b14610402578063584c617e14610422576102dc565b806325c9e2761161028957806345e660711161026e57806345e66071146103b8578063514fcac7146103cd578063523439e6146103ed576102dc565b806325c9e276146103835780632c58870b14610398576102dc565b8063163de5e5116102ba578063163de5e5146103215780631cf60222146103435780631d20980a14610363576102dc565b8063017e7e58146102e157806306e5b11a1461030c576102dc565b366102dc57005b600080fd5b3480156102ed57600080fd5b506102f66107b5565b604051610303919061411c565b60405180910390f35b61031f61031a366004613e2e565b6107c4565b005b34801561032d57600080fd5b50610336610865565b6040516103039190614a20565b34801561034f57600080fd5b5061033661035e366004613e03565b61086b565b34801561036f57600080fd5b5061033661037e366004613f13565b610899565b34801561038f57600080fd5b506102f66108b2565b3480156103a457600080fd5b506103366103b3366004613f13565b6108c1565b3480156103c457600080fd5b506102f66108d3565b3480156103d957600080fd5b5061031f6103e8366004613f13565b6108e2565b3480156103f957600080fd5b50610336610db3565b34801561040e57600080fd5b5061033661041d366004613f43565b610db9565b34801561042e57600080fd5b50610336610dd2565b34801561044357600080fd5b5061044c610dd8565b60405161030391906142e7565b34801561046557600080fd5b50610336610474366004613f13565b610de1565b34801561048557600080fd5b5061031f610494366004613dc3565b610de7565b3480156104a557600080fd5b506103366104b4366004613f43565b610eb3565b3480156104c557600080fd5b5061031f610ed1565b6103366104dc366004613d5f565b610f5a565b3480156104ed57600080fd5b5061044c6104fc366004613f13565b611760565b34801561050d57600080fd5b50610516611787565b604051610303919061423b565b34801561052f57600080fd5b5061031f61195d565b34801561054457600080fd5b50610336610553366004613f43565b6119a8565b34801561056457600080fd5b506102f66119c2565b34801561057957600080fd5b506103366119d1565b34801561058e57600080fd5b5061033661059d366004613d27565b6119d7565b3480156105ae57600080fd5b506103366105bd366004613f13565b6119fa565b3480156105ce57600080fd5b506103366105dd366004613cef565b611ac3565b3480156105ee57600080fd5b5061031f6105fd366004613dc3565b611ad5565b34801561060e57600080fd5b506102f6611b75565b34801561062357600080fd5b5061031f611b84565b34801561063857600080fd5b5061064c610647366004613f13565b611bd2565b604051610303989796959493929190614a85565b34801561066c57600080fd5b5061033661067b366004613f13565b611c8b565b34801561068c57600080fd5b5061031f61069b366004613e03565b611d4a565b3480156106ac57600080fd5b506103366106bb366004613f43565b611da5565b3480156106cc57600080fd5b506102f6611dac565b3480156106e157600080fd5b5061031f6106f0366004613cef565b611dc0565b34801561070157600080fd5b5061031f610710366004613e03565b611e80565b34801561072157600080fd5b5061031f610730366004613cef565b611eff565b34801561074157600080fd5b50610336610750366004613d27565b611f60565b610768610763366004613f87565b611f7d565b60405161030391906149b9565b34801561078157600080fd5b50610336610790366004613e03565b612557565b3480156107a157600080fd5b5061031f6107b0366004613e03565b612570565b6006546001600160a01b031681565b60025460ff16156107f05760405162461bcd60e51b81526004016107e790614812565b60405180910390fd5b85518751146108115760405162461bcd60e51b81526004016107e7906145c6565b60005b875181101561085b5761085288828151811061082c57fe5b602002602001015188838151811061084057fe5b60200260200101518888888888611f7d565b50600101610814565b5050505050505050565b60015481565b600d602052816000526040600020818154811061088457fe5b90600052602060002001600091509150505481565b6fffffffffffffffffffffffffffffffff81165b919050565b6004546001600160a01b031681565b60096020526000908152604090205481565b6005546001600160a01b031681565b60105460ff166109045760405162461bcd60e51b81526004016107e790614982565b6010805460ff191690556000818152600c60205260408120600481015490919061092d90611760565b905080156109875761093d6119c2565b6001600160a01b0316336001600160a01b0316148061096657506005546001600160a01b031633145b6109825760405162461bcd60e51b81526004016107e7906147db565b6109d6565b61098f6119c2565b6001600160a01b0316336001600160a01b031614806109ba575060058201546001600160a01b031633145b6109d65760405162461bcd60e51b81526004016107e7906146a2565b6109e382600401546125ff565b15610a005760405162461bcd60e51b81526004016107e7906146d9565b60078201546009830154600d840154600c8501546001600160a01b039384169390921691600091610a319190612607565b9050610a726040518060400160405280601e81526020017f63616e63656c206f726465723a2073726345546f6b656e20616d743d2564000081525082612649565b816001600160a01b0316836001600160a01b031614610af0578015610aeb576005850154610aad90849084906001600160a01b0316846126ab565b610aeb6040518060400160405280601281526020017f72656465656d207472616e73666572206f6b000000000000000000000000000081525061287c565b610b0a565b6005850154610b0a9084906001600160a01b0316836128db565b83610bac57600a85015460088601546001600160a01b039182166000818152600b6020908152604080832060068c0154871684529091529020549092909116908015610ba457816001600160a01b0316836001600160a01b03161415610b89576006880154610b84906001600160a01b03168483806129c9565b610ba4565b6006880154610ba4906001600160a01b031683858480612a10565b505050610c43565b6005546006860154600887015460078801546040517fb7d9d9d40000000000000000000000000000000000000000000000000000000081526001600160a01b039485169463b7d9d9d494610c10949082169389939183169216908890600401614197565b600060405180830381600087803b158015610c2a57600080fd5b505af1158015610c3e573d6000803e3d6000fd5b505050505b600485018054600190811791829055604080516101008082018352895482529289015460208083019190915260028a01548284015260038a015460608084019190915260808084019690965260058b01546001600160a01b0390811660a08086019190915260068d0154821660c08087019190915286516101208101885260078f01548416815260088f015484169581019590955260098e0154831696850196909652600a8d015490911691830191909152600b8b015495820195909552600c8a015494810194909452600d89015491840191909152600e88015460e084810191909152600f8901549284019290925290810191909152610d4390612a4c565b6008850154600786015460058701546040516001600160a01b039384169392831692909116907fa263a8e516fa313745abfe43252b015249ad3c987ae268d37531ce67364d7acf90610d96908b90614a20565b60405180910390a450506010805460ff1916600117905550505050565b60075481565b600f602052816000526040600020818154811061088457fe5b60085481565b60025460ff1681565b60801c90565b610def612dad565b6001600160a01b0316610e006119c2565b6001600160a01b031614610e265760405162461bcd60e51b81526004016107e790614591565b6000610e328484612db1565b6040517f24637ce000000000000000000000000000000000000000000000000000000000815290915073__$95c6f8e4159971276d72925c2dc3de45f7$__906324637ce090610e879084908690600401614a29565b60006040518083038186803b158015610e9f57600080fd5b505af415801561085b573d6000803e3d6000fd5b6000610ebe82610de1565b610ec784610899565b1790505b92915050565b610ed9612dad565b6001600160a01b0316610eea6119c2565b6001600160a01b031614610f105760405162461bcd60e51b81526004016107e790614591565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60025460009060ff1615610f805760405162461bcd60e51b81526004016107e790614812565b60105460ff16610fa25760405162461bcd60e51b81526004016107e790614982565b6010805460ff191690556001600160a01b038781169087161415610fd85760405162461bcd60e51b81526004016107e790614880565b6001600160a01b03871661100b57833410156110065760405162461bcd60e51b81526004016107e790614634565b611017565b61101787333087612df0565b6001600160a01b0387166000908152600a6020526040902054841161104e5760405162461bcd60e51b81526004016107e790614710565b50600180548082019091556000818152600c602052604090208181556005810180546001600160a01b031916331790556001600160a01b038616156110935785611095565b335b6006820180546001600160a01b0319166001600160a01b0392909216919091179055426003820155600481018390556000600d82018190556110d689612ed9565b6007830180546001600160a01b03808d166001600160a01b03199283168117909355600986018054918516919092168117909155600b850189905591925014611393576001600160a01b0389166111e157600080600360009054906101000a90046001600160a01b03166001600160a01b0316631249c58b346040518263ffffffff1660e01b815260040160408051808303818588803b15801561117957600080fd5b505af115801561118d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111b29190613f64565b91509150816000146111d65760405162461bcd60e51b81526004016107e79061448f565b600c8401555061138e565b60405163095ea7b360e01b81526001600160a01b038a169063095ea7b39061120f9084908a90600401614222565b602060405180830381600087803b15801561122957600080fd5b505af115801561123d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112619190613ef7565b50600080826001600160a01b031663a0712d68896040518263ffffffff1660e01b81526004016112919190614a20565b6040805180830381600087803b1580156112aa57600080fd5b505af11580156112be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e29190613f64565b60405163095ea7b360e01b815291935091506001600160a01b0384169063095ea7b390611316908690600090600401614222565b602060405180830381600087803b15801561133057600080fd5b505af1158015611344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113689190613ef7565b5081156113875760405162461bcd60e51b81526004016107e79061448f565b600c840155505b61139b565b600c82018690555b6008820180546001600160a01b0319166001600160a01b038a1617905560006113c389612ed9565b600a840180546001600160a01b038084166001600160a01b03199092168217909255600e86018990559192508b811684821614908b16909114146114195760405162461bcd60e51b81526004016107e7906148b7565b6005546001600160a01b03163314156114da5761143585611760565b6114515760405162461bcd60e51b81526004016107e790614849565b896001600160a01b0316826001600160a01b0316146114825760405162461bcd60e51b81526004016107e7906144fd565b6001600160a01b0388163314156114ab5760405162461bcd60e51b81526004016107e7906144c6565b600a8301546001600160a01b038a81169116146114da5760405162461bcd60e51b81526004016107e790614458565b6114e48282613105565b6002840155604051636eb1769f60e11b81527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906001600160a01b0383169063dd62ed3e906115399030908690600401614130565b60206040518083038186803b15801561155157600080fd5b505afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115899190613f2b565b10156116135760405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906115bf90849060001990600401614222565b602060405180830381600087803b1580156115d957600080fd5b505af11580156115ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116119190613ef7565b505b604051636eb1769f60e11b81527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906001600160a01b0384169063dd62ed3e906116639030908790600401614130565b60206040518083038186803b15801561167b57600080fd5b505afa15801561168f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b39190613f2b565b101561173d5760405163095ea7b360e01b81526001600160a01b0383169063095ea7b3906116e990849060001990600401614222565b602060405180830381600087803b15801561170357600080fd5b505af1158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190613ef7565b505b61174683613139565b50506010805460ff19166001179055509695505050505050565b7f800000000000000000000000000000000000000000000000000000000000000016151590565b606060008060005b6001548110156117c8576000818152600c60205260409020600401546117b4816125ff565b6117bf576001909301925b5060010161178f565b508167ffffffffffffffff811180156117e057600080fd5b5060405190808252806020026020018201604052801561181a57816020015b611807613afb565b8152602001906001900390816117ff5790505b50925060005b60015481101561195757611832613afb565b506000818152600c6020818152604092839020835161010080820186528254825260018301548285015260028301548287015260038301546060808401919091526004840154608080850191825260058601546001600160a01b0390811660a0808801919091526006880154821660c0808901919091528b5161012081018d5260078a01548416815260088a015484169a81019a909a52600989015483169b8a019b909b52600a88015490911693880193909352600b860154908701529584015490850152600d83015495840195909552600e82015460e084810191909152600f90920154948301949094528301525161192b906125ff565b61194e578085848151811061193c57fe5b60209081029190910101526001909201915b50600101611820565b50505090565b611965612dad565b6001600160a01b03166119766119c2565b6001600160a01b03161461199c5760405162461bcd60e51b81526004016107e790614591565b6002805460ff19169055565b6fffffffffffffffffffffffffffffffff19919091161790565b6000546001600160a01b031690565b61271081565b60006119f36119e584613272565b6119ee84613272565b613105565b9392505050565b60008181526009602052604080822090517f652bccd3000000000000000000000000000000000000000000000000000000008152829173__$95c6f8e4159971276d72925c2dc3de45f7$__9163652bccd391611a5891600401614a20565b60206040518083038186803b158015611a7057600080fd5b505af4158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa89190613f2b565b905080611ab95750506007546108ad565b6000190192915050565b600a6020526000908152604090205481565b611add612dad565b6001600160a01b0316611aee6119c2565b6001600160a01b031614611b145760405162461bcd60e51b81526004016107e790614591565b6000611b208484612db1565b6040517f32b914bf00000000000000000000000000000000000000000000000000000000815290915073__$95c6f8e4159971276d72925c2dc3de45f7$__906332b914bf90610e879084908690600401614a29565b6003546001600160a01b031681565b611b8c612dad565b6001600160a01b0316611b9d6119c2565b6001600160a01b031614611bc35760405162461bcd60e51b81526004016107e790614591565b6002805460ff19166001179055565b600c6020818152600092835260409283902080546001820154600283015460038401546004850154600586015460068701548a5161012081018c5260078901546001600160a01b03908116825260088a015481169a82019a909a5260098901548a169b81019b909b52600a880154891660608c0152600b88015460808c01529887015460a08b0152600d87015460c08b0152600e87015460e08b0152600f909601546101008a0152939792969195909481169291169088565b60008181526009602052604080822090517fa645cb6d000000000000000000000000000000000000000000000000000000008152829173__$95c6f8e4159971276d72925c2dc3de45f7$__9163a645cb6d91611ce991600401614a20565b60206040518083038186803b158015611d0157600080fd5b505af4158015611d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d399190613f2b565b905080611ab95750506008546108ad565b611d52612dad565b6001600160a01b0316611d636119c2565b6001600160a01b031614611d895760405162461bcd60e51b81526004016107e790614591565b6001600160a01b039091166000908152600a6020526040902055565b60801b1790565b60025461010090046001600160a01b031681565b611dc8612dad565b6001600160a01b0316611dd96119c2565b6001600160a01b031614611dff5760405162461bcd60e51b81526004016107e790614591565b6001600160a01b038116611e255760405162461bcd60e51b81526004016107e79061438d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600b6020908152604080832033845290915290205480611ec15760405162461bcd60e51b81526004016107e7906145fd565b81611ece57809150611eee565b81811015611eee5760405162461bcd60e51b81526004016107e7906148ee565b611efa338483856129c9565b505050565b611f07612dad565b6001600160a01b0316611f186119c2565b6001600160a01b031614611f3e5760405162461bcd60e51b81526004016107e790614591565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600b60209081526000928352604080842090915290825290205481565b611f85613b57565b60025460ff1615611fa85760405162461bcd60e51b81526004016107e790614812565b60105460ff16611fca5760405162461bcd60e51b81526004016107e790614982565b6010805460ff191690556000888152600c60205260409020600481015460011615611ff5575061253f565b611ffd613ba5565b50604080516101208101825260078301546001600160a01b0390811682526008840154811660208301526009840154811692820192909252600a83015482166060820152600b8301546080820152600c83015460a0820152600d83015460c0820152600e83015460e0820152600f83015461010082015290881661207f573397505b86151583526020830189905260c081015160a08201516000916120a29190612607565b9050808a11156120d157866120c95760405162461bcd60e51b81526004016107e7906147a4565b602084018190525b506120e18184846002015461334e565b60608101516040820151881561210a576121058360000151828c88608001516126ab565b612119565b612119818b87608001516128db565b85156122f4576040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906370a082319061216790309060040161411c565b60206040518083038186803b15801561217f57600080fd5b505afa158015612193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b79190613f2b565b608087015160e08801516040517f226dc8820000000000000000000000000000000000000000000000000000000081529293506001600160a01b038e169263226dc8829261220d9233928e908e9060040161414a565b600060405180830381600087803b15801561222757600080fd5b505af115801561223b573d6000803e3d6000fd5b5050505060006122c782856001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612271919061411c565b60206040518083038186803b15801561228957600080fd5b505afa15801561229d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c19190613f2b565b90612607565b90508660e001518110156122ed5760405162461bcd60e51b81526004016107e790614421565b5050612467565b881561245757600083602001519050612314813330896101000151612df0565b61010086015160405163095ea7b360e01b81526001600160a01b0383169163095ea7b391612346918791600401614222565b602060405180830381600087803b15801561236057600080fd5b505af1158015612374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123989190613ef7565b506101008601516040517fa0712d680000000000000000000000000000000000000000000000000000000081526000916001600160a01b0386169163a0712d68916123e591600401614a20565b6040805180830381600087803b1580156123fe57600080fd5b505af1158015612412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124369190613f64565b50905080156122ed5760405162461bcd60e51b81526004016107e79061448f565b6124678233308860e00151612df0565b6040850151156124905760065460408601516124909183916001600160a01b03909116906128db565b6060850151156124b95760065460608601516124b99184916001600160a01b03909116906128db565b6124cc8486602001518760c001516135f3565b336001600160a01b03168460050160009054906101000a90046001600160a01b03166001600160a01b03167fd00ede2e0292fd63d9ba8b4b572003009a04bcdf39cd75ac9684433d20de7ebf8e88602001518960e0015160405161253293929190614a54565b60405180910390a3505050505b6010805460ff19166001179055979650505050505050565b600e602052816000526040600020818154811061088457fe5b600061257b83613272565b6001600160a01b0381166000908152600b60209081526040808320338452909152902054909150806125bf5760405162461bcd60e51b81526004016107e7906145fd565b826125cc578092506125ec565b828110156125ec5760405162461bcd60e51b81526004016107e7906148ee565b6125f93385848487612a10565b50505050565b600116151590565b60006119f383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506138e7565b6126a7828260405160240161265f929190614305565b60408051601f198184030181529190526020810180516001600160e01b03167f9710a9d000000000000000000000000000000000000000000000000000000000179052613913565b5050565b6126ea6040518060400160405280600a81526020017f72656465656d416d743a0000000000000000000000000000000000000000000081525082612649565b600080846001600160a01b031663db006a75846040518263ffffffff1660e01b81526004016127199190614a20565b606060405180830381600087803b15801561273357600080fd5b505af1158015612747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276b9190614001565b9250509150816000146127905760405162461bcd60e51b81526004016107e79061466b565b6001600160a01b0386166127ad576127a88482613934565b612874565b6128696040518060400160405280601181526020017f72656465656d20746f6b656e20616d743a0000000000000000000000000000008152508483896001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612814919061411c565b60206040518083038186803b15801561282c57600080fd5b505afa158015612840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128649190613f2b565b6139c1565b6128748685836128db565b505050505050565b6128d88160405160240161289091906142f2565b60408051601f198184030181529190526020810180516001600160e01b03167f41304fac00000000000000000000000000000000000000000000000000000000179052613913565b50565b60006060846001600160a01b031663a9059cbb8585604051602401612901929190614222565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161293a9190614100565b6000604051808303816000865af19150503d8060008114612977576040519150601f19603f3d011682016040523d82523d6000602084013e61297c565b606091505b50915091508180156129a65750805115806129a65750808060200190518101906129a69190613ef7565b6129c25760405162461bcd60e51b81526004016107e790614356565b5050505050565b6129d48385836128db565b6129de8282612607565b6001600160a01b039384166000908152600b602090815260408083209790961682529590955292909320919091555050565b612a1a8282612607565b6001600160a01b038085166000908152600b60209081526040808320938a16835292905220556129c2848487846126ab565b6000612a5b8260200151610899565b90506000612a6c8360200151610de1565b905060008360a001519050600080612a878660800151611760565b90508015612b9b5760c08601516001600160a01b0381166000908152600d602052604090205490935060001901848114612b5e576001600160a01b0384166000908152600d60205260409020805482908110612adf57fe5b9060005260206000200154925082600d6000866001600160a01b03166001600160a01b031681526020019081526020016000208681548110612b1d57fe5b9060005260206000200181905550612b4b600c60008581526020019081526020016000206001015486610eb3565b6000848152600c60205260409020600101555b6001600160a01b0384166000908152600d60205260409020805480612b7f57fe5b6001900381819060005260206000200160009055905550612c9b565b6001600160a01b0383166000908152600e602052604090205460001901848114612c62576001600160a01b0384166000908152600e60205260409020805482908110612be357fe5b9060005260206000200154925082600e6000866001600160a01b03166001600160a01b031681526020019081526020016000208681548110612c2157fe5b9060005260206000200181905550612c4f600c60008581526020019081526020016000206001015486610eb3565b6000848152600c60205260409020600101555b6001600160a01b0384166000908152600e60205260409020805480612c8357fe5b60019003818190600052602060002001600090559055505b6040808701516000908152600f60205220546001108015612cd157506040808701516000908152600f6020522054600019018514155b15612d7557604080870180516000908152600f6020528281209151815291909120548154600019909101908110612d0457fe5b9060005260206000200154915081600f6000886040015181526020019081526020016000208681548110612d3457fe5b9060005260206000200181905550612d62600c600084815260200190815260200160002060010154866119a8565b6000838152600c60205260409020600101555b6040808701516000908152600f60205220805480612d8f57fe5b60019003818190600052602060002001600090559055505050505050565b3390565b600080612dbd84613272565b90506000612dca84613272565b90506000612dd88383613105565b60009081526009602052604090209695505050505050565b60006060856001600160a01b03166323b872dd868686604051602401612e18939291906141fe565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612e519190614100565b6000604051808303816000865af19150503d8060008114612e8e576040519150601f19603f3d011682016040523d82523d6000602084013e612e93565b606091505b5091509150818015612ebd575080511580612ebd575080806020019051810190612ebd9190613ef7565b6128745760405162461bcd60e51b81526004016107e790614925565b60006001600160a01b0382161580612f0357506002546001600160a01b0383811661010090920416145b15612f1a57506003546001600160a01b03166108ad565b6004805460405163714bca1f60e11b81526000926001600160a01b039092169163e297943e91612f4c9187910161411c565b60206040518083038186803b158015612f6457600080fd5b505afa158015612f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9c9190613d0b565b90506001600160a01b038116610ecb57600480546040517fb8d7b6690000000000000000000000000000000000000000000000000000000081526000926001600160a01b039092169163b8d7b66991612ff79188910161411c565b60206040518083038186803b15801561300f57600080fd5b505afa158015613023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130479190613d0b565b90506001600160a01b038116156130625783925050506108ad565b600480546040517f26c7bd930000000000000000000000000000000000000000000000000000000081526001600160a01b03909116916326c7bd93916130aa9188910161411c565b602060405180830381600087803b1580156130c457600080fd5b505af11580156130d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fc9190613d0b565b925050506108ad565b6000828260405160200161311a9291906140d9565b60408051601f1981840301815291905280516020909101209392505050565b80546004820154600061314b82611760565b600585015490915060009081906001600160a01b0316831561319f575060068601546001600160a01b03166000818152600d60209081526040822080546001810182559083529120810187905592506131ce565b6001600160a01b0381166000908152600e60209081526040822080546001810182559083529120810187905592505b60028701546000908152600f60209081526040822080546001810182559083529120810187905591506132018284611da5565b600188015560088701546007880154600b890154600e8a01546040516001600160a01b0394851694938416938616927fc8419e5c94126588374d91d4332ef5d56223abb9c42776b667e899ccff2c5f2792613261928d9291908d90614a6a565b60405180910390a450505050505050565b60006001600160a01b038216158061329c57506002546001600160a01b0383811661010090920416145b156132b357506003546001600160a01b03166108ad565b6004805460405163714bca1f60e11b81526000926001600160a01b039092169163e297943e916132e59187910161411c565b60206040518083038186803b1580156132fd57600080fd5b505afa158015613311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133359190613d0b565b90506001600160a01b038116610ecb57829150506108ad565b60208201516040517f78cbe05100000000000000000000000000000000000000000000000000000000815273__$ede4fa3877902dc4fe1d8d42678939ceaa$__906378cbe051906133a59087908590600401614a37565b60206040518083038186803b1580156133bd57600080fd5b505af41580156133d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f59190613f2b565b60e084015261341961271061341361340c85611c8b565b8490613a23565b90613a5d565b604084015261343061271061341361340c856119fa565b60608401526040830151613445908290612607565b6080840152606083015160e084015161345d91612607565b60c08401528251156125f95760408085015190517f0bbc1cea00000000000000000000000000000000000000000000000000000000815260009173__$ede4fa3877902dc4fe1d8d42678939ceaa$__91630bbc1cea916134bf9160040161411c565b60206040518083038186803b1580156134d757600080fd5b505af41580156134eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061350f9190613f2b565b9050600073__$ede4fa3877902dc4fe1d8d42678939ceaa$__630bbc1cea87606001516040518263ffffffff1660e01b815260040161354e919061411c565b60206040518083038186803b15801561356657600080fd5b505af415801561357a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359e9190613f2b565b90506135c3670de0b6b3a7640000613413848860800151613a2390919063ffffffff16565b60a086015260e08501516135e590670de0b6b3a7640000906134139084613a23565b610100860152505050505050565b60068301546009840154600a85015460048601546001600160a01b0393841693928316929091169061362490611760565b156136c9576005546136419082906001600160a01b0316866128db565b6005546040517f1889ae210000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631889ae2190613692908690869086908a908c906004016141ca565b600060405180830381600087803b1580156136ac57600080fd5b505af11580156136c0573d6000803e3d6000fd5b505050506136f5565b6001600160a01b038082166000908152600b602090815260408083209387168352929052208054850190555b600d8601546137049086613a9f565b600d870155600f8601546137189085613a9f565b600f870155600c860154600d870154106128745760018660040160008282541792505081905550612874866040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016006820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160078201604051806101200160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152505081525050612a4c565b6000818484111561390b5760405162461bcd60e51b81526004016107e791906142f2565b505050900390565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604080516000808252602082019092526001600160a01b03841690839060405161395e9190614100565b60006040518083038185875af1925050503d806000811461399b576040519150601f19603f3d011682016040523d82523d6000602084013e6139a0565b606091505b5050905080611efa5760405162461bcd60e51b81526004016107e790614747565b6125f9848484846040516024016139db9493929190614327565b60408051601f198184030181529190526020810180516001600160e01b03167f08ee566600000000000000000000000000000000000000000000000000000000179052613913565b600082613a3257506000610ecb565b82820282848281613a3f57fe5b04146119f35760405162461bcd60e51b81526004016107e790614534565b60006119f383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613ac4565b6000828201838110156119f35760405162461bcd60e51b81526004016107e7906143ea565b60008183613ae55760405162461bcd60e51b81526004016107e791906142f2565b506000838581613af157fe5b0495945050505050565b604051806101000160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001613b52613ba5565b905290565b60405180610120016040528060001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b600082601f830112613c25578081fd5b813567ffffffffffffffff80821115613c3c578283fd5b602080830260405182828201018181108582111715613c59578687fd5b604052848152945081850192508582018187018301881015613c7a57600080fd5b600091505b84821015613c9d578035845292820192600191909101908201613c7f565b505050505092915050565b60008083601f840112613cb9578182fd5b50813567ffffffffffffffff811115613cd0578182fd5b602083019150836020828501011115613ce857600080fd5b9250929050565b600060208284031215613d00578081fd5b81356119f381614b06565b600060208284031215613d1c578081fd5b81516119f381614b06565b60008060408385031215613d39578081fd5b8235613d4481614b06565b91506020830135613d5481614b06565b809150509250929050565b60008060008060008060c08789031215613d77578182fd5b8635613d8281614b06565b95506020870135613d9281614b06565b94506040870135613da281614b06565b959894975094956060810135955060808101359460a0909101359350915050565b600080600060608486031215613dd7578283fd5b8335613de281614b06565b92506020840135613df281614b06565b929592945050506040919091013590565b60008060408385031215613e15578182fd5b8235613e2081614b06565b946020939093013593505050565b600080600080600080600060c0888a031215613e48578081fd5b873567ffffffffffffffff80821115613e5f578283fd5b613e6b8b838c01613c15565b985060208a0135915080821115613e80578283fd5b613e8c8b838c01613c15565b975060408a01359150613e9e82614b06565b909550606089013590613eb082614b1b565b909450608089013590613ec282614b1b565b90935060a08901359080821115613ed7578283fd5b50613ee48a828b01613ca8565b989b979a50959850939692959293505050565b600060208284031215613f08578081fd5b81516119f381614b1b565b600060208284031215613f24578081fd5b5035919050565b600060208284031215613f3c578081fd5b5051919050565b60008060408385031215613f55578182fd5b50508035926020909101359150565b60008060408385031215613f76578182fd5b505080516020909101519092909150565b600080600080600080600060c0888a031215613fa1578081fd5b87359650602088013595506040880135613fba81614b06565b94506060880135613fca81614b1b565b93506080880135613fda81614b1b565b925060a088013567ffffffffffffffff811115613ff5578182fd5b613ee48a828b01613ca8565b600080600060608486031215614015578081fd5b8351925060208401519150604084015190509250925092565b6001600160a01b03169052565b60008151808452614053816020860160208601614ada565b601f01601f19169290920160200192915050565b6001600160a01b038082511683528060208301511660208401528060408301511660408401525060608101516140a0606084018261402e565b506080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b60008251614112818460208701614ada565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b038716825285602083015284604083015260806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b6001600160a01b039586168152938516602085015291841660408401529092166060820152608081019190915260a00190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b828110156142da5781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201516001600160a01b03169086015260c0808201516142af8288018261402e565b505060e090810151906142c486820183614067565b5050610200939093019290850190600101614258565b5091979650505050505050565b901515815260200190565b6000602082526119f3602083018461403b565b600060408252614318604083018561403b565b90508260208301529392505050565b60006080825261433a608083018761403b565b6020830195909552506040810192909252606090910152919050565b6020808252601f908201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600a908201527f6e6f7420656e6f75676800000000000000000000000000000000000000000000604082015260600190565b60208082526015908201527f646573742073686f756c642062652065746f6b656e0000000000000000000000604082015260600190565b6020808252600b908201527f6d696e74206661696c6564000000000000000000000000000000000000000000604082015260600190565b6020808252601b908201527f746f2073686f756c642062652075736572277320616464726573730000000000604082015260600190565b60208082526014908201527f7372632073686f756c642062652065746f6b656e000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201527f696e76616c696420706172616d00000000000000000000000000000000000000604082015260600190565b60208082526008908201527f6e6f206173736574000000000000000000000000000000000000000000000000604082015260600190565b60208082526013908201527f6e6f7420656e6f75676820616d6f756e74496e00000000000000000000000000604082015260600190565b6020808252600d908201527f72656465656d206661696c656400000000000000000000000000000000000000604082015260600190565b60208082526014908201527f63616e63656c4f726465723a206e6f2061757468000000000000000000000000604082015260600190565b60208082526015908201527f6f7264657220686173206265656e20636c6f7365640000000000000000000000604082015260600190565b60208082526014908201527f6c657373207468616e206d696e20616d6f756e74000000000000000000000000604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201527f4c45440000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6e6f7420656e6f75676820746f2066756c66696c000000000000000000000000604082015260600190565b6020808252601a908201527f63616e63656c4d617267696e4f726465723a206e6f2061757468000000000000604082015260600190565b60208082526011908201527f6f7264657220626f6f6b20636c6f736564000000000000000000000000000000604082015260600190565b60208082526015908201527f666c61672073686f756c64206265206d617267696e0000000000000000000000604082015260600190565b6020808252600f908201527f6964656e746963616c20746f6b656e0000000000000000000000000000000000604082015260600190565b60208082526014908201527f626f746820746f6b656e206f722065746f6b656e000000000000000000000000604082015260600190565b60208082526010908201527f6e6f7420656e6f75676820617373657400000000000000000000000000000000604082015260600190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160408201527f494c454400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000610120820190508251151582526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b90815260200190565b918252602082015260400190565b6101408101614a468285614067565b826101208301529392505050565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b888152602081018890526040810187905260608101869052608081018590526001600160a01b0384811660a0830152831660c08201526102008101614acd60e0830184614067565b9998505050505050505050565b60005b83811015614af5578181015183820152602001614add565b838111156125f95750506000910152565b6001600160a01b03811681146128d857600080fd5b80151581146128d857600080fdfea2646970667358221220b1c060970fc478deaca4dd43a5a7b0db43fda95914623dfbc837c4a279bab58b64736f6c634300060c0033",
  "libraries": {
    "OBPriceLogic": "0x3fDcC60290751EB26024244b0ed7Fca1B2CAe088",
    "OBPairConfig": "0x9738Cd280C42f219539d1EA4C99093d460Ef46b8"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fulfilOrder(uint256,uint256,address,bool,bool,bytes)": {
        "params": {
          "amtToTaken": "成交多少量",
          "data": "flashloan 合约执行代码",
          "isToken": "用户输入 token 且得到 token, 调用者须 approve 且确保 srcEToken 的 cash 足够兑付",
          "orderId": "order id",
          "partialFill": "是否允许部分成交(正好此时部分被其他人taken)",
          "to": "合约地址或者 msg.sender"
        },
        "returns": {
          "fulFilAmt": "(买到的币数量, 付出的币数量)"
        }
      },
      "getMakerFeeRate(uint256)": {
        "details": "get maker fee rate"
      },
      "getTakerFeeRate(uint256)": {
        "details": "get taker fee rate"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFeeTo(address)": {
        "details": "设置 feeTo 地址"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10460,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7604,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "orderId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7606,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "closed",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 7608,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "wETH",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7610,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "cETH",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7612,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "ctokenFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7614,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "marginAddr",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7616,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "feeTo",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7619,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "defaultFeeMaker",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7622,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "defaultFeeTaker",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7626,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "pairFeeRate",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(OBPairConfigMap)7008_storage)"
      },
      {
        "astId": 7630,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "minAmounts",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7636,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "balanceOf",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7640,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "orders",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(OrderItem)7005_storage)"
      },
      {
        "astId": 7645,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "marginOrders",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7650,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "addressOrders",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7655,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "pairOrders",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10567,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "_notEntered",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(OBPairConfigMap)7008_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.OBPairConfigMap)",
        "numberOfBytes": "32",
        "value": "t_struct(OBPairConfigMap)7008_storage"
      },
      "t_mapping(t_uint256,t_struct(OrderItem)7005_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.OrderItem)",
        "numberOfBytes": "32",
        "value": "t_struct(OrderItem)7005_storage"
      },
      "t_struct(OBPairConfigMap)7008_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.OBPairConfigMap",
        "members": [
          {
            "astId": 7007,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OrderItem)7005_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.OrderItem",
        "members": [
          {
            "astId": 6990,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "orderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6992,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "pairAddrIdx",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6994,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "pair",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6996,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6998,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "flag",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7000,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "owner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 7002,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "to",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 7004,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "tokenAmt",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(TokenAmount)6988_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(TokenAmount)6988_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.TokenAmount",
        "members": [
          {
            "astId": 6971,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "srcToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6973,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "destToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6975,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "srcEToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6977,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "destEToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6979,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "amountIn",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6981,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "amountInMint",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6983,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "fulfiled",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6985,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "guaranteeAmountOut",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6987,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "destFulfiled",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}