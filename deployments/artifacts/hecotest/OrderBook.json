{
  "address": "0xA099bddBe031190272B612DA039113e8B6Cc5d4C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ctokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_margin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "CancelOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "CreateOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "FulFilOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "addrIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "adminTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "guaranteeAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiredAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ctokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtToTaken",
          "type": "uint256"
        }
      ],
      "name": "fulfilOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pairAddrIdx",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pair",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flag",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "srcToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "destToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "fulfiled",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "guaranteeAmountOut",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OBStorage.TokenAmount",
              "name": "tokenAmt",
              "type": "tuple"
            }
          ],
          "internalType": "struct OBStorage.OrderItem[]",
          "name": "allOrders",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "getExpiredAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "isMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marginOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "addrIdx",
          "type": "uint256"
        }
      ],
      "name": "maskAddrPairIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expired",
          "type": "uint256"
        }
      ],
      "name": "maskTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBuyAmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSellAmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairAddrIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pair",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "destToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fulfiled",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "guaranteeAmountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct OBStorage.TokenAmount",
          "name": "tokenAmt",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pair",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "pairIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "setMinOrderAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapMininng",
          "type": "address"
        }
      ],
      "name": "setSwapMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapMining",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "addrIdx",
          "type": "uint256"
        }
      ],
      "name": "updateAddrIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairIdx",
          "type": "uint256"
        }
      ],
      "name": "updatePairIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc51586b9e8f1b71af1b109193a74d36f314fab707a60706bd7c40eba5e4c6de",
  "receipt": {
    "to": null,
    "from": "0x49d531908840FDDaC744543d57CB21B91c3D9094",
    "contractAddress": "0xA099bddBe031190272B612DA039113e8B6Cc5d4C",
    "transactionIndex": 15,
    "gasUsed": "2508886",
    "logsBloom": "0x
    "blockHash": "0x620f6d01d1bca8117d00391ffdbd015647fc4aa12f31f46fc3af6bcd191edb1c",
    "transactionHash": "0xcc51586b9e8f1b71af1b109193a74d36f314fab707a60706bd7c40eba5e4c6de",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 6020488,
        "transactionHash": "0xcc51586b9e8f1b71af1b109193a74d36f314fab707a60706bd7c40eba5e4c6de",
        "address": "0xA099bddBe031190272B612DA039113e8B6Cc5d4C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049d531908840fddac744543d57cb21b91c3d9094"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0x620f6d01d1bca8117d00391ffdbd015647fc4aa12f31f46fc3af6bcd191edb1c"
      }
    ],
    "blockNumber": 6020488,
    "cumulativeGasUsed": "7713976",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0826d36cecA6240B6A894796C3c3F90030CE6fB8",
    "0xC65d5ea738F466FEb518b6079732C7b03eE04CF0",
    "0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "5b9f129f937963cb2172090e48a126d9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ctokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_margin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"CreateOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"FulFilOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"addrIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"adminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtToTaken\",\"type\":\"uint256\"}],\"name\":\"fulfilOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAddrIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfiled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct OBStorage.TokenAmount\",\"name\":\"tokenAmt\",\"type\":\"tuple\"}],\"internalType\":\"struct OBStorage.OrderItem[]\",\"name\":\"allOrders\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"getExpiredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"isMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marginOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addrIdx\",\"type\":\"uint256\"}],\"name\":\"maskAddrPairIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expired\",\"type\":\"uint256\"}],\"name\":\"maskTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSellAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAddrIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfiled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct OBStorage.TokenAmount\",\"name\":\"tokenAmt\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pairIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setMinOrderAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapMininng\",\"type\":\"address\"}],\"name\":\"setSwapMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMining\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addrIdx\",\"type\":\"uint256\"}],\"name\":\"updateAddrIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairIdx\",\"type\":\"uint256\"}],\"name\":\"updatePairIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/orderbook/Orderbook.sol\":\"OrderBook\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/swap/orderbook/Orderbook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"../aggressive/Ownable.sol\\\";\\r\\n// import \\\"../aggressive/SafeMath.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface ISwapMining {\\r\\n    function swap(address account, address input, address output, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n// \\u5b58\\u50a8\\r\\ncontract OBStorage is Ownable {\\r\\n    uint private constant _PAIR_INDEX_MASK = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;   // 128 bit\\r\\n    uint private constant _ADDR_INDEX_MASK = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;   // 128 bit\\r\\n    uint private constant _MARGIN_MASK     = 0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n    uint private constant _EXPIRED_AT_MASK = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;   // 128 bit\\r\\n    uint private constant _ADDR_INDEX_OFFSET = 128;\\r\\n    uint private constant _EXPIRED_AT_OFFSET = 128;\\r\\n\\r\\n    struct TokenAmount {\\r\\n        address srcToken;\\r\\n        address destToken;\\r\\n        uint amountIn;           // \\u521d\\u59cb\\u6302\\u5355\\u6570\\u91cf\\r\\n        uint fulfiled;         // \\u90e8\\u5206\\u6210\\u4ea4\\u65f6 \\u5269\\u4f59\\u5f85\\u6210\\u4ea4\\u91d1\\u989d\\r\\n        uint guaranteeAmountOut;       // \\u6700\\u4f4e\\u5151\\u6362\\u540e\\u8981\\u6c42\\u5f97\\u5230\\u7684\\u6570\\u91cf\\r\\n        // uint guaranteeAmountOutLeft;   // \\u5151\\u6362\\u4e00\\u90e8\\u5206\\u540e, \\u5269\\u4e0b\\u7684\\u9700\\u8981\\u5151\\u6362\\u5f97\\u5230\\u7684\\u6570\\u91cf\\r\\n    }\\r\\n\\r\\n    struct OrderItem {\\r\\n      uint orderId;\\r\\n      uint pairAddrIdx;        // pairIdx | addrIdx\\r\\n      address owner;\\r\\n      address to;              // \\u5151\\u6362\\u5f97\\u5230\\u7684token\\u53d1\\u9001\\u5730\\u5740 \\u672a\\u4f7f\\u7528\\r\\n      uint pair;               // hash(srcToken, destToken)\\r\\n      uint timestamp;          // \\u8fc7\\u671f\\u65f6\\u95f4 | \\u6302\\u5355\\u65f6\\u95f4 \\r\\n      uint flag;\\r\\n      TokenAmount tokenAmt;\\r\\n      // bool margin;             // \\u662f\\u5426\\u662f\\u6760\\u6746\\u5408\\u7ea6\\u7684\\u6302\\u5355\\r\\n    }\\r\\n\\r\\n    // \\u8ba1\\u7b97\\u4ef7\\u683c\\u7684\\u4e58\\u6570 price = token0 * priceRatio / token1, such as 1e30\\r\\n    uint public priceRatio = 1e30; \\r\\n\\r\\n    uint public orderId;   // order Id \\u81ea\\u589e\\r\\n\\r\\n    // \\u5173\\u95ed\\u8ba2\\u5355\\u8584\\u529f\\u80fd\\r\\n    bool public closed;\\r\\n    address public router;\\r\\n    address public wETH;\\r\\n    address public ctokenFactory;\\r\\n    address public marginAddr;  // \\u4ee3\\u6301\\u5408\\u7ea6\\r\\n    address public swapMining;  // \\u4ea4\\u6613\\u6316\\u77ff\\r\\n\\r\\n    uint public minBuyAmt;\\r\\n    uint public minSellAmt;\\r\\n    uint public feeRate = 30; // \\u5343\\u5206\\u4e4b\\u4e09\\r\\n\\r\\n    // token \\u6700\\u4f4e\\u6302\\u5355\\u91cf\\r\\n    mapping(address => uint) public minAmounts;\\r\\n    mapping(address => mapping(address => uint)) public balanceOf;   // \\u4ee3\\u6301\\u7528\\u6237\\u7684\\u5e01\\r\\n\\r\\n    // orders\\r\\n    mapping (uint => OrderItem) public orders;\\r\\n    mapping (address => uint[]) public marginOrders;   // \\u6760\\u6746\\u5408\\u7ea6\\u4ee3\\u6301\\u7684\\u6302\\u5355\\r\\n    mapping (address => uint[]) public addressOrders;\\r\\n    mapping (uint => uint[]) public pairOrders;\\r\\n\\r\\n    function pairIndex(uint id) public pure returns(uint) {\\r\\n        return (id & _PAIR_INDEX_MASK);\\r\\n    }\\r\\n\\r\\n    function addrIndex(uint id) public pure returns(uint) {\\r\\n        return (id & _ADDR_INDEX_MASK) >> _ADDR_INDEX_OFFSET;\\r\\n    }\\r\\n\\r\\n    // pairIdx \\u4e0d\\u53d8, addrIdx \\u66f4\\u65b0\\r\\n    function updateAddrIdx(uint idx, uint addrIdx) public pure returns(uint) {\\r\\n      return pairIndex(idx) | addrIndex(addrIdx);\\r\\n    }\\r\\n\\r\\n    // pairIdx \\u4e0d\\u53d8, addrIdx \\u66f4\\u65b0\\r\\n    function updatePairIdx(uint idx, uint pairIdx) public pure returns(uint) {\\r\\n      return (idx & _ADDR_INDEX_MASK) | pairIdx;\\r\\n    }\\r\\n\\r\\n    function maskAddrPairIndex(uint pairIdx, uint addrIdx) public pure returns (uint) {\\r\\n        return (pairIdx) | (addrIdx << _ADDR_INDEX_OFFSET);\\r\\n    }\\r\\n\\r\\n    function isMargin(uint flag) public pure returns (bool) {\\r\\n      return (flag & _MARGIN_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    function getExpiredAt(uint ts) public pure returns (uint) {\\r\\n      return (ts & _EXPIRED_AT_MASK) >> _EXPIRED_AT_OFFSET;\\r\\n    }\\r\\n\\r\\n    function maskTimestamp(uint ts, uint expired) public pure returns (uint) {\\r\\n      return (ts) | (expired << _EXPIRED_AT_OFFSET);\\r\\n    }\\r\\n    \\r\\n    function setSwapMining(address _swapMininng) public onlyOwner {\\r\\n        swapMining = _swapMininng;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IWHT {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\\r\\ninterface IMarginHolding {\\r\\n  // owner: \\u6760\\u6746\\u7528\\u6237\\r\\n  // fulfiled: \\u4e70\\u5230\\u7684token\\u6570\\u91cf\\r\\n  // amt: \\u5356\\u51fa\\u7684token\\u6570\\u91cf\\r\\n  function onFulfiled(address owner, uint fulfiled, uint amt) external;\\r\\n}\\r\\n\\r\\ninterface IOrderBook {\\r\\n    event CreateOrder(address indexed owner,\\r\\n          address indexed srcToken,\\r\\n          address indexed destToken,\\r\\n          uint orderId,\\r\\n          uint amountIn,\\r\\n          uint minAmountOut,\\r\\n          uint flag);\\r\\n\\r\\n    event FulFilOrder(address indexed maker,\\r\\n          address indexed taker,\\r\\n          uint orderId,\\r\\n          uint amt,\\r\\n          uint amtOut,\\r\\n          uint remaining);\\r\\n\\r\\n    event CancelOrder(address indexed owner, uint orderId);\\r\\n}\\r\\n\\r\\ncontract ReentrancyGuard {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor () internal {\\r\\n        // Storing an initial non-zero value makes deployment a bit more\\r\\n        // expensive, but in exchange the refund on every call to nonReentrant\\r\\n        // will be lower in amount. Since refunds are capped to a percetange of\\r\\n        // the total transaction's gas, it is best to keep them low in cases\\r\\n        // like this one, to increase the likelihood of the full refund coming\\r\\n        // into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract OrderBook is OBStorage, IOrderBook, ReentrancyGuard {\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint256;\\r\\n    uint private constant _ORDER_CLOSED = 0x00000000000000000000000000000001;   // 128 bit\\r\\n\\r\\n    // _router: swap \\u8def\\u7531\\r\\n    // _ctokenFactory: ctoken \\u5de5\\u5382\\r\\n    // _wETH: eth/bnb/ht \\u767d\\u624b\\u5957\\r\\n    // _margin: \\u4ee3\\u6301\\u5408\\u7ea6\\u5730\\u5740\\r\\n    constructor(address _router, address _ctokenFactory, address _wETH, address _margin) public {\\r\\n      router = _router;\\r\\n      ctokenFactory = _ctokenFactory;\\r\\n      wETH = _wETH;\\r\\n      marginAddr = _margin;\\r\\n    }\\r\\n\\r\\n    modifier whenOpen() {\\r\\n        require(closed == false, \\\"order book closed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function closeOrderBook() external onlyOwner {\\r\\n      closed = true;\\r\\n    }\\r\\n\\r\\n    function openOrderBook() external onlyOwner {\\r\\n      closed = false;\\r\\n    }\\r\\n\\r\\n    function setMinOrderAmount(address token, uint amt) external onlyOwner {\\r\\n      minAmounts[token] = amt;\\r\\n    }\\r\\n\\r\\n    function _putOrder(OrderItem storage order) internal {\\r\\n      uint orderId = order.orderId;\\r\\n      bool margin = isMargin(order.flag);\\r\\n      uint addrIdx;\\r\\n      uint pairIdx;\\r\\n\\r\\n      if (margin) {\\r\\n          addrIdx = marginOrders[order.owner].length;\\r\\n          marginOrders[order.owner].push(orderId);\\r\\n      } else {\\r\\n          addrIdx = addressOrders[order.owner].length;\\r\\n          addressOrders[order.owner].push(orderId);\\r\\n      }\\r\\n\\r\\n      pairIdx = pairOrders[order.pair].length;\\r\\n      pairOrders[order.pair].push(orderId);\\r\\n\\r\\n      order.pairAddrIdx = maskAddrPairIndex(pairIdx, addrIdx);\\r\\n\\r\\n      emit CreateOrder(order.owner,\\r\\n          order.tokenAmt.srcToken,\\r\\n          order.tokenAmt.destToken,\\r\\n          orderId,\\r\\n          order.tokenAmt.amountIn,\\r\\n          order.tokenAmt.guaranteeAmountOut,\\r\\n          order.flag);\\r\\n    }\\r\\n\\r\\n    function _removeOrder(OrderItem memory order) private {\\r\\n        // uint orderId = order.orderId;\\r\\n        uint pairIdx = pairIndex(order.pairAddrIdx);\\r\\n        uint addrIdx = addrIndex(order.pairAddrIdx);\\r\\n        address owner = order.owner;\\r\\n        uint rIdx;\\r\\n        bool margin = isMargin(order.flag);\\r\\n        \\r\\n        if (margin) {\\r\\n            if ((marginOrders[owner].length > 1) && (addrIdx != marginOrders[owner].length-1)) {\\r\\n              rIdx = marginOrders[owner][marginOrders[owner].length - 1];\\r\\n              marginOrders[owner][addrIdx] = rIdx;\\r\\n              orders[rIdx].pairAddrIdx = updateAddrIdx(orders[rIdx].pairAddrIdx, addrIdx);\\r\\n            }\\r\\n            marginOrders[owner].pop();\\r\\n        } else {\\r\\n            if ((addressOrders[owner].length > 1) && (addrIdx != addressOrders[owner].length-1)) {\\r\\n              rIdx = addressOrders[owner][addressOrders[owner].length - 1];\\r\\n              addressOrders[owner][addrIdx] = rIdx;\\r\\n              orders[rIdx].pairAddrIdx = updateAddrIdx(orders[rIdx].pairAddrIdx, addrIdx);\\r\\n            }\\r\\n            addressOrders[owner].pop();\\r\\n        }\\r\\n\\r\\n        if ((pairOrders[order.pair].length > 1) && (pairIdx != pairOrders[order.pair].length-1)) {\\r\\n          rIdx = pairOrders[order.pair][pairOrders[order.pair].length - 1];\\r\\n          pairOrders[order.pair][pairIdx] = rIdx;\\r\\n          orders[rIdx].pairAddrIdx = updatePairIdx(orders[rIdx].pairAddrIdx, pairIdx);\\r\\n        }\\r\\n        pairOrders[order.pair].pop();\\r\\n    }\\r\\n\\r\\n    // \\u521b\\u5efa\\u8ba2\\u5355\\r\\n    // \\u8c03\\u7528\\u524d\\u9700\\u8981 approve\\r\\n    function createOrder(\\r\\n        address srcToken,\\r\\n        address destToken,\\r\\n        address to,             // \\u5151\\u6362\\u5f97\\u5230\\u7684token\\u53d1\\u9001\\u5730\\u5740 \\r\\n        uint amountIn,\\r\\n        uint guaranteeAmountOut,       // \\r\\n        // uint timestamp,          // \\u6302\\u5355\\u65f6\\u95f4\\r\\n        uint expiredAt,          // \\u8fc7\\u671f\\u65f6\\u95f4\\r\\n        uint flag) public payable whenOpen nonReentrant returns (uint) {\\r\\n      require(srcToken != destToken, \\\"identical token\\\");\\r\\n      require(expiredAt == 0 || expiredAt > block.timestamp, \\\"invalid param expiredAt\\\");\\r\\n\\r\\n      if (srcToken == address(0)) {\\r\\n        // \\u8f6c\\u5165 wETH\\r\\n        require(msg.value >= amountIn, \\\"not enough amountIn\\\");\\r\\n        // IWHT(wETH).deposit{value: msg.value}();\\r\\n        srcToken = wETH;\\r\\n      } else {\\r\\n        // should approve outside\\r\\n        TransferHelper.safeTransferFrom(srcToken, msg.sender, address(this), amountIn);\\r\\n      }\\r\\n\\r\\n      {\\r\\n        // \\u6700\\u4f4e\\u6302\\u5355\\u91cf\\u9650\\u5236\\r\\n        require(amountIn > minAmounts[srcToken], \\\"less than min amount\\\");\\r\\n      }\\r\\n      uint idx = orderId ++;\\r\\n      OrderItem storage order = orders[idx];\\r\\n      order.orderId = idx;\\r\\n      order.tokenAmt.srcToken = srcToken;\\r\\n      order.tokenAmt.destToken = destToken;\\r\\n      order.owner = msg.sender;\\r\\n      order.to = to == address(0) ? msg.sender : to;\\r\\n      order.tokenAmt.amountIn = amountIn;\\r\\n      order.tokenAmt.fulfiled = 0;\\r\\n      order.tokenAmt.guaranteeAmountOut = guaranteeAmountOut;\\r\\n      order.timestamp = maskTimestamp(block.timestamp, expiredAt);\\r\\n      order.flag = flag;\\r\\n\\r\\n      // (address token0, address token1) = srcToken < destToken ? (srcToken, destToken) : (destToken, srcToken);\\r\\n      order.pair = pairFor(srcToken, destToken);\\r\\n\\r\\n      _putOrder(order);\\r\\n\\r\\n      return idx;\\r\\n    }\\r\\n\\r\\n    // \\u83b7\\u53d6\\u6240\\u6709\\u8ba2\\u5355\\u5217\\u8868\\r\\n    function getAllOrders() public view returns(OrderItem[] memory allOrders) {\\r\\n      uint total = 0;\\r\\n      uint id = 0;\\r\\n      for (uint i = 0; i < orderId; i ++) {\\r\\n        uint flag = orders[i].flag;\\r\\n        if (_orderClosed(flag) == false) {\\r\\n          total ++;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      allOrders = new OrderItem[](total);\\r\\n      for (uint i = 0; i < orderId; i ++) {\\r\\n        OrderItem memory order = orders[i];\\r\\n        if (_orderClosed(order.flag) == false) {\\r\\n          allOrders[id] = order;\\r\\n          id ++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // \\u4ea4\\u6613\\u5bf9hash\\r\\n    function pairFor(address srcToken, address destToken) public view returns(uint pair) {\\r\\n      if (srcToken == address(0)) {\\r\\n          srcToken = wETH;\\r\\n      }\\r\\n      if (destToken == address(0)) {\\r\\n          destToken = wETH;\\r\\n      }\\r\\n      (address token0, address token1) = srcToken < destToken ? (srcToken, destToken) : (destToken, srcToken);\\r\\n      pair = uint(keccak256(abi.encodePacked(token0, token1)));\\r\\n    }\\r\\n\\r\\n    function _orderClosed(uint flag) private view returns (bool) {\\r\\n      return (flag & _ORDER_CLOSED) != 0;\\r\\n    }\\r\\n\\r\\n    // \\u589e\\u52a0\\u53c2\\u6570 address to, \\u8be5\\u53c2\\u6570\\u901a\\u8fc7 router \\u5408\\u7ea6\\u4f20\\u5165\\uff0c \\u5e76\\u9a8c\\u8bc1 to == item.owner \\r\\n    function cancelOrder(uint orderId) public nonReentrant {\\r\\n      OrderItem storage order = orders[orderId];\\r\\n\\r\\n      if (isMargin(order.flag)) {\\r\\n        require(msg.sender == owner() || msg.sender == marginAddr, \\\"cancelMarginOrder: no auth\\\");\\r\\n      } else {\\r\\n        require(msg.sender == owner() || msg.sender == order.owner, \\\"cancelOrder: no auth\\\");\\r\\n      }\\r\\n      require(_orderClosed(order.flag) == false, \\\"order has been closed\\\");\\r\\n      address srcToken = order.tokenAmt.srcToken;\\r\\n      uint amt = order.tokenAmt.amountIn.sub(order.tokenAmt.fulfiled);\\r\\n\\r\\n      if (srcToken == address(0)) {\\r\\n        TransferHelper.safeTransferETH(order.owner, amt);\\r\\n      } else {\\r\\n        TransferHelper.safeTransfer(srcToken, order.owner, amt);\\r\\n      }\\r\\n      emit CancelOrder(order.owner, orderId);\\r\\n      order.flag |= _ORDER_CLOSED;\\r\\n      _removeOrder(order);\\r\\n    }\\r\\n\\r\\n    // \\u5269\\u4f59\\u53ef\\u6210\\u4ea4\\u90e8\\u5206\\r\\n    function _amountRemaining(uint amtTotal, uint fulfiled) internal pure returns (uint) {\\r\\n        // (amtTotal - fulfiled) * (1 - fee)\\r\\n        return amtTotal.sub(fulfiled);\\r\\n    }\\r\\n\\r\\n    // buyAmt: \\u5f85\\u4e70\\u8d70\\u7684\\u6302\\u5356token\\u7684\\u6570\\u91cf, \\u672a\\u6263\\u9664\\u624b\\u7eed\\u8d39\\r\\n    // outAmt: \\u6302\\u5356\\u5f97\\u5230\\u7684token \\u7684\\u6570\\u91cf, \\u672a\\u6263\\u9664\\u624b\\u7eed\\u8d39\\r\\n    function _swap(address srcToken, address destToken, address maker, address buyer, uint buyAmt, uint outAmt, bool margin) private {\\r\\n      // bool margin = isMargin(order.flag);\\r\\n\\r\\n      if (margin) {\\r\\n        // \\u56de\\u8c03\\r\\n        IMarginHolding(marginAddr).onFulfiled(maker, outAmt, buyAmt);\\r\\n      } else {\\r\\n        balanceOf[destToken][maker] += outAmt;\\r\\n      }\\r\\n\\r\\n      // \\u4e70\\u5bb6\\u5f97\\u5230\\u7684\\u5e01\\r\\n      if (srcToken == address(0)) {\\r\\n        TransferHelper.safeTransferETH(buyer, buyAmt);\\r\\n      } else {\\r\\n        TransferHelper.safeTransfer(srcToken, buyer, buyAmt);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // todo\\r\\n    function getFeeRate() public view returns (uint) {\\r\\n      return 10000 - 30;\\r\\n    }\\r\\n\\r\\n    // order \\u6210\\u4ea4, \\u6536\\u53d6\\u6210\\u4ea4\\u540e\\u7684\\u5e01\\u7684\\u624b\\u7eed\\u8d39\\r\\n    // \\u666e\\u901a\\u8ba2\\u5355, maker \\u6210\\u4ea4\\u7684\\u5e01\\u7531\\u5408\\u7ea6\\u4ee3\\u6301; taker \\u7684\\u5e01\\u53d1\\u7ed9\\u7528\\u6237\\r\\n    //\\r\\n    function fulfilOrder(uint orderId, uint amtToTaken) external payable whenOpen nonReentrant returns (bool) {\\r\\n      OrderItem storage order = orders[orderId];\\r\\n      uint expired = getExpiredAt(order.timestamp);\\r\\n\\r\\n      if ((expired != 0) && (expired < block.timestamp)) {\\r\\n        // \\u5df2\\u8fc7\\u671f\\r\\n        cancelOrder(orderId);\\r\\n        return false;\\r\\n      }\\r\\n\\r\\n      if ((order.flag & _ORDER_CLOSED) > 0) {\\r\\n          return false;\\r\\n      }\\r\\n\\r\\n      uint left = order.tokenAmt.amountIn.sub(order.tokenAmt.fulfiled);\\r\\n\\r\\n      if(left < amtToTaken) {\\r\\n        return false;\\r\\n      } // , \\\"not enough\\\");\\r\\n\\r\\n      address destToken = order.tokenAmt.destToken;\\r\\n      // \\u6302\\u5355\\u8005\\u5728\\u4e0d\\u6263\\u9664\\u624b\\u7eed\\u8d39\\u7684\\u60c5\\u51b5\\u4e0b\\u5f97\\u5230\\u7684\\u5e01\\u7684\\u6570\\u91cf\\r\\n      uint amtDest = amtToTaken.mul(order.tokenAmt.guaranteeAmountOut).div(order.tokenAmt.amountIn);\\r\\n      uint fee = getFeeRate();\\r\\n      // \\u4e70\\u5bb6\\u5f97\\u5230\\u7684\\r\\n      uint _buyAmt = amtToTaken.mul(fee).div(10000);\\r\\n      uint _outAmt = amtDest.mul(fee).div(10000);\\r\\n      _swap(order.tokenAmt.srcToken, order.tokenAmt.destToken, order.owner, msg.sender, _buyAmt, _outAmt, isMargin(order.flag));\\r\\n\\r\\n      // \\u9a8c\\u8bc1\\u8f6c\\u79fb\\u4e70\\u5bb6\\u7684\\u5e01\\r\\n      if (destToken == address(0)) {\\r\\n        require(msg.value >= amtDest, \\\"amount not transfer in\\\");\\r\\n      } else {\\r\\n        TransferHelper.safeTransferFrom(destToken, msg.sender, address(this), amtDest);\\r\\n      }\\r\\n\\r\\n      left -= amtToTaken;\\r\\n      order.tokenAmt.fulfiled += amtToTaken;\\r\\n\\r\\n      emit FulFilOrder(order.owner, msg.sender, orderId, amtToTaken, amtDest, left);\\r\\n      if (left == 0) {\\r\\n        //\\r\\n        order.flag |= _ORDER_CLOSED;\\r\\n        _removeOrder(order);\\r\\n      }\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    // function fulfilOrders(uint[] memory orderIds, uint[] memory amtToTaken) external whenOpen {\\r\\n    //     require(orderIds.length == amtToTaken.length, \\\"array length should equal\\\");\\r\\n\\r\\n    //     for (uint i = 0; i < orderIds.length; i ++) {\\r\\n    //       try fulfilOrder(orderIds[i], amtToTaken[i]) {\\r\\n    //       } catch {\\r\\n    //         // nothing\\r\\n    //       }\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    // \\u7528\\u6237\\u6210\\u4ea4\\u540e\\uff0c\\u8d44\\u91d1\\u7531\\u5408\\u7ea6\\u4ee3\\u7ba1, \\u7528\\u6237\\u63d0\\u73b0\\u5f97\\u5230\\u81ea\\u5df1\\u7684 token\\r\\n    function withdraw(address token, uint amt) external {\\r\\n        uint total = balanceOf[token][msg.sender];\\r\\n        require(total >= amt, \\\"not enough asset\\\");\\r\\n\\r\\n        if (token == address(0)) {\\r\\n          TransferHelper.safeTransferETH(msg.sender, amt);\\r\\n        } else {\\r\\n          TransferHelper.safeTransfer(token, msg.sender, amt);\\r\\n        }\\r\\n\\r\\n        balanceOf[token][msg.sender] = total.sub(amt);\\r\\n    }\\r\\n\\r\\n    function adminTransfer(address token, address to, uint amt) external onlyOwner {\\r\\n        if (token == address(0)) {\\r\\n          TransferHelper.safeTransferETH(to, amt);\\r\\n        } else {\\r\\n          TransferHelper.safeTransfer(token, to, amt);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n    uint256 constant WAD = 10 ** 18;\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n\\r\\n    function wad() public pure returns (uint256) {\\r\\n        return WAD;\\r\\n    }\\r\\n\\r\\n    function ray() public pure returns (uint256) {\\r\\n        return RAY;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\\r\\n        if (a > 3) {\\r\\n            b = a;\\r\\n            uint256 x = a / 2 + 1;\\r\\n            while (x < b) {\\r\\n                b = x;\\r\\n                x = (a / x + x) / 2;\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            b = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / WAD;\\r\\n    }\\r\\n\\r\\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b) / RAY;\\r\\n    }\\r\\n\\r\\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, b), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, WAD), b);\\r\\n    }\\r\\n\\r\\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, WAD), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(mul(a, RAY), b);\\r\\n    }\\r\\n\\r\\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(mul(a, RAY), b / 2) / b;\\r\\n    }\\r\\n\\r\\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = WAD;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = wmul(result, x);\\r\\n            }\\r\\n            x = wmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 result = RAY;\\r\\n        while (n > 0) {\\r\\n            if (n % 2 != 0) {\\r\\n                result = rmul(result, x);\\r\\n            }\\r\\n            x = rmul(x, x);\\r\\n            n /= 2;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x15c8af6352bfadd3f88d16a2d3dc1df0bf2d0eabb2e7217950fc4b459a47e27f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102bb5760003560e01c806384e5eed01161016e578063c0e863c3116100cb578063f2fde38b1161007f578063f7888aec11610064578063f7888aec146106a9578063f887ea40146106c9578063fbd2eb7c146106de576102bb565b8063f2fde38b14610669578063f3fef3a314610689576102bb565b8063da72c1e8116100b0578063da72c1e814610634578063e4fc9e5b1461044b578063f242862114610654576102bb565b8063c0e863c314610614578063d7755b8b1461052c576102bb565b8063978bbdb911610122578063a04310d911610107578063a04310d9146105b6578063a66eb9ac146105cb578063a85c38ef146105e0576102bb565b8063978bbdb9146105815780639c5e52d514610596576102bb565b80638add99f7116101535780638add99f71461052c5780638da5cb5b1461054c57806396ed28f914610561576102bb565b806384e5eed0146104f7578063862d77ba1461050c576102bb565b80634f8871831161021c5780636d0b6a6c116101d05780637623cccb116101b55780637623cccb146104a05780637bea0d1c146104c0578063803289fe146104e2576102bb565b80636d0b6a6c1461046b578063715018a61461048b576102bb565b806352e86d5b1161020157806352e86d5b14610416578063597e1fb514610436578063613436bc1461044b576102bb565b80634f887183146103d4578063514fcac7146103f6576102bb565b806325c9e27611610273578063415e63b811610258578063415e63b81461038a57806345e66071146103aa5780634e5eda11146103bf576102bb565b806325c9e276146103535780633623cd3d14610375576102bb565b80631cf60222116102a45780631cf60222146103005780631d20980a146103205780631e9e420414610340576102bb565b80630aa2f420146102c0578063163de5e5146102eb575b600080fd5b3480156102cc57600080fd5b506102d56106fe565b6040516102e291906128b6565b60405180910390f35b3480156102f757600080fd5b506102d5610704565b34801561030c57600080fd5b506102d561031b36600461221f565b61070a565b34801561032c57600080fd5b506102d561033b366004612269565b610738565b6102d561034e366004612175565b61074d565b34801561035f57600080fd5b50610368610969565b6040516102e29190612322565b34801561038157600080fd5b506102d5610978565b61039d610398366004612281565b61097e565b6040516102e2919061243b565b3480156103b657600080fd5b50610368610c8a565b3480156103cb57600080fd5b50610368610c99565b3480156103e057600080fd5b506103f46103ef366004612126565b610ca8565b005b34801561040257600080fd5b506103f4610411366004612269565b610d09565b34801561042257600080fd5b506102d5610431366004612281565b610fad565b34801561044257600080fd5b5061039d610fc6565b34801561045757600080fd5b506102d5610466366004612269565b610fcf565b34801561047757600080fd5b506102d5610486366004612281565b610fd5565b34801561049757600080fd5b506103f4610ff3565b3480156104ac57600080fd5b5061039d6104bb366004612269565b61107c565b3480156104cc57600080fd5b506104d56110a3565b6040516102e29190612394565b3480156104ee57600080fd5b506103f4611248565b34801561050357600080fd5b506102d5611293565b34801561051857600080fd5b506102d5610527366004612281565b611299565b34801561053857600080fd5b506102d5610547366004612281565b6112b3565b34801561055857600080fd5b506103686112ba565b34801561056d57600080fd5b506102d561057c366004612141565b6112c9565b34801561058d57600080fd5b506102d5611363565b3480156105a257600080fd5b506102d56105b1366004612126565b611369565b3480156105c257600080fd5b506102d561137b565b3480156105d757600080fd5b506103f4611381565b3480156105ec57600080fd5b506106006105fb366004612269565b6113cf565b6040516102e29897969594939291906128bf565b34801561062057600080fd5b506103f461062f36600461221f565b61145c565b34801561064057600080fd5b506103f461064f3660046121df565b6114b7565b34801561066057600080fd5b50610368611523565b34801561067557600080fd5b506103f4610684366004612126565b611532565b34801561069557600080fd5b506103f46106a436600461221f565b6115f2565b3480156106b557600080fd5b506102d56106c4366004612141565b611694565b3480156106d557600080fd5b506103686116b1565b3480156106ea57600080fd5b506102d56106f936600461221f565b6116c5565b60015481565b60025481565b600e602052816000526040600020818154811061072357fe5b90600052602060002001600091509150505481565b6fffffffffffffffffffffffffffffffff1690565b60035460009060ff161561077c5760405162461bcd60e51b81526004016107739061277d565b60405180910390fd5b60115460ff1661079e5760405162461bcd60e51b81526004016107739061287f565b6011805460ff191690556001600160a01b0388811690881614156107d45760405162461bcd60e51b8152600401610773906127b4565b8215806107e057504283115b6107fc5760405162461bcd60e51b81526004016107739061250d565b6001600160a01b03881661083d578434101561082a5760405162461bcd60e51b81526004016107739061260d565b6004546001600160a01b03169750610849565b610849883330886116de565b6001600160a01b0388166000908152600b602052604090205485116108805760405162461bcd60e51b8152600401610773906126b2565b600280546001810182556000818152600d602052604090208181556007810180546001600160a01b03808e166001600160a01b0319928316179092556008830180548d84169083161790559382018054909416331790935590918816156108e757876108e9565b335b6003820180546001600160a01b0319166001600160a01b0392909216919091179055600981018790556000600a820155600b810186905561092a42866112b3565b6005820155600681018490556109408a8a6112c9565b600482015561094e816117e4565b5090506011805460ff19166001179055979650505050505050565b6005546001600160a01b031681565b60095481565b60035460009060ff16156109a45760405162461bcd60e51b81526004016107739061277d565b60115460ff166109c65760405162461bcd60e51b81526004016107739061287f565b6011805460ff191690556000838152600d6020526040812060058101549091906109ef90610fcf565b905080158015906109ff57504281105b15610a1857610a0d85610d09565b600092505050610c77565b600682015460011615610a3057600092505050610c77565b600a8201546009830154600091610a479190611919565b905084811015610a5d5760009350505050610c77565b60088301546009840154600b8501546001600160a01b0390921691600091610a9091610a8a908a90611962565b9061199c565b90506000610a9c611293565b90506000610ab0612710610a8a8b85611962565b90506000610ac4612710610a8a8686611962565b600789015460088a015460028b015460068c0154939450610b07936001600160a01b03938416939283169290911690339087908790610b029061107c565b6119de565b6001600160a01b038516610b3a5783341015610b355760405162461bcd60e51b8152600401610773906125d6565b610b46565b610b46853330876116de565b600a880180548b0190556002880154604051968b90039633916001600160a01b0316907fc4da0ed5c63d261a1e04ac35307957a9d404d4a3e6e9dc446ae24589147da94f90610b9c908f908f908a908d90612914565b60405180910390a385610c6a5760068801805460019081179182905560408051610100810182528b548152918b015460208084019190915260028c01546001600160a01b039081168484015260038d0154811660608086019190915260048e015460808087019190915260058f015460a08088019190915260c08701979097528451968701855260078f01548316875260088f01549092169286019290925260098d015492850192909252600a8c015490840152600b8b01549083015260e0810191909152610c6a90611ac5565b6001985050505050505050505b6011805460ff1916600117905592915050565b6006546001600160a01b031681565b6007546001600160a01b031681565b610cb0611e73565b6001600160a01b0316610cc16112ba565b6001600160a01b031614610ce75760405162461bcd60e51b8152600401610773906125a1565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60115460ff16610d2b5760405162461bcd60e51b81526004016107739061287f565b6011805460ff191690556000818152600d602052604090206006810154610d519061107c565b15610da857610d5e6112ba565b6001600160a01b0316336001600160a01b03161480610d8757506006546001600160a01b031633145b610da35760405162461bcd60e51b815260040161077390612746565b610df7565b610db06112ba565b6001600160a01b0316336001600160a01b03161480610ddb575060028101546001600160a01b031633145b610df75760405162461bcd60e51b815260040161077390612644565b610e048160060154611e77565b15610e215760405162461bcd60e51b81526004016107739061267b565b6007810154600a82015460098301546001600160a01b0390921691600091610e499190611919565b90506001600160a01b038216610e76576002830154610e71906001600160a01b031682611e7f565b610e90565b6002830154610e909083906001600160a01b031683611f0c565b60028301546040516001600160a01b03909116907fc0e68d6b69f741c21e955cad2ae4d505b6f6735c7e7b278251b3f6283a5f07eb90610ed19087906128b6565b60405180910390a26006830180546001908117918290556040805161010081018252865481529186015460208084019190915260028701546001600160a01b039081168484015260038801548116606080860191909152600489015460808087019190915260058a015460a08088019190915260c08701979097528451968701855260078a01548316875260088a015490921692860192909252600988015492850192909252600a87015490840152600b8601549083015260e0810191909152610f9a90611ac5565b50506011805460ff191660011790555050565b6010602052816000526040600020818154811061072357fe5b60035460ff1681565b60801c90565b6000610fe082610fcf565b610fe984610738565b1790505b92915050565b610ffb611e73565b6001600160a01b031661100c6112ba565b6001600160a01b0316146110325760405162461bcd60e51b8152600401610773906125a1565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f800000000000000000000000000000000000000000000000000000000000000016151590565b606060008060005b6002548110156110e4576000818152600d60205260409020600601546110d081611e77565b6110db576001909301925b506001016110ab565b508167ffffffffffffffff811180156110fc57600080fd5b5060405190808252806020026020018201604052801561113657816020015b611123612072565b81526020019060019003908161111b5790505b50925060005b6002548110156112425761114e612072565b506000818152600d60209081526040918290208251610100810184528154815260018201548184015260028201546001600160a01b0390811682860152600383015481166060808401919091526004840154608080850191909152600585015460a080860191909152600686015460c0860190815288519182018952600787015485168252600887015490941696810196909652600985015496860196909652600a84015490850152600b909201549383019390935260e08301919091525161121690611e77565b611239578085848151811061122757fe5b60209081029190910101526001909201915b5060010161113c565b50505090565b611250611e73565b6001600160a01b03166112616112ba565b6001600160a01b0316146112875760405162461bcd60e51b8152600401610773906125a1565b6003805460ff19169055565b6126f290565b6fffffffffffffffffffffffffffffffff19919091161790565b60801b1790565b6000546001600160a01b031690565b60006001600160a01b0383166112e8576004546001600160a01b031692505b6001600160a01b038216611305576004546001600160a01b031691505b600080836001600160a01b0316856001600160a01b03161061132857838561132b565b84845b9150915081816040516020016113429291906122df565b60408051601f19818403018152919052805160209091012095945050505050565b600a5481565b600b6020526000908152604090205481565b60085481565b611389611e73565b6001600160a01b031661139a6112ba565b6001600160a01b0316146113c05760405162461bcd60e51b8152600401610773906125a1565b6003805460ff19166001179055565b600d602090815260009182526040918290208054600182015460028301546003840154600485015460058601546006870154895160a081018b5260078901546001600160a01b03908116825260088a015481169a82019a909a5260098901549a81019a909a52600a88015460608b0152600b9097015460808a015294979396928316959190921693919288565b611464611e73565b6001600160a01b03166114756112ba565b6001600160a01b03161461149b5760405162461bcd60e51b8152600401610773906125a1565b6001600160a01b039091166000908152600b6020526040902055565b6114bf611e73565b6001600160a01b03166114d06112ba565b6001600160a01b0316146114f65760405162461bcd60e51b8152600401610773906125a1565b6001600160a01b0383166115135761150e8282611e7f565b61151e565b61151e838383611f0c565b505050565b6004546001600160a01b031681565b61153a611e73565b6001600160a01b031661154b6112ba565b6001600160a01b0316146115715760405162461bcd60e51b8152600401610773906125a1565b6001600160a01b0381166115975760405162461bcd60e51b8152600401610773906124b0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600c60209081526040808320338452909152902054818110156116365760405162461bcd60e51b8152600401610773906127eb565b6001600160a01b0383166116535761164e3383611e7f565b61165e565b61165e833384611f0c565b6116688183611919565b6001600160a01b039093166000908152600c602090815260408083203384529091529020929092555050565b600c60209081526000928352604080842090915290825290205481565b60035461010090046001600160a01b031681565b600f602052816000526040600020818154811061072357fe5b60006060856001600160a01b03166323b872dd86868660405160240161170693929190612336565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516117549190612306565b6000604051808303816000865af19150503d8060008114611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b606091505b50915091508180156117c05750805115806117c05750808060200190518101906117c09190612249565b6117dc5760405162461bcd60e51b815260040161077390612822565b505050505050565b805460068201546000906117f79061107c565b905060008082156118395760028501546001600160a01b03166000908152600e602090815260408220805460018101825590835291208101859055915061186c565b60028501546001600160a01b03166000908152600f60209081526040822080546001810182559083529120810185905591505b5060048401546000908152601060209081526040822080546001810182559083529120810184905561189e81836112b3565b60018601556008850154600786015460028701546009880154600b89015460068a01546040516001600160a01b039687169695861695909416937fc8419e5c94126588374d91d4332ef5d56223abb9c42776b667e899ccff2c5f279361190a938c939192909190612914565b60405180910390a45050505050565b600061195b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061200f565b9392505050565b60008261197157506000610fed565b8282028284828161197e57fe5b041461195b5760405162461bcd60e51b815260040161077390612544565b600061195b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061203b565b8015611a68576006546040517ff4e2c0370000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063f4e2c03790611a3190889086908890600401612373565b600060405180830381600087803b158015611a4b57600080fd5b505af1158015611a5f573d6000803e3d6000fd5b50505050611a94565b6001600160a01b038087166000908152600c602090815260408083209389168352929052208054830190555b6001600160a01b038716611ab157611aac8484611e7f565b611abc565b611abc878585611f0c565b50505050505050565b6000611ad48260200151610738565b90506000611ae58360200151610fcf565b9050600083604001519050600080611b008660c0015161107c565b90508015611c34576001600160a01b0383166000908152600e60205260409020546001108015611b4c57506001600160a01b0383166000908152600e6020526040902054600019018414155b15611bf8576001600160a01b0383166000908152600e6020526040902080546000198101908110611b7957fe5b9060005260206000200154915081600e6000856001600160a01b03166001600160a01b031681526020019081526020016000208581548110611bb757fe5b9060005260206000200181905550611be5600d60008481526020019081526020016000206001015485610fd5565b6000838152600d60205260409020600101555b6001600160a01b0383166000908152600e60205260409020805480611c1957fe5b60019003818190600052602060002001600090559055611d5c565b6001600160a01b0383166000908152600f60205260409020546001108015611c7857506001600160a01b0383166000908152600f6020526040902054600019018414155b15611d24576001600160a01b0383166000908152600f6020526040902080546000198101908110611ca557fe5b9060005260206000200154915081600f6000856001600160a01b03166001600160a01b031681526020019081526020016000208581548110611ce357fe5b9060005260206000200181905550611d11600d60008481526020019081526020016000206001015485610fd5565b6000838152600d60205260409020600101555b6001600160a01b0383166000908152600f60205260409020805480611d4557fe5b600190038181906000526020600020016000905590555b60808601516000908152601060205260409020546001108015611d9657506080860151600090815260106020526040902054600019018514155b15611e3957608086018051600090815260106020526040808220925182529020548154600019909101908110611dc857fe5b906000526020600020015491508160106000886080015181526020019081526020016000208681548110611df857fe5b9060005260206000200181905550611e26600d60008481526020019081526020016000206001015486611299565b6000838152600d60205260409020600101555b60808601516000908152601060205260409020805480611e5557fe5b60019003818190600052602060002001600090559055505050505050565b3390565b600116151590565b604080516000808252602082019092526001600160a01b038416908390604051611ea99190612306565b60006040518083038185875af1925050503d8060008114611ee6576040519150601f19603f3d011682016040523d82523d6000602084013e611eeb565b606091505b505090508061151e5760405162461bcd60e51b8152600401610773906126e9565b60006060846001600160a01b031663a9059cbb8585604051602401611f3292919061235a565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611f809190612306565b6000604051808303816000865af19150503d8060008114611fbd576040519150601f19603f3d011682016040523d82523d6000602084013e611fc2565b606091505b5091509150818015611fec575080511580611fec575080806020019051810190611fec9190612249565b6120085760405162461bcd60e51b815260040161077390612479565b5050505050565b600081848411156120335760405162461bcd60e51b81526004016107739190612446565b505050900390565b6000818361205c5760405162461bcd60e51b81526004016107739190612446565b50600083858161206857fe5b0495945050505050565b604051806101000160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016120c96120ce565b905290565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b80356001600160a01b0381168114610fed57600080fd5b600060208284031215612137578081fd5b61195b838361210f565b60008060408385031215612153578081fd5b61215d848461210f565b915061216c846020850161210f565b90509250929050565b600080600080600080600060e0888a03121561218f578283fd5b612199898961210f565b96506121a88960208a0161210f565b95506121b78960408a0161210f565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b6000806000606084860312156121f3578283fd5b83356121fe8161295f565b9250602084013561220e8161295f565b929592945050506040919091013590565b60008060408385031215612231578182fd5b61223b848461210f565b946020939093013593505050565b60006020828403121561225a578081fd5b8151801515811461195b578182fd5b60006020828403121561227a578081fd5b5035919050565b60008060408385031215612293578182fd5b50508035926020909101359150565b6001600160a01b03808251168352806020830151166020840152506040810151604083015260608101516060830152608081015160808301525050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6000825161231881846020870161292f565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b602080825282518282018190526000919060409081850190868401855b8281101561242e578151805185528681015187860152858101516001600160a01b0390811687870152606080830151909116908601526080808201519086015260a0808201519086015260c0808201519086015260e09081015190612418818701836122a2565b50506101809390930192908501906001016123b1565b5091979650505050505050565b901515815260200190565b600060208252825180602084015261246581604085016020870161292f565b601f01601f19169190910160400192915050565b6020808252601f908201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f696e76616c696420706172616d20657870697265644174000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526016908201527f616d6f756e74206e6f74207472616e7366657220696e00000000000000000000604082015260600190565b60208082526013908201527f6e6f7420656e6f75676820616d6f756e74496e00000000000000000000000000604082015260600190565b60208082526014908201527f63616e63656c4f726465723a206e6f2061757468000000000000000000000000604082015260600190565b60208082526015908201527f6f7264657220686173206265656e20636c6f7365640000000000000000000000604082015260600190565b60208082526014908201527f6c657373207468616e206d696e20616d6f756e74000000000000000000000000604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201527f4c45440000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f63616e63656c4d617267696e4f726465723a206e6f2061757468000000000000604082015260600190565b60208082526011908201527f6f7264657220626f6f6b20636c6f736564000000000000000000000000000000604082015260600190565b6020808252600f908201527f6964656e746963616c20746f6b656e0000000000000000000000000000000000604082015260600190565b60208082526010908201527f6e6f7420656e6f75676820617373657400000000000000000000000000000000604082015260600190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160408201527f494c454400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b888152602081018890526001600160a01b038781166040830152861660608201526080810185905260a0810184905260c08101839052610180810161290760e08301846122a2565b9998505050505050505050565b93845260208401929092526040830152606082015260800190565b60005b8381101561294a578181015183820152602001612932565b83811115612959576000848401525b50505050565b6001600160a01b038116811461297457600080fd5b5056fea26469706673582212204580c1134e3c580586e7e081bdf0380b036bb2093d216ba4e3a586455c090c4664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 276,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "priceRatio",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 278,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "orderId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 280,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "closed",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 282,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "router",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 284,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "wETH",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 286,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "ctokenFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 288,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "marginAddr",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 290,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "swapMining",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 292,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "minBuyAmt",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 294,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "minSellAmt",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 297,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "feeRate",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 301,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "minAmounts",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 307,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "balanceOf",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 311,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "orders",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(OrderItem)273_storage)"
      },
      {
        "astId": 316,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "marginOrders",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 321,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "addressOrders",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 326,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "pairOrders",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 535,
        "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
        "label": "_notEntered",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(OrderItem)273_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OBStorage.OrderItem)",
        "numberOfBytes": "32",
        "value": "t_struct(OrderItem)273_storage"
      },
      "t_struct(OrderItem)273_storage": {
        "encoding": "inplace",
        "label": "struct OBStorage.OrderItem",
        "members": [
          {
            "astId": 258,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "orderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 260,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "pairAddrIdx",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 262,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 264,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "to",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 266,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "pair",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 268,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 270,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "flag",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 272,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "tokenAmt",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(TokenAmount)256_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(TokenAmount)256_storage": {
        "encoding": "inplace",
        "label": "struct OBStorage.TokenAmount",
        "members": [
          {
            "astId": 247,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "srcToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 249,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "destToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 251,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "amountIn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 253,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "fulfiled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 255,
            "contract": "contracts/swap/orderbook/Orderbook.sol:OrderBook",
            "label": "guaranteeAmountOut",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}